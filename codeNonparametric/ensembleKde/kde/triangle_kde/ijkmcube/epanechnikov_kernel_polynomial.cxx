#include "epanechnikov_kernel_polynomial.h"
#include <cfloat>
#include "math.h"


// Issues faced : If z value is 0 or 1, the 3 quantities, i.e., pdf, expected and second moment evaluate to NAN because of division by 0.
// Therefore, when z is 0 or 1, z is fluctuated by small amount 1.0e-5. 

// Expressions for expected and second moment contain term log(fabs(-0.1e1 + z)) which gives NAN,  since -0.1e1 + z is a negative quantity (as z is in the range [0,1]) and log of negative numeber in C is
// NAN. however it can be derived log(-z) = log(z) + i*pi. These imaginary parts cancel out. Thus, every term log(fabs(-0.1e1 + z)) is replaced with log(fabs(-0.1e1 + z)).

// there are total 12 basic pieces so piece number will vary from  1 to 12 (These basic pieces vary depending upon the parallelogram)

// very sensitive. can make computations unstable so if some case fails try for 1e-2. For climate ensembel tweak is 1e-1.
double e_tweak = 1.0e-3;
double e_epsilon = 1.0e-4;


// Check later for DBL_EPSILON working/not

double epanechnikov_kernel_polynomial :: PQRS_integrate_piece_value(double z, int piecenum)
{
// Expressions for pdf(z)
	
 if(fabs(z) < e_epsilon)	
	{
		z = e_tweak;
	}
	if(fabs(1-z) < e_epsilon)	
	{
		z = 1 - e_tweak;
	}


	switch (piecenum)
	{
		
		case 1:		
				return -(-0.24e2 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * c * delta1 + 0.12e2 * mu1 * pow(z, 0.4e1) * delta1 * c * mu2 * delta2 + 0.12e2 * c * mu2 * z * z * delta2 * mu1 * delta1 - 0.84e2 * c * mu1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.12e2 * c * mu1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.24e2 * c * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.6e1 * c * delta1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 - 0.24e2 * mu1 * mu2 * z * z * delta2 * delta1 * delta1 - 0.6e1 * mu2 * z * z * delta2 * mu1 * mu1 * delta1 - 0.24e2 * mu1 * z * z * mu2 * c * c * delta1 + 0.252e3 * mu1 * z * z * mu2 * c * delta1 * delta1 + 0.12e2 * mu1 * pow(z, 0.3e1) * mu2 * c * c * delta1 - 0.252e3 * mu1 * pow(z, 0.3e1) * mu2 * c * delta1 * delta1 + 0.24e2 * mu1 * pow(z, 0.3e1) * c * mu2 * mu2 * delta1 - 0.48e2 * mu1 * pow(z, 0.3e1) * c * delta2 * delta2 * delta1 - 0.18e2 * mu1 * mu1 * z * z * c * delta2 * delta1 + 0.18e2 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * c * delta1 - 0.36e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * c * delta1 + 0.36e2 * mu1 * mu1 * z * z * mu2 * c * delta1 - 0.6e1 * mu1 * pow(z, 0.3e1) * delta1 * delta2 * c * c + 0.72e2 * mu1 * pow(z, 0.3e1) * delta1 * delta1 * delta2 * c + 0.12e2 * mu1 * z * z * c * c * delta2 * delta1 - 0.72e2 * mu1 * z * z * c * delta2 * delta1 * delta1 - 0.12e2 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * c * c + 0.72e2 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * delta1 * delta1 + 0.24e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * c + 0.18e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * delta1 - 0.6e1 * mu1 * mu1 * pow(z, 0.4e1) * delta2 * c * delta1 + 0.12e2 * mu1 * mu1 * pow(z, 0.4e1) * c * mu2 * delta1 - 0.18e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * delta2 - 0.12e2 * mu1 * mu1 * pow(z, 0.4e1) * c * mu2 * delta2 + 0.6e1 * mu1 * mu1 * pow(z, 0.5e1) * mu2 * delta1 * delta2 - 0.24e2 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * delta2 * c + 0.84e2 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * c * mu2 - 0.72e2 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * mu2 * delta2 + 0.24e2 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * mu2 * delta2 - 0.24e2 * mu1 * pow(z, 0.5e1) * delta1 * mu2 * delta2 * delta2 - 0.12e2 * mu1 * pow(z, 0.4e1) * delta1 * c * mu2 * mu2 - 0.6e1 * mu1 * pow(z, 0.5e1) * delta1 * mu2 * mu2 * delta2 + 0.24e2 * mu1 * pow(z, 0.4e1) * delta1 * c * delta2 * delta2 + 0.84e2 * mu1 * pow(z, 0.4e1) * c * mu2 * delta2 * delta2 + 0.12e2 * mu1 * pow(z, 0.4e1) * c * mu2 * mu2 * delta2 + 0.48e2 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * delta2 * delta2 + 0.12e2 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * mu2 * delta2 + 0.6e1 * delta1 * pow(z, 0.3e1) * mu2 * delta2 * c * c - 0.48e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * delta2 * c + 0.24e2 * delta1 * delta1 * pow(z, 0.4e1) * c * mu2 * delta2 - 0.24e2 * delta1 * pow(z, 0.4e1) * c * mu2 * delta2 * delta2 - 0.6e1 * delta1 * pow(z, 0.4e1) * c * mu2 * mu2 * delta2 - 0.12e2 * c * mu2 * z * mu1 * mu1 * delta1 - 0.84e2 * c * mu2 * z * mu1 * delta1 * delta1 - 0.12e2 * c * z * z * mu2 * mu2 * mu1 * delta1 + 0.24e2 * c * mu1 * delta2 * delta2 * z * z * delta1 - 0.6e1 * c * c * delta2 * z * mu1 * delta1 + 0.12e2 * mu2 * z * c * c * mu1 * delta1 + 0.6e1 * c * mu1 * mu1 * delta2 * z * delta1 + 0.24e2 * c * mu1 * delta2 * z * delta1 * delta1 - 0.12e2 * c * mu2 * z * z * delta2 * mu1 * mu1 + 0.24e2 * c * mu2 * z * z * delta2 * delta1 * delta1 + 0.12e2 * mu2 * z * z * delta2 * c * c * mu1 - 0.6e1 * mu2 * z * z * delta2 * c * c * delta1 - pow(mu1, 0.5e1) + 0.5e1 * pow(delta1, 0.5e1) + 0.5e1 * pow(mu1, 0.5e1) * z + 0.10e2 * pow(mu1, 0.5e1) * pow(z, 0.3e1) - 0.10e2 * pow(mu1, 0.5e1) * z * z + pow(mu1, 0.5e1) * pow(z, 0.5e1) - 0.5e1 * pow(mu1, 0.5e1) * pow(z, 0.4e1) - 0.25e2 * pow(delta1, 0.5e1) * z - 0.50e2 * pow(delta1, 0.5e1) * pow(z, 0.3e1) + 0.50e2 * pow(delta1, 0.5e1) * z * z + 0.25e2 * pow(delta1, 0.5e1) * pow(z, 0.4e1) - 0.5e1 * pow(delta1, 0.5e1) * pow(z, 0.5e1) - 0.10e2 * pow(mu1, 0.3e1) * c * c + 0.26e2 * pow(delta1, 0.3e1) * c * c - 0.5e1 * pow(c, 0.4e1) * mu1 + pow(c, 0.4e1) * delta1 + 0.5e1 * c * pow(mu1, 0.4e1) - 0.19e2 * c * pow(delta1, 0.4e1) + 0.10e2 * pow(c, 0.3e1) * mu1 * mu1 - 0.14e2 * pow(c, 0.3e1) * delta1 * delta1 + pow(mu1, 0.4e1) * delta1 + 0.26e2 * pow(delta1, 0.3e1) * mu1 * mu1 + 0.14e2 * pow(mu1, 0.3e1) * delta1 * delta1 + 0.19e2 * mu1 * pow(delta1, 0.4e1) - pow(mu2, 0.5e1) * pow(z, 0.5e1) + 0.5e1 * pow(delta2, 0.5e1) * pow(z, 0.5e1) + 0.208e3 * mu1 * z * pow(delta1, 0.3e1) * c + 0.8e1 * mu1 * z * pow(c, 0.3e1) * delta1 - 0.18e2 * mu1 * mu1 * z * c * c * delta1 + 0.16e2 * pow(mu1, 0.3e1) * z * c * delta1 + 0.168e3 * mu1 * mu1 * z * c * delta1 * delta1 - 0.126e3 * mu1 * z * c * c * delta1 * delta1 + 0.168e3 * mu1 * mu1 * pow(z, 0.3e1) * c * delta1 * delta1 - 0.6e1 * mu1 * mu1 * pow(z, 0.3e1) * c * c * delta1 + 0.16e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * c * delta1 + 0.18e2 * mu1 * mu1 * z * z * c * c * delta1 - 0.24e2 * pow(mu1, 0.3e1) * z * z * c * delta1 - 0.252e3 * mu1 * mu1 * z * z * c * delta1 * delta1 + 0.60e2 * mu1 * mu1 * z * z * mu2 * c * c - 0.60e2 * pow(mu1, 0.3e1) * z * z * mu2 * c - 0.16e2 * pow(mu1, 0.3e1) * z * z * mu2 * delta1 - 0.168e3 * mu1 * mu1 * z * z * mu2 * delta1 * delta1 - 0.30e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * c * c + 0.60e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * c + 0.24e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * delta1 + 0.252e3 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * delta1 * delta1 - 0.60e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * c - 0.18e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * delta1 + 0.84e2 * mu1 * mu1 * pow(z, 0.3e1) * c * delta2 * delta2 + 0.36e2 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * delta2 * delta1 + 0.198e3 * mu1 * pow(z, 0.3e1) * delta1 * delta1 * delta2 * delta2 + 0.208e3 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.3e1) * c - 0.42e2 * mu1 * pow(z, 0.3e1) * c * c * delta1 * delta1 - 0.4e1 * mu1 * z * z * pow(c, 0.3e1) * delta1 + 0.126e3 * mu1 * z * z * c * c * delta1 * delta1 - 0.312e3 * mu1 * z * z * c * pow(delta1, 0.3e1) - 0.20e2 * mu1 * z * z * mu2 * pow(c, 0.3e1) - 0.208e3 * mu1 * z * z * mu2 * pow(delta1, 0.3e1) + 0.312e3 * mu1 * pow(z, 0.3e1) * mu2 * pow(delta1, 0.3e1) + 0.30e2 * mu1 * pow(z, 0.3e1) * c * c * mu2 * mu2 - 0.42e2 * mu1 * pow(z, 0.3e1) * c * c * delta2 * delta2 - 0.126e3 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * delta1 * delta1 - 0.84e2 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.3e1) * delta2 + 0.4e1 * mu1 * z * z * pow(c, 0.3e1) * delta2 + 0.6e1 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * c * c - 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta2 * c - 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta2 * delta1 - 0.72e2 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * delta1 * delta1 - 0.12e2 * mu1 * mu1 * z * z * c * c * delta2 + 0.12e2 * pow(mu1, 0.3e1) * z * z * c * delta2 + 0.8e1 * pow(mu1, 0.3e1) * z * z * delta2 * delta1 + 0.48e2 * mu1 * mu1 * z * z * delta2 * delta1 * delta1 - 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * delta2 + 0.56e2 * mu1 * z * z * pow(delta1, 0.3e1) * delta2 - 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * c * delta1 + 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * mu2 * delta2 - 0.16e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * mu2 * delta1 + 0.8e1 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * delta2 * delta1 + 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * c * delta2 - 0.20e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * c * mu2 - 0.2e1 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * delta2 * delta1 - 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * mu2 * delta2 + 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * mu2 * delta1 - 0.36e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * delta2 * delta2 + 0.42e2 * mu1 * mu1 * pow(z, 0.5e1) * mu2 * delta2 * delta2 + 0.42e2 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * mu2 + 0.12e2 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * delta2 * delta2 - 0.12e2 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * delta2 + 0.30e2 * mu1 * mu1 * pow(z, 0.4e1) * c * mu2 * mu2 + 0.18e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * mu2 - 0.168e3 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * mu2 - 0.6e1 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * mu2 * mu2 + 0.6e1 * mu1 * mu1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 - 0.42e2 * mu1 * mu1 * pow(z, 0.4e1) * c * delta2 * delta2 + 0.48e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * delta2 - 0.42e2 * mu1 * mu1 * pow(z, 0.4e1) * c * delta1 * delta1 - 0.84e2 * mu1 * mu1 * pow(z, 0.4e1) * mu2 * delta2 * delta2 - 0.12e2 * mu1 * mu1 * pow(z, 0.4e1) * mu2 * mu2 * delta2 - 0.8e1 * mu1 * pow(z, 0.4e1) * delta1 * pow(mu2, 0.3e1) + 0.28e2 * mu1 * pow(z, 0.4e1) * delta1 * pow(delta2, 0.3e1) - 0.52e2 * mu1 * pow(z, 0.5e1) * mu2 * pow(delta2, 0.3e1) - 0.42e2 * mu1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 * delta2 - 0.4e1 * mu1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) * delta2 + 0.4e1 * mu1 * pow(z, 0.5e1) * delta1 * pow(mu2, 0.3e1) - 0.14e2 * mu1 * pow(z, 0.5e1) * delta1 * pow(delta2, 0.3e1) - 0.198e3 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * delta2 * delta2 + 0.52e2 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.3e1) * mu2 + 0.66e2 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * delta2 * delta2 - 0.14e2 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.3e1) * delta2 + 0.126e3 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * mu2 * mu2 - 0.208e3 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) * mu2 - 0.42e2 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * mu2 * mu2 + 0.56e2 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) * delta2 - 0.52e2 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) * c - 0.20e2 * mu1 * pow(z, 0.4e1) * c * pow(mu2, 0.3e1) + 0.52e2 * mu1 * pow(z, 0.4e1) * c * pow(delta2, 0.3e1) - 0.84e2 * delta1 * delta1 * z * z * mu2 * c * c + 0.156e3 * pow(delta1, 0.3e1) * z * z * mu2 * c + 0.42e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * c * c - 0.156e3 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * mu2 * c - 0.40e2 * pow(delta1, 0.3e1) * z * z * delta2 * delta2 + 0.19e2 * mu2 * z * pow(delta1, 0.4e1) + 0.26e2 * mu2 * mu2 * z * z * pow(delta1, 0.3e1) - 0.5e1 * pow(delta1, 0.4e1) * delta2 * z + delta1 * pow(mu2, 0.4e1) * pow(z, 0.4e1) - 0.5e1 * delta1 * pow(delta2, 0.4e1) * pow(z, 0.4e1) + 0.14e2 * delta1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.40e2 * delta1 * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.20e2 * pow(mu1, 0.4e1) * z * c - 0.5e1 * pow(mu1, 0.4e1) * z * delta1 - 0.130e3 * mu1 * mu1 * z * pow(delta1, 0.3e1) - 0.20e2 * mu1 * mu1 * z * pow(c, 0.3e1) - 0.70e2 * pow(mu1, 0.3e1) * z * delta1 * delta1 + 0.5e1 * mu1 * z * pow(c, 0.4e1) - 0.95e2 * mu1 * z * pow(delta1, 0.4e1) + 0.30e2 * pow(mu1, 0.3e1) * z * c * c - 0.190e3 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.4e1) + 0.190e3 * mu1 * z * z * pow(delta1, 0.4e1) + 0.10e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * c * c - 0.140e3 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta1 * delta1 - 0.20e2 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * c - 0.10e2 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * delta1 - 0.260e3 * mu1 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.3e1) + 0.10e2 * mu1 * mu1 * z * z * pow(c, 0.3e1) - 0.30e2 * pow(mu1, 0.3e1) * z * z * c * c + 0.30e2 * pow(mu1, 0.4e1) * z * z * c + 0.10e2 * pow(mu1, 0.4e1) * z * z * delta1 + 0.140e3 * pow(mu1, 0.3e1) * z * z * delta1 * delta1 + 0.260e3 * mu1 * mu1 * z * z * pow(delta1, 0.3e1) + 0.20e2 * pow(mu1, 0.4e1) * z * z * mu2 - 0.30e2 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * mu2 + 0.30e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * mu2 - 0.42e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta2 * delta2 + 0.6e1 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * delta2 - 0.4e1 * pow(mu1, 0.4e1) * z * z * delta2 + 0.95e2 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.4e1) - 0.19e2 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.4e1) + 0.5e1 * mu1 * pow(z, 0.5e1) * pow(mu2, 0.4e1) - 0.19e2 * mu1 * pow(z, 0.5e1) * pow(delta2, 0.4e1) - 0.10e2 * mu1 * mu1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) + 0.130e3 * mu1 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) - 0.26e2 * mu1 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.3e1) + 0.26e2 * mu1 * mu1 * pow(z, 0.5e1) * pow(delta2, 0.3e1) + 0.5e1 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * c + 0.5e1 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * delta1 - 0.4e1 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * delta2 + 0.20e2 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * mu2 - 0.30e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * mu2 * mu2 + 0.10e2 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * mu2 * mu2 - 0.5e1 * pow(mu1, 0.4e1) * pow(z, 0.5e1) * mu2 - pow(mu1, 0.4e1) * pow(z, 0.5e1) * delta1 + pow(mu1, 0.4e1) * pow(z, 0.5e1) * delta2 + 0.42e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * delta2 * delta2 - 0.14e2 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * delta2 * delta2 - 0.14e2 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * delta1 * delta1 + 0.70e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * delta1 * delta1 + 0.20e2 * mu1 * mu1 * pow(z, 0.4e1) * pow(mu2, 0.3e1) - 0.52e2 * mu1 * mu1 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.76e2 * pow(delta1, 0.4e1) * z * c + 0.28e2 * delta1 * delta1 * z * pow(c, 0.3e1) - delta1 * z * pow(c, 0.4e1) - 0.78e2 * pow(delta1, 0.3e1) * z * c * c + 0.120e3 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * delta2 * delta2 + 0.76e2 * pow(delta1, 0.4e1) * pow(z, 0.3e1) * c - 0.26e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * c * c - 0.14e2 * delta1 * delta1 * z * z * pow(c, 0.3e1) + 0.78e2 * pow(delta1, 0.3e1) * z * z * c * c - 0.114e3 * pow(delta1, 0.4e1) * z * z * c - 0.76e2 * pow(delta1, 0.4e1) * z * z * mu2 + 0.114e3 * pow(delta1, 0.4e1) * pow(z, 0.3e1) * mu2 - 0.78e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * mu2 * mu2 - 0.30e2 * pow(delta1, 0.4e1) * pow(z, 0.3e1) * delta2 + 0.20e2 * pow(delta1, 0.4e1) * z * z * delta2 - delta1 * pow(z, 0.5e1) * pow(mu2, 0.4e1) + 0.5e1 * delta1 * pow(z, 0.5e1) * pow(delta2, 0.4e1) - 0.28e2 * delta1 * delta1 * pow(z, 0.4e1) * pow(mu2, 0.3e1) + 0.80e2 * delta1 * delta1 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.14e2 * delta1 * delta1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) - 0.40e2 * delta1 * delta1 * pow(z, 0.5e1) * pow(delta2, 0.3e1) - 0.120e3 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * delta2 * delta2 + 0.19e2 * pow(delta1, 0.4e1) * pow(z, 0.5e1) * mu2 + 0.40e2 * pow(delta1, 0.3e1) * pow(z, 0.5e1) * delta2 * delta2 - 0.5e1 * pow(delta1, 0.4e1) * pow(z, 0.5e1) * delta2 + 0.78e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * mu2 * mu2 - 0.76e2 * pow(delta1, 0.4e1) * pow(z, 0.4e1) * mu2 - 0.26e2 * pow(delta1, 0.3e1) * pow(z, 0.5e1) * mu2 * mu2 + 0.20e2 * pow(delta1, 0.4e1) * pow(z, 0.4e1) * delta2 - 0.19e2 * pow(delta1, 0.4e1) * pow(z, 0.4e1) * c - 0.4e1 * c * pow(mu1, 0.3e1) * delta1 - 0.52e2 * c * pow(delta1, 0.3e1) * mu1 - 0.42e2 * c * mu1 * mu1 * delta1 * delta1 - 0.4e1 * pow(c, 0.3e1) * mu1 * delta1 + 0.6e1 * c * c * mu1 * mu1 * delta1 + 0.42e2 * c * c * delta1 * delta1 * mu1 - 0.5e1 * mu2 * z * pow(c, 0.4e1) + 0.10e2 * z * z * pow(c, 0.3e1) * mu2 * mu2 - 0.14e2 * pow(c, 0.3e1) * delta2 * delta2 * z * z + pow(c, 0.4e1) * delta2 * z + 0.5e1 * c * pow(mu2, 0.4e1) * pow(z, 0.4e1) - 0.19e2 * c * pow(delta2, 0.4e1) * pow(z, 0.4e1) - 0.10e2 * c * c * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.26e2 * c * c * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.5e1 * mu2 * z * pow(mu1, 0.4e1) - 0.10e2 * z * z * mu2 * mu2 * pow(mu1, 0.3e1) + 0.14e2 * pow(mu1, 0.3e1) * delta2 * delta2 * z * z + pow(mu1, 0.4e1) * delta2 * z - 0.5e1 * mu1 * pow(mu2, 0.4e1) * pow(z, 0.4e1) + 0.19e2 * mu1 * pow(delta2, 0.4e1) * pow(z, 0.4e1) - 0.10e2 * mu1 * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.26e2 * mu1 * mu1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + pow(c, 0.5e1) + 0.84e2 * delta1 * delta1 * pow(z, 0.3e1) * c * mu2 * mu2 - 0.132e3 * delta1 * delta1 * pow(z, 0.3e1) * c * delta2 * delta2 + 0.4e1 * delta1 * z * z * mu2 * pow(c, 0.3e1) - 0.6e1 * delta1 * pow(z, 0.3e1) * c * c * mu2 * mu2 + 0.12e2 * delta1 * pow(z, 0.3e1) * c * c * delta2 * delta2 - 0.2e1 * delta1 * z * z * pow(c, 0.3e1) * delta2 - 0.12e2 * delta1 * delta1 * pow(z, 0.3e1) * delta2 * c * c + 0.42e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * delta2 * c + 0.24e2 * delta1 * delta1 * z * z * c * c * delta2 - 0.42e2 * pow(delta1, 0.3e1) * z * z * c * delta2 + 0.42e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * mu2 * delta2 - 0.14e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * delta2 * c + 0.52e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * c * mu2 - 0.42e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * mu2 * delta2 + 0.14e2 * pow(delta1, 0.3e1) * pow(z, 0.5e1) * mu2 * delta2 - 0.66e2 * delta1 * delta1 * pow(z, 0.5e1) * mu2 * delta2 * delta2 - 0.42e2 * delta1 * delta1 * pow(z, 0.4e1) * c * mu2 * mu2 - 0.12e2 * delta1 * delta1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 + 0.66e2 * delta1 * delta1 * pow(z, 0.4e1) * c * delta2 * delta2 + 0.132e3 * delta1 * delta1 * pow(z, 0.4e1) * mu2 * delta2 * delta2 + 0.24e2 * delta1 * delta1 * pow(z, 0.4e1) * mu2 * mu2 * delta2 + 0.14e2 * delta1 * pow(z, 0.5e1) * mu2 * pow(delta2, 0.3e1) + 0.12e2 * delta1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 * delta2 + 0.2e1 * delta1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) * delta2 + 0.4e1 * delta1 * pow(z, 0.4e1) * c * pow(mu2, 0.3e1) - 0.14e2 * delta1 * pow(z, 0.4e1) * c * pow(delta2, 0.3e1) + 0.20e2 * mu2 * z * pow(c, 0.3e1) * mu1 - 0.4e1 * mu2 * z * pow(c, 0.3e1) * delta1 - 0.30e2 * mu2 * z * c * c * mu1 * mu1 + 0.42e2 * mu2 * z * c * c * delta1 * delta1 - 0.30e2 * z * z * mu2 * mu2 * mu1 * c * c + 0.6e1 * z * z * c * c * mu2 * mu2 * delta1 + 0.42e2 * c * c * delta2 * delta2 * z * z * mu1 - 0.12e2 * c * c * delta2 * delta2 * z * z * delta1 + 0.66e2 * c * delta1 * delta1 * z * z * delta2 * delta2 + 0.20e2 * c * mu2 * z * pow(mu1, 0.3e1) - 0.52e2 * c * mu2 * z * pow(delta1, 0.3e1) + 0.30e2 * c * z * z * mu2 * mu2 * mu1 * mu1 - 0.42e2 * c * mu1 * mu1 * delta2 * delta2 * z * z - 0.42e2 * c * mu2 * mu2 * z * z * delta1 * delta1 - 0.4e1 * c * pow(mu1, 0.3e1) * delta2 * z - 0.4e1 * pow(c, 0.3e1) * delta2 * z * mu1 + 0.2e1 * pow(c, 0.3e1) * delta2 * z * delta1 + 0.6e1 * c * c * delta2 * z * mu1 * mu1 - 0.12e2 * c * c * delta2 * z * delta1 * delta1 - 0.4e1 * mu2 * z * z * delta2 * pow(c, 0.3e1) + 0.14e2 * c * pow(delta1, 0.3e1) * delta2 * z + 0.42e2 * c * c * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.6e1 * c * c * mu2 * mu2 * pow(z, 0.3e1) * delta2 - 0.4e1 * c * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.14e2 * c * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.52e2 * c * mu2 * pow(z, 0.4e1) * pow(delta2, 0.3e1) - 0.42e2 * c * mu2 * mu2 * pow(z, 0.4e1) * delta2 * delta2 - 0.4e1 * c * pow(mu2, 0.3e1) * pow(z, 0.4e1) * delta2 + 0.20e2 * c * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.52e2 * c * mu1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + 0.4e1 * mu2 * z * pow(mu1, 0.3e1) * delta1 + 0.42e2 * mu2 * z * mu1 * mu1 * delta1 * delta1 + 0.6e1 * z * z * mu2 * mu2 * mu1 * mu1 * delta1 - 0.12e2 * mu1 * mu1 * delta2 * delta2 * z * z * delta1 - 0.66e2 * mu1 * delta1 * delta1 * z * z * delta2 * delta2 + 0.52e2 * mu1 * mu2 * z * pow(delta1, 0.3e1) + 0.42e2 * mu1 * mu2 * mu2 * z * z * delta1 * delta1 - 0.2e1 * pow(mu1, 0.3e1) * delta2 * z * delta1 - 0.12e2 * mu1 * mu1 * delta2 * z * delta1 * delta1 + 0.4e1 * mu2 * z * z * delta2 * pow(mu1, 0.3e1) - 0.14e2 * mu1 * pow(delta1, 0.3e1) * delta2 * z + 0.42e2 * mu1 * mu1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.6e1 * mu1 * mu1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.4e1 * mu1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.14e2 * mu1 * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + 0.52e2 * mu1 * mu2 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.42e2 * mu1 * mu2 * mu2 * pow(z, 0.4e1) * delta2 * delta2 + 0.4e1 * mu1 * pow(mu2, 0.3e1) * pow(z, 0.4e1) * delta2 - 0.14e2 * mu2 * z * z * delta2 * pow(delta1, 0.3e1) - 0.66e2 * delta1 * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.12e2 * delta1 * delta1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 - 0.14e2 * delta1 * mu2 * pow(z, 0.4e1) * pow(delta2, 0.3e1) - 0.12e2 * delta1 * mu2 * mu2 * pow(z, 0.4e1) * delta2 * delta2 - 0.2e1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.4e1) * delta2 - 0.24e2 * mu1 * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.6e1 * mu1 * delta1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.19e2 * mu2 * pow(z, 0.5e1) * pow(delta2, 0.4e1) + 0.26e2 * mu2 * mu2 * pow(z, 0.5e1) * pow(delta2, 0.3e1) + 0.14e2 * pow(mu2, 0.3e1) * pow(z, 0.5e1) * delta2 * delta2 + pow(mu2, 0.4e1) * pow(z, 0.5e1) * delta2) * (mu1 * z + delta1 * z + c - mu1 - delta1 - mu2 * z - delta2 * z) * pow(z, -0.3e1) * pow(delta1, -0.3e1) * pow(delta2, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.320e3;

				
		case 2:
		
				return  (0.24e2 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * c * delta1 - 0.12e2 * mu1 * pow(z, 0.4e1) * delta1 * c * mu2 * delta2 - 0.12e2 * c * mu2 * z * z * delta2 * mu1 * delta1 - 0.84e2 * c * mu1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.12e2 * c * mu1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 - 0.24e2 * c * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.6e1 * c * delta1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 - 0.24e2 * mu1 * mu2 * z * z * delta2 * delta1 * delta1 + 0.6e1 * mu2 * z * z * delta2 * mu1 * mu1 * delta1 + 0.24e2 * mu1 * z * z * mu2 * c * c * delta1 + 0.252e3 * mu1 * z * z * mu2 * c * delta1 * delta1 - 0.12e2 * mu1 * pow(z, 0.3e1) * mu2 * c * c * delta1 - 0.252e3 * mu1 * pow(z, 0.3e1) * mu2 * c * delta1 * delta1 - 0.24e2 * mu1 * pow(z, 0.3e1) * c * mu2 * mu2 * delta1 + 0.48e2 * mu1 * pow(z, 0.3e1) * c * delta2 * delta2 * delta1 + 0.18e2 * mu1 * mu1 * z * z * c * delta2 * delta1 - 0.18e2 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * c * delta1 + 0.36e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * c * delta1 - 0.36e2 * mu1 * mu1 * z * z * mu2 * c * delta1 + 0.6e1 * mu1 * pow(z, 0.3e1) * delta1 * delta2 * c * c + 0.72e2 * mu1 * pow(z, 0.3e1) * delta1 * delta1 * delta2 * c - 0.12e2 * mu1 * z * z * c * c * delta2 * delta1 - 0.72e2 * mu1 * z * z * c * delta2 * delta1 * delta1 - 0.12e2 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * c * c + 0.72e2 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * delta1 * delta1 + 0.24e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * c - 0.18e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * delta1 + 0.6e1 * mu1 * mu1 * pow(z, 0.4e1) * delta2 * c * delta1 - 0.12e2 * mu1 * mu1 * pow(z, 0.4e1) * c * mu2 * delta1 + 0.18e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * delta2 - 0.12e2 * mu1 * mu1 * pow(z, 0.4e1) * c * mu2 * delta2 - 0.6e1 * mu1 * mu1 * pow(z, 0.5e1) * mu2 * delta1 * delta2 - 0.24e2 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * delta2 * c + 0.84e2 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * c * mu2 - 0.72e2 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * mu2 * delta2 + 0.24e2 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * mu2 * delta2 + 0.24e2 * mu1 * pow(z, 0.5e1) * delta1 * mu2 * delta2 * delta2 + 0.12e2 * mu1 * pow(z, 0.4e1) * delta1 * c * mu2 * mu2 + 0.6e1 * mu1 * pow(z, 0.5e1) * delta1 * mu2 * mu2 * delta2 - 0.24e2 * mu1 * pow(z, 0.4e1) * delta1 * c * delta2 * delta2 + 0.84e2 * mu1 * pow(z, 0.4e1) * c * mu2 * delta2 * delta2 + 0.12e2 * mu1 * pow(z, 0.4e1) * c * mu2 * mu2 * delta2 - 0.48e2 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * delta2 * delta2 - 0.12e2 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * mu2 * delta2 - 0.6e1 * delta1 * pow(z, 0.3e1) * mu2 * delta2 * c * c - 0.48e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * delta2 * c + 0.24e2 * delta1 * delta1 * pow(z, 0.4e1) * c * mu2 * delta2 + 0.24e2 * delta1 * pow(z, 0.4e1) * c * mu2 * delta2 * delta2 + 0.6e1 * delta1 * pow(z, 0.4e1) * c * mu2 * mu2 * delta2 + 0.12e2 * c * mu2 * z * mu1 * mu1 * delta1 - 0.84e2 * c * mu2 * z * mu1 * delta1 * delta1 + 0.12e2 * c * z * z * mu2 * mu2 * mu1 * delta1 - 0.24e2 * c * mu1 * delta2 * delta2 * z * z * delta1 + 0.6e1 * c * c * delta2 * z * mu1 * delta1 - 0.12e2 * mu2 * z * c * c * mu1 * delta1 - 0.6e1 * c * mu1 * mu1 * delta2 * z * delta1 + 0.24e2 * c * mu1 * delta2 * z * delta1 * delta1 - 0.12e2 * c * mu2 * z * z * delta2 * mu1 * mu1 + 0.24e2 * c * mu2 * z * z * delta2 * delta1 * delta1 + 0.12e2 * mu2 * z * z * delta2 * c * c * mu1 + 0.6e1 * mu2 * z * z * delta2 * c * c * delta1 - pow(mu1, 0.5e1) - 0.5e1 * pow(delta1, 0.5e1) + 0.5e1 * pow(mu1, 0.5e1) * z + 0.10e2 * pow(mu1, 0.5e1) * pow(z, 0.3e1) - 0.10e2 * pow(mu1, 0.5e1) * z * z + pow(mu1, 0.5e1) * pow(z, 0.5e1) - 0.5e1 * pow(mu1, 0.5e1) * pow(z, 0.4e1) + 0.25e2 * pow(delta1, 0.5e1) * z + 0.50e2 * pow(delta1, 0.5e1) * pow(z, 0.3e1) - 0.50e2 * pow(delta1, 0.5e1) * z * z - 0.25e2 * pow(delta1, 0.5e1) * pow(z, 0.4e1) + 0.5e1 * pow(delta1, 0.5e1) * pow(z, 0.5e1) - 0.10e2 * pow(mu1, 0.3e1) * c * c - 0.26e2 * pow(delta1, 0.3e1) * c * c - 0.5e1 * pow(c, 0.4e1) * mu1 - pow(c, 0.4e1) * delta1 + 0.5e1 * c * pow(mu1, 0.4e1) - 0.19e2 * c * pow(delta1, 0.4e1) + 0.10e2 * pow(c, 0.3e1) * mu1 * mu1 - 0.14e2 * pow(c, 0.3e1) * delta1 * delta1 - pow(mu1, 0.4e1) * delta1 - 0.26e2 * pow(delta1, 0.3e1) * mu1 * mu1 + 0.14e2 * pow(mu1, 0.3e1) * delta1 * delta1 + 0.19e2 * mu1 * pow(delta1, 0.4e1) - pow(mu2, 0.5e1) * pow(z, 0.5e1) + 0.5e1 * pow(delta2, 0.5e1) * pow(z, 0.5e1) - 0.208e3 * mu1 * z * pow(delta1, 0.3e1) * c - 0.8e1 * mu1 * z * pow(c, 0.3e1) * delta1 + 0.18e2 * mu1 * mu1 * z * c * c * delta1 - 0.16e2 * pow(mu1, 0.3e1) * z * c * delta1 + 0.168e3 * mu1 * mu1 * z * c * delta1 * delta1 - 0.126e3 * mu1 * z * c * c * delta1 * delta1 + 0.168e3 * mu1 * mu1 * pow(z, 0.3e1) * c * delta1 * delta1 + 0.6e1 * mu1 * mu1 * pow(z, 0.3e1) * c * c * delta1 - 0.16e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * c * delta1 - 0.18e2 * mu1 * mu1 * z * z * c * c * delta1 + 0.24e2 * pow(mu1, 0.3e1) * z * z * c * delta1 - 0.252e3 * mu1 * mu1 * z * z * c * delta1 * delta1 + 0.60e2 * mu1 * mu1 * z * z * mu2 * c * c - 0.60e2 * pow(mu1, 0.3e1) * z * z * mu2 * c + 0.16e2 * pow(mu1, 0.3e1) * z * z * mu2 * delta1 - 0.168e3 * mu1 * mu1 * z * z * mu2 * delta1 * delta1 - 0.30e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * c * c + 0.60e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * c - 0.24e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * delta1 + 0.252e3 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * delta1 * delta1 - 0.60e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * c + 0.18e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * delta1 + 0.84e2 * mu1 * mu1 * pow(z, 0.3e1) * c * delta2 * delta2 - 0.36e2 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * delta2 * delta1 + 0.198e3 * mu1 * pow(z, 0.3e1) * delta1 * delta1 * delta2 * delta2 - 0.208e3 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.3e1) * c - 0.42e2 * mu1 * pow(z, 0.3e1) * c * c * delta1 * delta1 + 0.4e1 * mu1 * z * z * pow(c, 0.3e1) * delta1 + 0.126e3 * mu1 * z * z * c * c * delta1 * delta1 + 0.312e3 * mu1 * z * z * c * pow(delta1, 0.3e1) - 0.20e2 * mu1 * z * z * mu2 * pow(c, 0.3e1) + 0.208e3 * mu1 * z * z * mu2 * pow(delta1, 0.3e1) - 0.312e3 * mu1 * pow(z, 0.3e1) * mu2 * pow(delta1, 0.3e1) + 0.30e2 * mu1 * pow(z, 0.3e1) * c * c * mu2 * mu2 - 0.42e2 * mu1 * pow(z, 0.3e1) * c * c * delta2 * delta2 - 0.126e3 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * delta1 * delta1 + 0.84e2 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.3e1) * delta2 + 0.4e1 * mu1 * z * z * pow(c, 0.3e1) * delta2 + 0.6e1 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * c * c - 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta2 * c + 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta2 * delta1 - 0.72e2 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * delta1 * delta1 - 0.12e2 * mu1 * mu1 * z * z * c * c * delta2 + 0.12e2 * pow(mu1, 0.3e1) * z * z * c * delta2 - 0.8e1 * pow(mu1, 0.3e1) * z * z * delta2 * delta1 + 0.48e2 * mu1 * mu1 * z * z * delta2 * delta1 * delta1 - 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * delta2 - 0.56e2 * mu1 * z * z * pow(delta1, 0.3e1) * delta2 + 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * c * delta1 + 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * mu2 * delta2 + 0.16e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * mu2 * delta1 - 0.8e1 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * delta2 * delta1 + 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * c * delta2 - 0.20e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * c * mu2 + 0.2e1 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * delta2 * delta1 - 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * mu2 * delta2 - 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * mu2 * delta1 + 0.36e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * delta2 * delta2 + 0.42e2 * mu1 * mu1 * pow(z, 0.5e1) * mu2 * delta2 * delta2 + 0.42e2 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * mu2 - 0.12e2 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * delta2 * delta2 - 0.12e2 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * delta2 + 0.30e2 * mu1 * mu1 * pow(z, 0.4e1) * c * mu2 * mu2 - 0.18e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * mu2 - 0.168e3 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * mu2 + 0.6e1 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * mu2 * mu2 + 0.6e1 * mu1 * mu1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 - 0.42e2 * mu1 * mu1 * pow(z, 0.4e1) * c * delta2 * delta2 + 0.48e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * delta2 - 0.42e2 * mu1 * mu1 * pow(z, 0.4e1) * c * delta1 * delta1 - 0.84e2 * mu1 * mu1 * pow(z, 0.4e1) * mu2 * delta2 * delta2 - 0.12e2 * mu1 * mu1 * pow(z, 0.4e1) * mu2 * mu2 * delta2 + 0.8e1 * mu1 * pow(z, 0.4e1) * delta1 * pow(mu2, 0.3e1) - 0.28e2 * mu1 * pow(z, 0.4e1) * delta1 * pow(delta2, 0.3e1) - 0.52e2 * mu1 * pow(z, 0.5e1) * mu2 * pow(delta2, 0.3e1) - 0.42e2 * mu1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 * delta2 - 0.4e1 * mu1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) * delta2 - 0.4e1 * mu1 * pow(z, 0.5e1) * delta1 * pow(mu2, 0.3e1) + 0.14e2 * mu1 * pow(z, 0.5e1) * delta1 * pow(delta2, 0.3e1) - 0.198e3 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * delta2 * delta2 - 0.52e2 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.3e1) * mu2 + 0.66e2 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * delta2 * delta2 + 0.14e2 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.3e1) * delta2 + 0.126e3 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * mu2 * mu2 + 0.208e3 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) * mu2 - 0.42e2 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * mu2 * mu2 - 0.56e2 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) * delta2 + 0.52e2 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) * c - 0.20e2 * mu1 * pow(z, 0.4e1) * c * pow(mu2, 0.3e1) + 0.52e2 * mu1 * pow(z, 0.4e1) * c * pow(delta2, 0.3e1) - 0.84e2 * delta1 * delta1 * z * z * mu2 * c * c - 0.156e3 * pow(delta1, 0.3e1) * z * z * mu2 * c + 0.42e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * c * c + 0.156e3 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * mu2 * c + 0.40e2 * pow(delta1, 0.3e1) * z * z * delta2 * delta2 + 0.19e2 * mu2 * z * pow(delta1, 0.4e1) - 0.26e2 * mu2 * mu2 * z * z * pow(delta1, 0.3e1) - 0.5e1 * pow(delta1, 0.4e1) * delta2 * z - delta1 * pow(mu2, 0.4e1) * pow(z, 0.4e1) + 0.5e1 * delta1 * pow(delta2, 0.4e1) * pow(z, 0.4e1) + 0.14e2 * delta1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.40e2 * delta1 * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.20e2 * pow(mu1, 0.4e1) * z * c + 0.5e1 * pow(mu1, 0.4e1) * z * delta1 + 0.130e3 * mu1 * mu1 * z * pow(delta1, 0.3e1) - 0.20e2 * mu1 * mu1 * z * pow(c, 0.3e1) - 0.70e2 * pow(mu1, 0.3e1) * z * delta1 * delta1 + 0.5e1 * mu1 * z * pow(c, 0.4e1) - 0.95e2 * mu1 * z * pow(delta1, 0.4e1) + 0.30e2 * pow(mu1, 0.3e1) * z * c * c - 0.190e3 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.4e1) + 0.190e3 * mu1 * z * z * pow(delta1, 0.4e1) + 0.10e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * c * c - 0.140e3 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta1 * delta1 - 0.20e2 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * c + 0.10e2 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * delta1 + 0.260e3 * mu1 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.3e1) + 0.10e2 * mu1 * mu1 * z * z * pow(c, 0.3e1) - 0.30e2 * pow(mu1, 0.3e1) * z * z * c * c + 0.30e2 * pow(mu1, 0.4e1) * z * z * c - 0.10e2 * pow(mu1, 0.4e1) * z * z * delta1 + 0.140e3 * pow(mu1, 0.3e1) * z * z * delta1 * delta1 - 0.260e3 * mu1 * mu1 * z * z * pow(delta1, 0.3e1) + 0.20e2 * pow(mu1, 0.4e1) * z * z * mu2 - 0.30e2 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * mu2 + 0.30e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * mu2 - 0.42e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta2 * delta2 + 0.6e1 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * delta2 - 0.4e1 * pow(mu1, 0.4e1) * z * z * delta2 + 0.95e2 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.4e1) - 0.19e2 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.4e1) + 0.5e1 * mu1 * pow(z, 0.5e1) * pow(mu2, 0.4e1) - 0.19e2 * mu1 * pow(z, 0.5e1) * pow(delta2, 0.4e1) - 0.10e2 * mu1 * mu1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) - 0.130e3 * mu1 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) + 0.26e2 * mu1 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.3e1) + 0.26e2 * mu1 * mu1 * pow(z, 0.5e1) * pow(delta2, 0.3e1) + 0.5e1 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * c - 0.5e1 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * delta1 - 0.4e1 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * delta2 + 0.20e2 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * mu2 - 0.30e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * mu2 * mu2 + 0.10e2 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * mu2 * mu2 - 0.5e1 * pow(mu1, 0.4e1) * pow(z, 0.5e1) * mu2 + pow(mu1, 0.4e1) * pow(z, 0.5e1) * delta1 + pow(mu1, 0.4e1) * pow(z, 0.5e1) * delta2 + 0.42e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * delta2 * delta2 - 0.14e2 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * delta2 * delta2 - 0.14e2 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * delta1 * delta1 + 0.70e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * delta1 * delta1 + 0.20e2 * mu1 * mu1 * pow(z, 0.4e1) * pow(mu2, 0.3e1) - 0.52e2 * mu1 * mu1 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.76e2 * pow(delta1, 0.4e1) * z * c + 0.28e2 * delta1 * delta1 * z * pow(c, 0.3e1) + delta1 * z * pow(c, 0.4e1) + 0.78e2 * pow(delta1, 0.3e1) * z * c * c - 0.120e3 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * delta2 * delta2 + 0.76e2 * pow(delta1, 0.4e1) * pow(z, 0.3e1) * c + 0.26e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * c * c - 0.14e2 * delta1 * delta1 * z * z * pow(c, 0.3e1) - 0.78e2 * pow(delta1, 0.3e1) * z * z * c * c - 0.114e3 * pow(delta1, 0.4e1) * z * z * c - 0.76e2 * pow(delta1, 0.4e1) * z * z * mu2 + 0.114e3 * pow(delta1, 0.4e1) * pow(z, 0.3e1) * mu2 + 0.78e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * mu2 * mu2 - 0.30e2 * pow(delta1, 0.4e1) * pow(z, 0.3e1) * delta2 + 0.20e2 * pow(delta1, 0.4e1) * z * z * delta2 + delta1 * pow(z, 0.5e1) * pow(mu2, 0.4e1) - 0.5e1 * delta1 * pow(z, 0.5e1) * pow(delta2, 0.4e1) - 0.28e2 * delta1 * delta1 * pow(z, 0.4e1) * pow(mu2, 0.3e1) + 0.80e2 * delta1 * delta1 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.14e2 * delta1 * delta1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) - 0.40e2 * delta1 * delta1 * pow(z, 0.5e1) * pow(delta2, 0.3e1) + 0.120e3 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * delta2 * delta2 + 0.19e2 * pow(delta1, 0.4e1) * pow(z, 0.5e1) * mu2 - 0.40e2 * pow(delta1, 0.3e1) * pow(z, 0.5e1) * delta2 * delta2 - 0.5e1 * pow(delta1, 0.4e1) * pow(z, 0.5e1) * delta2 - 0.78e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * mu2 * mu2 - 0.76e2 * pow(delta1, 0.4e1) * pow(z, 0.4e1) * mu2 + 0.26e2 * pow(delta1, 0.3e1) * pow(z, 0.5e1) * mu2 * mu2 + 0.20e2 * pow(delta1, 0.4e1) * pow(z, 0.4e1) * delta2 - 0.19e2 * pow(delta1, 0.4e1) * pow(z, 0.4e1) * c + 0.4e1 * c * pow(mu1, 0.3e1) * delta1 + 0.52e2 * c * pow(delta1, 0.3e1) * mu1 - 0.42e2 * c * mu1 * mu1 * delta1 * delta1 + 0.4e1 * pow(c, 0.3e1) * mu1 * delta1 - 0.6e1 * c * c * mu1 * mu1 * delta1 + 0.42e2 * c * c * delta1 * delta1 * mu1 - 0.5e1 * mu2 * z * pow(c, 0.4e1) + 0.10e2 * z * z * pow(c, 0.3e1) * mu2 * mu2 - 0.14e2 * pow(c, 0.3e1) * delta2 * delta2 * z * z + pow(c, 0.4e1) * delta2 * z + 0.5e1 * c * pow(mu2, 0.4e1) * pow(z, 0.4e1) - 0.19e2 * c * pow(delta2, 0.4e1) * pow(z, 0.4e1) - 0.10e2 * c * c * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.26e2 * c * c * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.5e1 * mu2 * z * pow(mu1, 0.4e1) - 0.10e2 * z * z * mu2 * mu2 * pow(mu1, 0.3e1) + 0.14e2 * pow(mu1, 0.3e1) * delta2 * delta2 * z * z + pow(mu1, 0.4e1) * delta2 * z - 0.5e1 * mu1 * pow(mu2, 0.4e1) * pow(z, 0.4e1) + 0.19e2 * mu1 * pow(delta2, 0.4e1) * pow(z, 0.4e1) - 0.10e2 * mu1 * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.26e2 * mu1 * mu1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + pow(c, 0.5e1) + 0.84e2 * delta1 * delta1 * pow(z, 0.3e1) * c * mu2 * mu2 - 0.132e3 * delta1 * delta1 * pow(z, 0.3e1) * c * delta2 * delta2 - 0.4e1 * delta1 * z * z * mu2 * pow(c, 0.3e1) + 0.6e1 * delta1 * pow(z, 0.3e1) * c * c * mu2 * mu2 - 0.12e2 * delta1 * pow(z, 0.3e1) * c * c * delta2 * delta2 + 0.2e1 * delta1 * z * z * pow(c, 0.3e1) * delta2 - 0.12e2 * delta1 * delta1 * pow(z, 0.3e1) * delta2 * c * c - 0.42e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * delta2 * c + 0.24e2 * delta1 * delta1 * z * z * c * c * delta2 + 0.42e2 * pow(delta1, 0.3e1) * z * z * c * delta2 - 0.42e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * mu2 * delta2 + 0.14e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * delta2 * c - 0.52e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * c * mu2 + 0.42e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * mu2 * delta2 - 0.14e2 * pow(delta1, 0.3e1) * pow(z, 0.5e1) * mu2 * delta2 - 0.66e2 * delta1 * delta1 * pow(z, 0.5e1) * mu2 * delta2 * delta2 - 0.42e2 * delta1 * delta1 * pow(z, 0.4e1) * c * mu2 * mu2 - 0.12e2 * delta1 * delta1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 + 0.66e2 * delta1 * delta1 * pow(z, 0.4e1) * c * delta2 * delta2 + 0.132e3 * delta1 * delta1 * pow(z, 0.4e1) * mu2 * delta2 * delta2 + 0.24e2 * delta1 * delta1 * pow(z, 0.4e1) * mu2 * mu2 * delta2 - 0.14e2 * delta1 * pow(z, 0.5e1) * mu2 * pow(delta2, 0.3e1) - 0.12e2 * delta1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 * delta2 - 0.2e1 * delta1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) * delta2 - 0.4e1 * delta1 * pow(z, 0.4e1) * c * pow(mu2, 0.3e1) + 0.14e2 * delta1 * pow(z, 0.4e1) * c * pow(delta2, 0.3e1) + 0.20e2 * mu2 * z * pow(c, 0.3e1) * mu1 + 0.4e1 * mu2 * z * pow(c, 0.3e1) * delta1 - 0.30e2 * mu2 * z * c * c * mu1 * mu1 + 0.42e2 * mu2 * z * c * c * delta1 * delta1 - 0.30e2 * z * z * mu2 * mu2 * mu1 * c * c - 0.6e1 * z * z * c * c * mu2 * mu2 * delta1 + 0.42e2 * c * c * delta2 * delta2 * z * z * mu1 + 0.12e2 * c * c * delta2 * delta2 * z * z * delta1 + 0.66e2 * c * delta1 * delta1 * z * z * delta2 * delta2 + 0.20e2 * c * mu2 * z * pow(mu1, 0.3e1) + 0.52e2 * c * mu2 * z * pow(delta1, 0.3e1) + 0.30e2 * c * z * z * mu2 * mu2 * mu1 * mu1 - 0.42e2 * c * mu1 * mu1 * delta2 * delta2 * z * z - 0.42e2 * c * mu2 * mu2 * z * z * delta1 * delta1 - 0.4e1 * c * pow(mu1, 0.3e1) * delta2 * z - 0.4e1 * pow(c, 0.3e1) * delta2 * z * mu1 - 0.2e1 * pow(c, 0.3e1) * delta2 * z * delta1 + 0.6e1 * c * c * delta2 * z * mu1 * mu1 - 0.12e2 * c * c * delta2 * z * delta1 * delta1 - 0.4e1 * mu2 * z * z * delta2 * pow(c, 0.3e1) - 0.14e2 * c * pow(delta1, 0.3e1) * delta2 * z + 0.42e2 * c * c * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.6e1 * c * c * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.4e1 * c * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.14e2 * c * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.52e2 * c * mu2 * pow(z, 0.4e1) * pow(delta2, 0.3e1) - 0.42e2 * c * mu2 * mu2 * pow(z, 0.4e1) * delta2 * delta2 - 0.4e1 * c * pow(mu2, 0.3e1) * pow(z, 0.4e1) * delta2 + 0.20e2 * c * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.52e2 * c * mu1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.4e1 * mu2 * z * pow(mu1, 0.3e1) * delta1 + 0.42e2 * mu2 * z * mu1 * mu1 * delta1 * delta1 - 0.6e1 * z * z * mu2 * mu2 * mu1 * mu1 * delta1 + 0.12e2 * mu1 * mu1 * delta2 * delta2 * z * z * delta1 - 0.66e2 * mu1 * delta1 * delta1 * z * z * delta2 * delta2 - 0.52e2 * mu1 * mu2 * z * pow(delta1, 0.3e1) + 0.42e2 * mu1 * mu2 * mu2 * z * z * delta1 * delta1 + 0.2e1 * pow(mu1, 0.3e1) * delta2 * z * delta1 - 0.12e2 * mu1 * mu1 * delta2 * z * delta1 * delta1 + 0.4e1 * mu2 * z * z * delta2 * pow(mu1, 0.3e1) + 0.14e2 * mu1 * pow(delta1, 0.3e1) * delta2 * z + 0.42e2 * mu1 * mu1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.6e1 * mu1 * mu1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 - 0.4e1 * mu1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.14e2 * mu1 * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + 0.52e2 * mu1 * mu2 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.42e2 * mu1 * mu2 * mu2 * pow(z, 0.4e1) * delta2 * delta2 + 0.4e1 * mu1 * pow(mu2, 0.3e1) * pow(z, 0.4e1) * delta2 + 0.14e2 * mu2 * z * z * delta2 * pow(delta1, 0.3e1) - 0.66e2 * delta1 * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.12e2 * delta1 * delta1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.14e2 * delta1 * mu2 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.12e2 * delta1 * mu2 * mu2 * pow(z, 0.4e1) * delta2 * delta2 + 0.2e1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.4e1) * delta2 + 0.24e2 * mu1 * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.6e1 * mu1 * delta1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.19e2 * mu2 * pow(z, 0.5e1) * pow(delta2, 0.4e1) + 0.26e2 * mu2 * mu2 * pow(z, 0.5e1) * pow(delta2, 0.3e1) + 0.14e2 * pow(mu2, 0.3e1) * pow(z, 0.5e1) * delta2 * delta2 + pow(mu2, 0.4e1) * pow(z, 0.5e1) * delta2) * (-mu2 * z - delta2 * z + c - mu1 + mu1 * z + delta1 - delta1 * z) * pow(z, -0.3e1) * pow(delta1, -0.3e1) * pow(delta2, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.320e3;


		case 3:
			
				return -(-0.24e2 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * c * delta1 + 0.12e2 * mu1 * pow(z, 0.4e1) * delta1 * c * mu2 * delta2 + 0.12e2 * c * mu2 * z * z * delta2 * mu1 * delta1 - 0.84e2 * c * mu1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.12e2 * c * mu1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 - 0.24e2 * c * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.6e1 * c * delta1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.24e2 * mu1 * mu2 * z * z * delta2 * delta1 * delta1 - 0.6e1 * mu2 * z * z * delta2 * mu1 * mu1 * delta1 + 0.24e2 * mu1 * z * z * mu2 * c * c * delta1 + 0.252e3 * mu1 * z * z * mu2 * c * delta1 * delta1 - 0.12e2 * mu1 * pow(z, 0.3e1) * mu2 * c * c * delta1 - 0.252e3 * mu1 * pow(z, 0.3e1) * mu2 * c * delta1 * delta1 - 0.24e2 * mu1 * pow(z, 0.3e1) * c * mu2 * mu2 * delta1 + 0.48e2 * mu1 * pow(z, 0.3e1) * c * delta2 * delta2 * delta1 - 0.18e2 * mu1 * mu1 * z * z * c * delta2 * delta1 + 0.18e2 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * c * delta1 + 0.36e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * c * delta1 - 0.36e2 * mu1 * mu1 * z * z * mu2 * c * delta1 - 0.6e1 * mu1 * pow(z, 0.3e1) * delta1 * delta2 * c * c - 0.72e2 * mu1 * pow(z, 0.3e1) * delta1 * delta1 * delta2 * c + 0.12e2 * mu1 * z * z * c * c * delta2 * delta1 + 0.72e2 * mu1 * z * z * c * delta2 * delta1 * delta1 + 0.12e2 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * c * c - 0.72e2 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * delta1 * delta1 - 0.24e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * c + 0.18e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * delta1 - 0.6e1 * mu1 * mu1 * pow(z, 0.4e1) * delta2 * c * delta1 - 0.12e2 * mu1 * mu1 * pow(z, 0.4e1) * c * mu2 * delta1 - 0.18e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * delta2 + 0.12e2 * mu1 * mu1 * pow(z, 0.4e1) * c * mu2 * delta2 + 0.6e1 * mu1 * mu1 * pow(z, 0.5e1) * mu2 * delta1 * delta2 + 0.24e2 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * delta2 * c + 0.84e2 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * c * mu2 + 0.72e2 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * mu2 * delta2 - 0.24e2 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * mu2 * delta2 + 0.24e2 * mu1 * pow(z, 0.5e1) * delta1 * mu2 * delta2 * delta2 + 0.12e2 * mu1 * pow(z, 0.4e1) * delta1 * c * mu2 * mu2 - 0.6e1 * mu1 * pow(z, 0.5e1) * delta1 * mu2 * mu2 * delta2 - 0.24e2 * mu1 * pow(z, 0.4e1) * delta1 * c * delta2 * delta2 + 0.84e2 * mu1 * pow(z, 0.4e1) * c * mu2 * delta2 * delta2 - 0.12e2 * mu1 * pow(z, 0.4e1) * c * mu2 * mu2 * delta2 - 0.48e2 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * delta2 * delta2 + 0.12e2 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * mu2 * delta2 + 0.6e1 * delta1 * pow(z, 0.3e1) * mu2 * delta2 * c * c + 0.48e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * delta2 * c - 0.24e2 * delta1 * delta1 * pow(z, 0.4e1) * c * mu2 * delta2 + 0.24e2 * delta1 * pow(z, 0.4e1) * c * mu2 * delta2 * delta2 - 0.6e1 * delta1 * pow(z, 0.4e1) * c * mu2 * mu2 * delta2 + 0.12e2 * c * mu2 * z * mu1 * mu1 * delta1 - 0.84e2 * c * mu2 * z * mu1 * delta1 * delta1 + 0.12e2 * c * z * z * mu2 * mu2 * mu1 * delta1 - 0.24e2 * c * mu1 * delta2 * delta2 * z * z * delta1 - 0.6e1 * c * c * delta2 * z * mu1 * delta1 - 0.12e2 * mu2 * z * c * c * mu1 * delta1 + 0.6e1 * c * mu1 * mu1 * delta2 * z * delta1 - 0.24e2 * c * mu1 * delta2 * z * delta1 * delta1 + 0.12e2 * c * mu2 * z * z * delta2 * mu1 * mu1 - 0.24e2 * c * mu2 * z * z * delta2 * delta1 * delta1 - 0.12e2 * mu2 * z * z * delta2 * c * c * mu1 - 0.6e1 * mu2 * z * z * delta2 * c * c * delta1 - pow(mu1, 0.5e1) - 0.5e1 * pow(delta1, 0.5e1) + 0.5e1 * pow(mu1, 0.5e1) * z + 0.10e2 * pow(mu1, 0.5e1) * pow(z, 0.3e1) - 0.10e2 * pow(mu1, 0.5e1) * z * z + pow(mu1, 0.5e1) * pow(z, 0.5e1) - 0.5e1 * pow(mu1, 0.5e1) * pow(z, 0.4e1) + 0.25e2 * pow(delta1, 0.5e1) * z + 0.50e2 * pow(delta1, 0.5e1) * pow(z, 0.3e1) - 0.50e2 * pow(delta1, 0.5e1) * z * z - 0.25e2 * pow(delta1, 0.5e1) * pow(z, 0.4e1) + 0.5e1 * pow(delta1, 0.5e1) * pow(z, 0.5e1) - 0.10e2 * pow(mu1, 0.3e1) * c * c - 0.26e2 * pow(delta1, 0.3e1) * c * c - 0.5e1 * pow(c, 0.4e1) * mu1 - pow(c, 0.4e1) * delta1 + 0.5e1 * c * pow(mu1, 0.4e1) - 0.19e2 * c * pow(delta1, 0.4e1) + 0.10e2 * pow(c, 0.3e1) * mu1 * mu1 - 0.14e2 * pow(c, 0.3e1) * delta1 * delta1 - pow(mu1, 0.4e1) * delta1 - 0.26e2 * pow(delta1, 0.3e1) * mu1 * mu1 + 0.14e2 * pow(mu1, 0.3e1) * delta1 * delta1 + 0.19e2 * mu1 * pow(delta1, 0.4e1) - pow(mu2, 0.5e1) * pow(z, 0.5e1) - 0.5e1 * pow(delta2, 0.5e1) * pow(z, 0.5e1) - 0.208e3 * mu1 * z * pow(delta1, 0.3e1) * c - 0.8e1 * mu1 * z * pow(c, 0.3e1) * delta1 + 0.18e2 * mu1 * mu1 * z * c * c * delta1 - 0.16e2 * pow(mu1, 0.3e1) * z * c * delta1 + 0.168e3 * mu1 * mu1 * z * c * delta1 * delta1 - 0.126e3 * mu1 * z * c * c * delta1 * delta1 + 0.168e3 * mu1 * mu1 * pow(z, 0.3e1) * c * delta1 * delta1 + 0.6e1 * mu1 * mu1 * pow(z, 0.3e1) * c * c * delta1 - 0.16e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * c * delta1 - 0.18e2 * mu1 * mu1 * z * z * c * c * delta1 + 0.24e2 * pow(mu1, 0.3e1) * z * z * c * delta1 - 0.252e3 * mu1 * mu1 * z * z * c * delta1 * delta1 + 0.60e2 * mu1 * mu1 * z * z * mu2 * c * c - 0.60e2 * pow(mu1, 0.3e1) * z * z * mu2 * c + 0.16e2 * pow(mu1, 0.3e1) * z * z * mu2 * delta1 - 0.168e3 * mu1 * mu1 * z * z * mu2 * delta1 * delta1 - 0.30e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * c * c + 0.60e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * c - 0.24e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * delta1 + 0.252e3 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * delta1 * delta1 - 0.60e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * c + 0.18e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * delta1 + 0.84e2 * mu1 * mu1 * pow(z, 0.3e1) * c * delta2 * delta2 - 0.36e2 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * delta2 * delta1 + 0.198e3 * mu1 * pow(z, 0.3e1) * delta1 * delta1 * delta2 * delta2 - 0.208e3 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.3e1) * c - 0.42e2 * mu1 * pow(z, 0.3e1) * c * c * delta1 * delta1 + 0.4e1 * mu1 * z * z * pow(c, 0.3e1) * delta1 + 0.126e3 * mu1 * z * z * c * c * delta1 * delta1 + 0.312e3 * mu1 * z * z * c * pow(delta1, 0.3e1) - 0.20e2 * mu1 * z * z * mu2 * pow(c, 0.3e1) + 0.208e3 * mu1 * z * z * mu2 * pow(delta1, 0.3e1) - 0.312e3 * mu1 * pow(z, 0.3e1) * mu2 * pow(delta1, 0.3e1) + 0.30e2 * mu1 * pow(z, 0.3e1) * c * c * mu2 * mu2 - 0.42e2 * mu1 * pow(z, 0.3e1) * c * c * delta2 * delta2 - 0.126e3 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * delta1 * delta1 - 0.84e2 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.3e1) * delta2 - 0.4e1 * mu1 * z * z * pow(c, 0.3e1) * delta2 - 0.6e1 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * c * c + 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta2 * c - 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta2 * delta1 + 0.72e2 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * delta1 * delta1 + 0.12e2 * mu1 * mu1 * z * z * c * c * delta2 - 0.12e2 * pow(mu1, 0.3e1) * z * z * c * delta2 + 0.8e1 * pow(mu1, 0.3e1) * z * z * delta2 * delta1 - 0.48e2 * mu1 * mu1 * z * z * delta2 * delta1 * delta1 + 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * delta2 + 0.56e2 * mu1 * z * z * pow(delta1, 0.3e1) * delta2 + 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * c * delta1 - 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * mu2 * delta2 + 0.16e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * mu2 * delta1 + 0.8e1 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * delta2 * delta1 - 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * c * delta2 - 0.20e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * c * mu2 - 0.2e1 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * delta2 * delta1 + 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * mu2 * delta2 - 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * mu2 * delta1 + 0.36e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * delta2 * delta2 + 0.42e2 * mu1 * mu1 * pow(z, 0.5e1) * mu2 * delta2 * delta2 + 0.42e2 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * mu2 - 0.12e2 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * delta2 * delta2 + 0.12e2 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * delta2 + 0.30e2 * mu1 * mu1 * pow(z, 0.4e1) * c * mu2 * mu2 - 0.18e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * mu2 - 0.168e3 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * mu2 + 0.6e1 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * mu2 * mu2 - 0.6e1 * mu1 * mu1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 - 0.42e2 * mu1 * mu1 * pow(z, 0.4e1) * c * delta2 * delta2 - 0.48e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * delta2 - 0.42e2 * mu1 * mu1 * pow(z, 0.4e1) * c * delta1 * delta1 - 0.84e2 * mu1 * mu1 * pow(z, 0.4e1) * mu2 * delta2 * delta2 + 0.12e2 * mu1 * mu1 * pow(z, 0.4e1) * mu2 * mu2 * delta2 + 0.8e1 * mu1 * pow(z, 0.4e1) * delta1 * pow(mu2, 0.3e1) + 0.28e2 * mu1 * pow(z, 0.4e1) * delta1 * pow(delta2, 0.3e1) + 0.52e2 * mu1 * pow(z, 0.5e1) * mu2 * pow(delta2, 0.3e1) - 0.42e2 * mu1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 * delta2 + 0.4e1 * mu1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) * delta2 - 0.4e1 * mu1 * pow(z, 0.5e1) * delta1 * pow(mu2, 0.3e1) - 0.14e2 * mu1 * pow(z, 0.5e1) * delta1 * pow(delta2, 0.3e1) - 0.198e3 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * delta2 * delta2 - 0.52e2 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.3e1) * mu2 + 0.66e2 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * delta2 * delta2 - 0.14e2 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.3e1) * delta2 + 0.126e3 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * mu2 * mu2 + 0.208e3 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) * mu2 - 0.42e2 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * mu2 * mu2 + 0.56e2 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) * delta2 + 0.52e2 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) * c - 0.20e2 * mu1 * pow(z, 0.4e1) * c * pow(mu2, 0.3e1) - 0.52e2 * mu1 * pow(z, 0.4e1) * c * pow(delta2, 0.3e1) - 0.84e2 * delta1 * delta1 * z * z * mu2 * c * c - 0.156e3 * pow(delta1, 0.3e1) * z * z * mu2 * c + 0.42e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * c * c + 0.156e3 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * mu2 * c + 0.40e2 * pow(delta1, 0.3e1) * z * z * delta2 * delta2 + 0.19e2 * mu2 * z * pow(delta1, 0.4e1) - 0.26e2 * mu2 * mu2 * z * z * pow(delta1, 0.3e1) + 0.5e1 * pow(delta1, 0.4e1) * delta2 * z - delta1 * pow(mu2, 0.4e1) * pow(z, 0.4e1) + 0.5e1 * delta1 * pow(delta2, 0.4e1) * pow(z, 0.4e1) + 0.14e2 * delta1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.40e2 * delta1 * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.20e2 * pow(mu1, 0.4e1) * z * c + 0.5e1 * pow(mu1, 0.4e1) * z * delta1 + 0.130e3 * mu1 * mu1 * z * pow(delta1, 0.3e1) - 0.20e2 * mu1 * mu1 * z * pow(c, 0.3e1) - 0.70e2 * pow(mu1, 0.3e1) * z * delta1 * delta1 + 0.5e1 * mu1 * z * pow(c, 0.4e1) - 0.95e2 * mu1 * z * pow(delta1, 0.4e1) + 0.30e2 * pow(mu1, 0.3e1) * z * c * c - 0.190e3 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.4e1) + 0.190e3 * mu1 * z * z * pow(delta1, 0.4e1) + 0.10e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * c * c - 0.140e3 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta1 * delta1 - 0.20e2 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * c + 0.10e2 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * delta1 + 0.260e3 * mu1 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.3e1) + 0.10e2 * mu1 * mu1 * z * z * pow(c, 0.3e1) - 0.30e2 * pow(mu1, 0.3e1) * z * z * c * c + 0.30e2 * pow(mu1, 0.4e1) * z * z * c - 0.10e2 * pow(mu1, 0.4e1) * z * z * delta1 + 0.140e3 * pow(mu1, 0.3e1) * z * z * delta1 * delta1 - 0.260e3 * mu1 * mu1 * z * z * pow(delta1, 0.3e1) + 0.20e2 * pow(mu1, 0.4e1) * z * z * mu2 - 0.30e2 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * mu2 + 0.30e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * mu2 - 0.42e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta2 * delta2 - 0.6e1 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * delta2 + 0.4e1 * pow(mu1, 0.4e1) * z * z * delta2 + 0.95e2 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.4e1) - 0.19e2 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.4e1) + 0.5e1 * mu1 * pow(z, 0.5e1) * pow(mu2, 0.4e1) - 0.19e2 * mu1 * pow(z, 0.5e1) * pow(delta2, 0.4e1) - 0.10e2 * mu1 * mu1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) - 0.130e3 * mu1 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) + 0.26e2 * mu1 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.3e1) - 0.26e2 * mu1 * mu1 * pow(z, 0.5e1) * pow(delta2, 0.3e1) + 0.5e1 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * c - 0.5e1 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * delta1 + 0.4e1 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * delta2 + 0.20e2 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * mu2 - 0.30e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * mu2 * mu2 + 0.10e2 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * mu2 * mu2 - 0.5e1 * pow(mu1, 0.4e1) * pow(z, 0.5e1) * mu2 + pow(mu1, 0.4e1) * pow(z, 0.5e1) * delta1 - pow(mu1, 0.4e1) * pow(z, 0.5e1) * delta2 + 0.42e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * delta2 * delta2 - 0.14e2 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * delta2 * delta2 - 0.14e2 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * delta1 * delta1 + 0.70e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * delta1 * delta1 + 0.20e2 * mu1 * mu1 * pow(z, 0.4e1) * pow(mu2, 0.3e1) + 0.52e2 * mu1 * mu1 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.76e2 * pow(delta1, 0.4e1) * z * c + 0.28e2 * delta1 * delta1 * z * pow(c, 0.3e1) + delta1 * z * pow(c, 0.4e1) + 0.78e2 * pow(delta1, 0.3e1) * z * c * c - 0.120e3 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * delta2 * delta2 + 0.76e2 * pow(delta1, 0.4e1) * pow(z, 0.3e1) * c + 0.26e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * c * c - 0.14e2 * delta1 * delta1 * z * z * pow(c, 0.3e1) - 0.78e2 * pow(delta1, 0.3e1) * z * z * c * c - 0.114e3 * pow(delta1, 0.4e1) * z * z * c - 0.76e2 * pow(delta1, 0.4e1) * z * z * mu2 + 0.114e3 * pow(delta1, 0.4e1) * pow(z, 0.3e1) * mu2 + 0.78e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * mu2 * mu2 + 0.30e2 * pow(delta1, 0.4e1) * pow(z, 0.3e1) * delta2 - 0.20e2 * pow(delta1, 0.4e1) * z * z * delta2 + delta1 * pow(z, 0.5e1) * pow(mu2, 0.4e1) - 0.5e1 * delta1 * pow(z, 0.5e1) * pow(delta2, 0.4e1) - 0.28e2 * delta1 * delta1 * pow(z, 0.4e1) * pow(mu2, 0.3e1) - 0.80e2 * delta1 * delta1 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.14e2 * delta1 * delta1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) + 0.40e2 * delta1 * delta1 * pow(z, 0.5e1) * pow(delta2, 0.3e1) + 0.120e3 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * delta2 * delta2 + 0.19e2 * pow(delta1, 0.4e1) * pow(z, 0.5e1) * mu2 - 0.40e2 * pow(delta1, 0.3e1) * pow(z, 0.5e1) * delta2 * delta2 + 0.5e1 * pow(delta1, 0.4e1) * pow(z, 0.5e1) * delta2 - 0.78e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * mu2 * mu2 - 0.76e2 * pow(delta1, 0.4e1) * pow(z, 0.4e1) * mu2 + 0.26e2 * pow(delta1, 0.3e1) * pow(z, 0.5e1) * mu2 * mu2 - 0.20e2 * pow(delta1, 0.4e1) * pow(z, 0.4e1) * delta2 - 0.19e2 * pow(delta1, 0.4e1) * pow(z, 0.4e1) * c + 0.4e1 * c * pow(mu1, 0.3e1) * delta1 + 0.52e2 * c * pow(delta1, 0.3e1) * mu1 - 0.42e2 * c * mu1 * mu1 * delta1 * delta1 + 0.4e1 * pow(c, 0.3e1) * mu1 * delta1 - 0.6e1 * c * c * mu1 * mu1 * delta1 + 0.42e2 * c * c * delta1 * delta1 * mu1 - 0.5e1 * mu2 * z * pow(c, 0.4e1) + 0.10e2 * z * z * pow(c, 0.3e1) * mu2 * mu2 - 0.14e2 * pow(c, 0.3e1) * delta2 * delta2 * z * z - pow(c, 0.4e1) * delta2 * z + 0.5e1 * c * pow(mu2, 0.4e1) * pow(z, 0.4e1) - 0.19e2 * c * pow(delta2, 0.4e1) * pow(z, 0.4e1) - 0.10e2 * c * c * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.26e2 * c * c * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.5e1 * mu2 * z * pow(mu1, 0.4e1) - 0.10e2 * z * z * mu2 * mu2 * pow(mu1, 0.3e1) + 0.14e2 * pow(mu1, 0.3e1) * delta2 * delta2 * z * z - pow(mu1, 0.4e1) * delta2 * z - 0.5e1 * mu1 * pow(mu2, 0.4e1) * pow(z, 0.4e1) + 0.19e2 * mu1 * pow(delta2, 0.4e1) * pow(z, 0.4e1) - 0.10e2 * mu1 * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.26e2 * mu1 * mu1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + pow(c, 0.5e1) + 0.84e2 * delta1 * delta1 * pow(z, 0.3e1) * c * mu2 * mu2 - 0.132e3 * delta1 * delta1 * pow(z, 0.3e1) * c * delta2 * delta2 - 0.4e1 * delta1 * z * z * mu2 * pow(c, 0.3e1) + 0.6e1 * delta1 * pow(z, 0.3e1) * c * c * mu2 * mu2 - 0.12e2 * delta1 * pow(z, 0.3e1) * c * c * delta2 * delta2 - 0.2e1 * delta1 * z * z * pow(c, 0.3e1) * delta2 + 0.12e2 * delta1 * delta1 * pow(z, 0.3e1) * delta2 * c * c + 0.42e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * delta2 * c - 0.24e2 * delta1 * delta1 * z * z * c * c * delta2 - 0.42e2 * pow(delta1, 0.3e1) * z * z * c * delta2 + 0.42e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * mu2 * delta2 - 0.14e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * delta2 * c - 0.52e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * c * mu2 - 0.42e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * mu2 * delta2 + 0.14e2 * pow(delta1, 0.3e1) * pow(z, 0.5e1) * mu2 * delta2 - 0.66e2 * delta1 * delta1 * pow(z, 0.5e1) * mu2 * delta2 * delta2 - 0.42e2 * delta1 * delta1 * pow(z, 0.4e1) * c * mu2 * mu2 + 0.12e2 * delta1 * delta1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 + 0.66e2 * delta1 * delta1 * pow(z, 0.4e1) * c * delta2 * delta2 + 0.132e3 * delta1 * delta1 * pow(z, 0.4e1) * mu2 * delta2 * delta2 - 0.24e2 * delta1 * delta1 * pow(z, 0.4e1) * mu2 * mu2 * delta2 + 0.14e2 * delta1 * pow(z, 0.5e1) * mu2 * pow(delta2, 0.3e1) - 0.12e2 * delta1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 * delta2 + 0.2e1 * delta1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) * delta2 - 0.4e1 * delta1 * pow(z, 0.4e1) * c * pow(mu2, 0.3e1) - 0.14e2 * delta1 * pow(z, 0.4e1) * c * pow(delta2, 0.3e1) + 0.20e2 * mu2 * z * pow(c, 0.3e1) * mu1 + 0.4e1 * mu2 * z * pow(c, 0.3e1) * delta1 - 0.30e2 * mu2 * z * c * c * mu1 * mu1 + 0.42e2 * mu2 * z * c * c * delta1 * delta1 - 0.30e2 * z * z * mu2 * mu2 * mu1 * c * c - 0.6e1 * z * z * c * c * mu2 * mu2 * delta1 + 0.42e2 * c * c * delta2 * delta2 * z * z * mu1 + 0.12e2 * c * c * delta2 * delta2 * z * z * delta1 + 0.66e2 * c * delta1 * delta1 * z * z * delta2 * delta2 + 0.20e2 * c * mu2 * z * pow(mu1, 0.3e1) + 0.52e2 * c * mu2 * z * pow(delta1, 0.3e1) + 0.30e2 * c * z * z * mu2 * mu2 * mu1 * mu1 - 0.42e2 * c * mu1 * mu1 * delta2 * delta2 * z * z - 0.42e2 * c * mu2 * mu2 * z * z * delta1 * delta1 + 0.4e1 * c * pow(mu1, 0.3e1) * delta2 * z + 0.4e1 * pow(c, 0.3e1) * delta2 * z * mu1 + 0.2e1 * pow(c, 0.3e1) * delta2 * z * delta1 - 0.6e1 * c * c * delta2 * z * mu1 * mu1 + 0.12e2 * c * c * delta2 * z * delta1 * delta1 + 0.4e1 * mu2 * z * z * delta2 * pow(c, 0.3e1) + 0.14e2 * c * pow(delta1, 0.3e1) * delta2 * z + 0.42e2 * c * c * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.6e1 * c * c * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.4e1 * c * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.14e2 * c * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + 0.52e2 * c * mu2 * pow(z, 0.4e1) * pow(delta2, 0.3e1) - 0.42e2 * c * mu2 * mu2 * pow(z, 0.4e1) * delta2 * delta2 + 0.4e1 * c * pow(mu2, 0.3e1) * pow(z, 0.4e1) * delta2 + 0.20e2 * c * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.52e2 * c * mu1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.4e1 * mu2 * z * pow(mu1, 0.3e1) * delta1 + 0.42e2 * mu2 * z * mu1 * mu1 * delta1 * delta1 - 0.6e1 * z * z * mu2 * mu2 * mu1 * mu1 * delta1 + 0.12e2 * mu1 * mu1 * delta2 * delta2 * z * z * delta1 - 0.66e2 * mu1 * delta1 * delta1 * z * z * delta2 * delta2 - 0.52e2 * mu1 * mu2 * z * pow(delta1, 0.3e1) + 0.42e2 * mu1 * mu2 * mu2 * z * z * delta1 * delta1 - 0.2e1 * pow(mu1, 0.3e1) * delta2 * z * delta1 + 0.12e2 * mu1 * mu1 * delta2 * z * delta1 * delta1 - 0.4e1 * mu2 * z * z * delta2 * pow(mu1, 0.3e1) - 0.14e2 * mu1 * pow(delta1, 0.3e1) * delta2 * z + 0.42e2 * mu1 * mu1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.6e1 * mu1 * mu1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 - 0.4e1 * mu1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.14e2 * mu1 * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.52e2 * mu1 * mu2 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.42e2 * mu1 * mu2 * mu2 * pow(z, 0.4e1) * delta2 * delta2 - 0.4e1 * mu1 * pow(mu2, 0.3e1) * pow(z, 0.4e1) * delta2 - 0.14e2 * mu2 * z * z * delta2 * pow(delta1, 0.3e1) - 0.66e2 * delta1 * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.12e2 * delta1 * delta1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 - 0.14e2 * delta1 * mu2 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.12e2 * delta1 * mu2 * mu2 * pow(z, 0.4e1) * delta2 * delta2 - 0.2e1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.4e1) * delta2 + 0.24e2 * mu1 * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.6e1 * mu1 * delta1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.19e2 * mu2 * pow(z, 0.5e1) * pow(delta2, 0.4e1) - 0.26e2 * mu2 * mu2 * pow(z, 0.5e1) * pow(delta2, 0.3e1) + 0.14e2 * pow(mu2, 0.3e1) * pow(z, 0.5e1) * delta2 * delta2 - pow(mu2, 0.4e1) * pow(z, 0.5e1) * delta2) * (c - mu1 + delta1 - mu2 * z + mu1 * z - delta1 * z + delta2 * z) * pow(z, -0.3e1) * pow(delta1, -0.3e1) * pow(delta2, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.320e3;


		case 4:
			
				return (0.24e2 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * c * delta1 - 0.12e2 * mu1 * pow(z, 0.4e1) * delta1 * c * mu2 * delta2 - 0.12e2 * c * mu2 * z * z * delta2 * mu1 * delta1 - 0.84e2 * c * mu1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.12e2 * c * mu1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.24e2 * c * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.6e1 * c * delta1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.24e2 * mu1 * mu2 * z * z * delta2 * delta1 * delta1 + 0.6e1 * mu2 * z * z * delta2 * mu1 * mu1 * delta1 - 0.24e2 * mu1 * z * z * mu2 * c * c * delta1 + 0.252e3 * mu1 * z * z * mu2 * c * delta1 * delta1 + 0.12e2 * mu1 * pow(z, 0.3e1) * mu2 * c * c * delta1 - 0.252e3 * mu1 * pow(z, 0.3e1) * mu2 * c * delta1 * delta1 + 0.24e2 * mu1 * pow(z, 0.3e1) * c * mu2 * mu2 * delta1 - 0.48e2 * mu1 * pow(z, 0.3e1) * c * delta2 * delta2 * delta1 + 0.18e2 * mu1 * mu1 * z * z * c * delta2 * delta1 - 0.18e2 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * c * delta1 - 0.36e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * c * delta1 + 0.36e2 * mu1 * mu1 * z * z * mu2 * c * delta1 + 0.6e1 * mu1 * pow(z, 0.3e1) * delta1 * delta2 * c * c - 0.72e2 * mu1 * pow(z, 0.3e1) * delta1 * delta1 * delta2 * c - 0.12e2 * mu1 * z * z * c * c * delta2 * delta1 + 0.72e2 * mu1 * z * z * c * delta2 * delta1 * delta1 + 0.12e2 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * c * c - 0.72e2 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * delta1 * delta1 - 0.24e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * c - 0.18e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * delta2 * delta1 + 0.6e1 * mu1 * mu1 * pow(z, 0.4e1) * delta2 * c * delta1 + 0.12e2 * mu1 * mu1 * pow(z, 0.4e1) * c * mu2 * delta1 + 0.18e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * delta2 + 0.12e2 * mu1 * mu1 * pow(z, 0.4e1) * c * mu2 * delta2 - 0.6e1 * mu1 * mu1 * pow(z, 0.5e1) * mu2 * delta1 * delta2 + 0.24e2 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * delta2 * c + 0.84e2 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * c * mu2 + 0.72e2 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * mu2 * delta2 - 0.24e2 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * mu2 * delta2 - 0.24e2 * mu1 * pow(z, 0.5e1) * delta1 * mu2 * delta2 * delta2 - 0.12e2 * mu1 * pow(z, 0.4e1) * delta1 * c * mu2 * mu2 + 0.6e1 * mu1 * pow(z, 0.5e1) * delta1 * mu2 * mu2 * delta2 + 0.24e2 * mu1 * pow(z, 0.4e1) * delta1 * c * delta2 * delta2 + 0.84e2 * mu1 * pow(z, 0.4e1) * c * mu2 * delta2 * delta2 - 0.12e2 * mu1 * pow(z, 0.4e1) * c * mu2 * mu2 * delta2 + 0.48e2 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * delta2 * delta2 - 0.12e2 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * mu2 * delta2 - 0.6e1 * delta1 * pow(z, 0.3e1) * mu2 * delta2 * c * c + 0.48e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * delta2 * c - 0.24e2 * delta1 * delta1 * pow(z, 0.4e1) * c * mu2 * delta2 - 0.24e2 * delta1 * pow(z, 0.4e1) * c * mu2 * delta2 * delta2 + 0.6e1 * delta1 * pow(z, 0.4e1) * c * mu2 * mu2 * delta2 - 0.12e2 * c * mu2 * z * mu1 * mu1 * delta1 - 0.84e2 * c * mu2 * z * mu1 * delta1 * delta1 - 0.12e2 * c * z * z * mu2 * mu2 * mu1 * delta1 + 0.24e2 * c * mu1 * delta2 * delta2 * z * z * delta1 + 0.6e1 * c * c * delta2 * z * mu1 * delta1 + 0.12e2 * mu2 * z * c * c * mu1 * delta1 - 0.6e1 * c * mu1 * mu1 * delta2 * z * delta1 - 0.24e2 * c * mu1 * delta2 * z * delta1 * delta1 + 0.12e2 * c * mu2 * z * z * delta2 * mu1 * mu1 - 0.24e2 * c * mu2 * z * z * delta2 * delta1 * delta1 - 0.12e2 * mu2 * z * z * delta2 * c * c * mu1 + 0.6e1 * mu2 * z * z * delta2 * c * c * delta1 - pow(mu1, 0.5e1) + 0.5e1 * pow(delta1, 0.5e1) + 0.5e1 * pow(mu1, 0.5e1) * z + 0.10e2 * pow(mu1, 0.5e1) * pow(z, 0.3e1) - 0.10e2 * pow(mu1, 0.5e1) * z * z + pow(mu1, 0.5e1) * pow(z, 0.5e1) - 0.5e1 * pow(mu1, 0.5e1) * pow(z, 0.4e1) - 0.25e2 * pow(delta1, 0.5e1) * z - 0.50e2 * pow(delta1, 0.5e1) * pow(z, 0.3e1) + 0.50e2 * pow(delta1, 0.5e1) * z * z + 0.25e2 * pow(delta1, 0.5e1) * pow(z, 0.4e1) - 0.5e1 * pow(delta1, 0.5e1) * pow(z, 0.5e1) - 0.10e2 * pow(mu1, 0.3e1) * c * c + 0.26e2 * pow(delta1, 0.3e1) * c * c - 0.5e1 * pow(c, 0.4e1) * mu1 + pow(c, 0.4e1) * delta1 + 0.5e1 * c * pow(mu1, 0.4e1) - 0.19e2 * c * pow(delta1, 0.4e1) + 0.10e2 * pow(c, 0.3e1) * mu1 * mu1 - 0.14e2 * pow(c, 0.3e1) * delta1 * delta1 + pow(mu1, 0.4e1) * delta1 + 0.26e2 * pow(delta1, 0.3e1) * mu1 * mu1 + 0.14e2 * pow(mu1, 0.3e1) * delta1 * delta1 + 0.19e2 * mu1 * pow(delta1, 0.4e1) - pow(mu2, 0.5e1) * pow(z, 0.5e1) - 0.5e1 * pow(delta2, 0.5e1) * pow(z, 0.5e1) + 0.208e3 * mu1 * z * pow(delta1, 0.3e1) * c + 0.8e1 * mu1 * z * pow(c, 0.3e1) * delta1 - 0.18e2 * mu1 * mu1 * z * c * c * delta1 + 0.16e2 * pow(mu1, 0.3e1) * z * c * delta1 + 0.168e3 * mu1 * mu1 * z * c * delta1 * delta1 - 0.126e3 * mu1 * z * c * c * delta1 * delta1 + 0.168e3 * mu1 * mu1 * pow(z, 0.3e1) * c * delta1 * delta1 - 0.6e1 * mu1 * mu1 * pow(z, 0.3e1) * c * c * delta1 + 0.16e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * c * delta1 + 0.18e2 * mu1 * mu1 * z * z * c * c * delta1 - 0.24e2 * pow(mu1, 0.3e1) * z * z * c * delta1 - 0.252e3 * mu1 * mu1 * z * z * c * delta1 * delta1 + 0.60e2 * mu1 * mu1 * z * z * mu2 * c * c - 0.60e2 * pow(mu1, 0.3e1) * z * z * mu2 * c - 0.16e2 * pow(mu1, 0.3e1) * z * z * mu2 * delta1 - 0.168e3 * mu1 * mu1 * z * z * mu2 * delta1 * delta1 - 0.30e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * c * c + 0.60e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * c + 0.24e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * delta1 + 0.252e3 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * delta1 * delta1 - 0.60e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * c - 0.18e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * delta1 + 0.84e2 * mu1 * mu1 * pow(z, 0.3e1) * c * delta2 * delta2 + 0.36e2 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * delta2 * delta1 + 0.198e3 * mu1 * pow(z, 0.3e1) * delta1 * delta1 * delta2 * delta2 + 0.208e3 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.3e1) * c - 0.42e2 * mu1 * pow(z, 0.3e1) * c * c * delta1 * delta1 - 0.4e1 * mu1 * z * z * pow(c, 0.3e1) * delta1 + 0.126e3 * mu1 * z * z * c * c * delta1 * delta1 - 0.312e3 * mu1 * z * z * c * pow(delta1, 0.3e1) - 0.20e2 * mu1 * z * z * mu2 * pow(c, 0.3e1) - 0.208e3 * mu1 * z * z * mu2 * pow(delta1, 0.3e1) + 0.312e3 * mu1 * pow(z, 0.3e1) * mu2 * pow(delta1, 0.3e1) + 0.30e2 * mu1 * pow(z, 0.3e1) * c * c * mu2 * mu2 - 0.42e2 * mu1 * pow(z, 0.3e1) * c * c * delta2 * delta2 - 0.126e3 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * delta1 * delta1 + 0.84e2 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.3e1) * delta2 - 0.4e1 * mu1 * z * z * pow(c, 0.3e1) * delta2 - 0.6e1 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * c * c + 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta2 * c + 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta2 * delta1 + 0.72e2 * mu1 * mu1 * pow(z, 0.3e1) * delta2 * delta1 * delta1 + 0.12e2 * mu1 * mu1 * z * z * c * c * delta2 - 0.12e2 * pow(mu1, 0.3e1) * z * z * c * delta2 - 0.8e1 * pow(mu1, 0.3e1) * z * z * delta2 * delta1 - 0.48e2 * mu1 * mu1 * z * z * delta2 * delta1 * delta1 + 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * delta2 - 0.56e2 * mu1 * z * z * pow(delta1, 0.3e1) * delta2 - 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * c * delta1 - 0.12e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * mu2 * delta2 - 0.16e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * mu2 * delta1 - 0.8e1 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * delta2 * delta1 - 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * c * delta2 - 0.20e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * c * mu2 + 0.2e1 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * delta2 * delta1 + 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * mu2 * delta2 + 0.4e1 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * mu2 * delta1 - 0.36e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * delta2 * delta2 + 0.42e2 * mu1 * mu1 * pow(z, 0.5e1) * mu2 * delta2 * delta2 + 0.42e2 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * mu2 + 0.12e2 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * delta2 * delta2 + 0.12e2 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * delta2 + 0.30e2 * mu1 * mu1 * pow(z, 0.4e1) * c * mu2 * mu2 + 0.18e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * mu2 * mu2 - 0.168e3 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * mu2 - 0.6e1 * mu1 * mu1 * pow(z, 0.5e1) * delta1 * mu2 * mu2 - 0.6e1 * mu1 * mu1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 - 0.42e2 * mu1 * mu1 * pow(z, 0.4e1) * c * delta2 * delta2 - 0.48e2 * mu1 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * delta2 - 0.42e2 * mu1 * mu1 * pow(z, 0.4e1) * c * delta1 * delta1 - 0.84e2 * mu1 * mu1 * pow(z, 0.4e1) * mu2 * delta2 * delta2 + 0.12e2 * mu1 * mu1 * pow(z, 0.4e1) * mu2 * mu2 * delta2 - 0.8e1 * mu1 * pow(z, 0.4e1) * delta1 * pow(mu2, 0.3e1) - 0.28e2 * mu1 * pow(z, 0.4e1) * delta1 * pow(delta2, 0.3e1) + 0.52e2 * mu1 * pow(z, 0.5e1) * mu2 * pow(delta2, 0.3e1) - 0.42e2 * mu1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 * delta2 + 0.4e1 * mu1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) * delta2 + 0.4e1 * mu1 * pow(z, 0.5e1) * delta1 * pow(mu2, 0.3e1) + 0.14e2 * mu1 * pow(z, 0.5e1) * delta1 * pow(delta2, 0.3e1) - 0.198e3 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * delta2 * delta2 + 0.52e2 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.3e1) * mu2 + 0.66e2 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * delta2 * delta2 + 0.14e2 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.3e1) * delta2 + 0.126e3 * mu1 * pow(z, 0.4e1) * delta1 * delta1 * mu2 * mu2 - 0.208e3 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) * mu2 - 0.42e2 * mu1 * pow(z, 0.5e1) * delta1 * delta1 * mu2 * mu2 - 0.56e2 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) * delta2 - 0.52e2 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) * c - 0.20e2 * mu1 * pow(z, 0.4e1) * c * pow(mu2, 0.3e1) - 0.52e2 * mu1 * pow(z, 0.4e1) * c * pow(delta2, 0.3e1) - 0.84e2 * delta1 * delta1 * z * z * mu2 * c * c + 0.156e3 * pow(delta1, 0.3e1) * z * z * mu2 * c + 0.42e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * c * c - 0.156e3 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * mu2 * c - 0.40e2 * pow(delta1, 0.3e1) * z * z * delta2 * delta2 + 0.19e2 * mu2 * z * pow(delta1, 0.4e1) + 0.26e2 * mu2 * mu2 * z * z * pow(delta1, 0.3e1) + 0.5e1 * pow(delta1, 0.4e1) * delta2 * z + delta1 * pow(mu2, 0.4e1) * pow(z, 0.4e1) - 0.5e1 * delta1 * pow(delta2, 0.4e1) * pow(z, 0.4e1) + 0.14e2 * delta1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.40e2 * delta1 * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.20e2 * pow(mu1, 0.4e1) * z * c - 0.5e1 * pow(mu1, 0.4e1) * z * delta1 - 0.130e3 * mu1 * mu1 * z * pow(delta1, 0.3e1) - 0.20e2 * mu1 * mu1 * z * pow(c, 0.3e1) - 0.70e2 * pow(mu1, 0.3e1) * z * delta1 * delta1 + 0.5e1 * mu1 * z * pow(c, 0.4e1) - 0.95e2 * mu1 * z * pow(delta1, 0.4e1) + 0.30e2 * pow(mu1, 0.3e1) * z * c * c - 0.190e3 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.4e1) + 0.190e3 * mu1 * z * z * pow(delta1, 0.4e1) + 0.10e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * c * c - 0.140e3 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta1 * delta1 - 0.20e2 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * c - 0.10e2 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * delta1 - 0.260e3 * mu1 * mu1 * pow(z, 0.3e1) * pow(delta1, 0.3e1) + 0.10e2 * mu1 * mu1 * z * z * pow(c, 0.3e1) - 0.30e2 * pow(mu1, 0.3e1) * z * z * c * c + 0.30e2 * pow(mu1, 0.4e1) * z * z * c + 0.10e2 * pow(mu1, 0.4e1) * z * z * delta1 + 0.140e3 * pow(mu1, 0.3e1) * z * z * delta1 * delta1 + 0.260e3 * mu1 * mu1 * z * z * pow(delta1, 0.3e1) + 0.20e2 * pow(mu1, 0.4e1) * z * z * mu2 - 0.30e2 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * mu2 + 0.30e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * mu2 * mu2 - 0.42e2 * pow(mu1, 0.3e1) * pow(z, 0.3e1) * delta2 * delta2 - 0.6e1 * pow(mu1, 0.4e1) * pow(z, 0.3e1) * delta2 + 0.4e1 * pow(mu1, 0.4e1) * z * z * delta2 + 0.95e2 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.4e1) - 0.19e2 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.4e1) + 0.5e1 * mu1 * pow(z, 0.5e1) * pow(mu2, 0.4e1) - 0.19e2 * mu1 * pow(z, 0.5e1) * pow(delta2, 0.4e1) - 0.10e2 * mu1 * mu1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) + 0.130e3 * mu1 * mu1 * pow(z, 0.4e1) * pow(delta1, 0.3e1) - 0.26e2 * mu1 * mu1 * pow(z, 0.5e1) * pow(delta1, 0.3e1) - 0.26e2 * mu1 * mu1 * pow(z, 0.5e1) * pow(delta2, 0.3e1) + 0.5e1 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * c + 0.5e1 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * delta1 + 0.4e1 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * delta2 + 0.20e2 * pow(mu1, 0.4e1) * pow(z, 0.4e1) * mu2 - 0.30e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * mu2 * mu2 + 0.10e2 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * mu2 * mu2 - 0.5e1 * pow(mu1, 0.4e1) * pow(z, 0.5e1) * mu2 - pow(mu1, 0.4e1) * pow(z, 0.5e1) * delta1 - pow(mu1, 0.4e1) * pow(z, 0.5e1) * delta2 + 0.42e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * delta2 * delta2 - 0.14e2 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * delta2 * delta2 - 0.14e2 * pow(mu1, 0.3e1) * pow(z, 0.5e1) * delta1 * delta1 + 0.70e2 * pow(mu1, 0.3e1) * pow(z, 0.4e1) * delta1 * delta1 + 0.20e2 * mu1 * mu1 * pow(z, 0.4e1) * pow(mu2, 0.3e1) + 0.52e2 * mu1 * mu1 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.76e2 * pow(delta1, 0.4e1) * z * c + 0.28e2 * delta1 * delta1 * z * pow(c, 0.3e1) - delta1 * z * pow(c, 0.4e1) - 0.78e2 * pow(delta1, 0.3e1) * z * c * c + 0.120e3 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * delta2 * delta2 + 0.76e2 * pow(delta1, 0.4e1) * pow(z, 0.3e1) * c - 0.26e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * c * c - 0.14e2 * delta1 * delta1 * z * z * pow(c, 0.3e1) + 0.78e2 * pow(delta1, 0.3e1) * z * z * c * c - 0.114e3 * pow(delta1, 0.4e1) * z * z * c - 0.76e2 * pow(delta1, 0.4e1) * z * z * mu2 + 0.114e3 * pow(delta1, 0.4e1) * pow(z, 0.3e1) * mu2 - 0.78e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * mu2 * mu2 + 0.30e2 * pow(delta1, 0.4e1) * pow(z, 0.3e1) * delta2 - 0.20e2 * pow(delta1, 0.4e1) * z * z * delta2 - delta1 * pow(z, 0.5e1) * pow(mu2, 0.4e1) + 0.5e1 * delta1 * pow(z, 0.5e1) * pow(delta2, 0.4e1) - 0.28e2 * delta1 * delta1 * pow(z, 0.4e1) * pow(mu2, 0.3e1) - 0.80e2 * delta1 * delta1 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.14e2 * delta1 * delta1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) + 0.40e2 * delta1 * delta1 * pow(z, 0.5e1) * pow(delta2, 0.3e1) - 0.120e3 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * delta2 * delta2 + 0.19e2 * pow(delta1, 0.4e1) * pow(z, 0.5e1) * mu2 + 0.40e2 * pow(delta1, 0.3e1) * pow(z, 0.5e1) * delta2 * delta2 + 0.5e1 * pow(delta1, 0.4e1) * pow(z, 0.5e1) * delta2 + 0.78e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * mu2 * mu2 - 0.76e2 * pow(delta1, 0.4e1) * pow(z, 0.4e1) * mu2 - 0.26e2 * pow(delta1, 0.3e1) * pow(z, 0.5e1) * mu2 * mu2 - 0.20e2 * pow(delta1, 0.4e1) * pow(z, 0.4e1) * delta2 - 0.19e2 * pow(delta1, 0.4e1) * pow(z, 0.4e1) * c - 0.4e1 * c * pow(mu1, 0.3e1) * delta1 - 0.52e2 * c * pow(delta1, 0.3e1) * mu1 - 0.42e2 * c * mu1 * mu1 * delta1 * delta1 - 0.4e1 * pow(c, 0.3e1) * mu1 * delta1 + 0.6e1 * c * c * mu1 * mu1 * delta1 + 0.42e2 * c * c * delta1 * delta1 * mu1 - 0.5e1 * mu2 * z * pow(c, 0.4e1) + 0.10e2 * z * z * pow(c, 0.3e1) * mu2 * mu2 - 0.14e2 * pow(c, 0.3e1) * delta2 * delta2 * z * z - pow(c, 0.4e1) * delta2 * z + 0.5e1 * c * pow(mu2, 0.4e1) * pow(z, 0.4e1) - 0.19e2 * c * pow(delta2, 0.4e1) * pow(z, 0.4e1) - 0.10e2 * c * c * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.26e2 * c * c * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.5e1 * mu2 * z * pow(mu1, 0.4e1) - 0.10e2 * z * z * mu2 * mu2 * pow(mu1, 0.3e1) + 0.14e2 * pow(mu1, 0.3e1) * delta2 * delta2 * z * z - pow(mu1, 0.4e1) * delta2 * z - 0.5e1 * mu1 * pow(mu2, 0.4e1) * pow(z, 0.4e1) + 0.19e2 * mu1 * pow(delta2, 0.4e1) * pow(z, 0.4e1) - 0.10e2 * mu1 * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.26e2 * mu1 * mu1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + pow(c, 0.5e1) + 0.84e2 * delta1 * delta1 * pow(z, 0.3e1) * c * mu2 * mu2 - 0.132e3 * delta1 * delta1 * pow(z, 0.3e1) * c * delta2 * delta2 + 0.4e1 * delta1 * z * z * mu2 * pow(c, 0.3e1) - 0.6e1 * delta1 * pow(z, 0.3e1) * c * c * mu2 * mu2 + 0.12e2 * delta1 * pow(z, 0.3e1) * c * c * delta2 * delta2 + 0.2e1 * delta1 * z * z * pow(c, 0.3e1) * delta2 + 0.12e2 * delta1 * delta1 * pow(z, 0.3e1) * delta2 * c * c - 0.42e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * delta2 * c - 0.24e2 * delta1 * delta1 * z * z * c * c * delta2 + 0.42e2 * pow(delta1, 0.3e1) * z * z * c * delta2 - 0.42e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) * mu2 * delta2 + 0.14e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * delta2 * c + 0.52e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * c * mu2 + 0.42e2 * pow(delta1, 0.3e1) * pow(z, 0.4e1) * mu2 * delta2 - 0.14e2 * pow(delta1, 0.3e1) * pow(z, 0.5e1) * mu2 * delta2 - 0.66e2 * delta1 * delta1 * pow(z, 0.5e1) * mu2 * delta2 * delta2 - 0.42e2 * delta1 * delta1 * pow(z, 0.4e1) * c * mu2 * mu2 + 0.12e2 * delta1 * delta1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 + 0.66e2 * delta1 * delta1 * pow(z, 0.4e1) * c * delta2 * delta2 + 0.132e3 * delta1 * delta1 * pow(z, 0.4e1) * mu2 * delta2 * delta2 - 0.24e2 * delta1 * delta1 * pow(z, 0.4e1) * mu2 * mu2 * delta2 - 0.14e2 * delta1 * pow(z, 0.5e1) * mu2 * pow(delta2, 0.3e1) + 0.12e2 * delta1 * pow(z, 0.5e1) * mu2 * mu2 * delta2 * delta2 - 0.2e1 * delta1 * pow(z, 0.5e1) * pow(mu2, 0.3e1) * delta2 + 0.4e1 * delta1 * pow(z, 0.4e1) * c * pow(mu2, 0.3e1) + 0.14e2 * delta1 * pow(z, 0.4e1) * c * pow(delta2, 0.3e1) + 0.20e2 * mu2 * z * pow(c, 0.3e1) * mu1 - 0.4e1 * mu2 * z * pow(c, 0.3e1) * delta1 - 0.30e2 * mu2 * z * c * c * mu1 * mu1 + 0.42e2 * mu2 * z * c * c * delta1 * delta1 - 0.30e2 * z * z * mu2 * mu2 * mu1 * c * c + 0.6e1 * z * z * c * c * mu2 * mu2 * delta1 + 0.42e2 * c * c * delta2 * delta2 * z * z * mu1 - 0.12e2 * c * c * delta2 * delta2 * z * z * delta1 + 0.66e2 * c * delta1 * delta1 * z * z * delta2 * delta2 + 0.20e2 * c * mu2 * z * pow(mu1, 0.3e1) - 0.52e2 * c * mu2 * z * pow(delta1, 0.3e1) + 0.30e2 * c * z * z * mu2 * mu2 * mu1 * mu1 - 0.42e2 * c * mu1 * mu1 * delta2 * delta2 * z * z - 0.42e2 * c * mu2 * mu2 * z * z * delta1 * delta1 + 0.4e1 * c * pow(mu1, 0.3e1) * delta2 * z + 0.4e1 * pow(c, 0.3e1) * delta2 * z * mu1 - 0.2e1 * pow(c, 0.3e1) * delta2 * z * delta1 - 0.6e1 * c * c * delta2 * z * mu1 * mu1 + 0.12e2 * c * c * delta2 * z * delta1 * delta1 + 0.4e1 * mu2 * z * z * delta2 * pow(c, 0.3e1) - 0.14e2 * c * pow(delta1, 0.3e1) * delta2 * z + 0.42e2 * c * c * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.6e1 * c * c * mu2 * mu2 * pow(z, 0.3e1) * delta2 - 0.4e1 * c * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.14e2 * c * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + 0.52e2 * c * mu2 * pow(z, 0.4e1) * pow(delta2, 0.3e1) - 0.42e2 * c * mu2 * mu2 * pow(z, 0.4e1) * delta2 * delta2 + 0.4e1 * c * pow(mu2, 0.3e1) * pow(z, 0.4e1) * delta2 + 0.20e2 * c * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.52e2 * c * mu1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + 0.4e1 * mu2 * z * pow(mu1, 0.3e1) * delta1 + 0.42e2 * mu2 * z * mu1 * mu1 * delta1 * delta1 + 0.6e1 * z * z * mu2 * mu2 * mu1 * mu1 * delta1 - 0.12e2 * mu1 * mu1 * delta2 * delta2 * z * z * delta1 - 0.66e2 * mu1 * delta1 * delta1 * z * z * delta2 * delta2 + 0.52e2 * mu1 * mu2 * z * pow(delta1, 0.3e1) + 0.42e2 * mu1 * mu2 * mu2 * z * z * delta1 * delta1 + 0.2e1 * pow(mu1, 0.3e1) * delta2 * z * delta1 + 0.12e2 * mu1 * mu1 * delta2 * z * delta1 * delta1 - 0.4e1 * mu2 * z * z * delta2 * pow(mu1, 0.3e1) + 0.14e2 * mu1 * pow(delta1, 0.3e1) * delta2 * z + 0.42e2 * mu1 * mu1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.6e1 * mu1 * mu1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.4e1 * mu1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.14e2 * mu1 * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.52e2 * mu1 * mu2 * pow(z, 0.4e1) * pow(delta2, 0.3e1) + 0.42e2 * mu1 * mu2 * mu2 * pow(z, 0.4e1) * delta2 * delta2 - 0.4e1 * mu1 * pow(mu2, 0.3e1) * pow(z, 0.4e1) * delta2 + 0.14e2 * mu2 * z * z * delta2 * pow(delta1, 0.3e1) - 0.66e2 * delta1 * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.12e2 * delta1 * delta1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.14e2 * delta1 * mu2 * pow(z, 0.4e1) * pow(delta2, 0.3e1) - 0.12e2 * delta1 * mu2 * mu2 * pow(z, 0.4e1) * delta2 * delta2 + 0.2e1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.4e1) * delta2 - 0.24e2 * mu1 * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.6e1 * mu1 * delta1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 + 0.19e2 * mu2 * pow(z, 0.5e1) * pow(delta2, 0.4e1) - 0.26e2 * mu2 * mu2 * pow(z, 0.5e1) * pow(delta2, 0.3e1) + 0.14e2 * pow(mu2, 0.3e1) * pow(z, 0.5e1) * delta2 * delta2 - pow(mu2, 0.4e1) * pow(z, 0.5e1) * delta2) * (-mu2 * z + delta2 * z + c - mu1 + mu1 * z - delta1 + delta1 * z) * pow(z, -0.3e1) * pow(delta1, -0.3e1) * pow(delta2, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.320e3;


		case 5:
			
				return (0.30e2 * c * mu1 * mu2 * z - 0.30e2 * c * mu1 * mu2 * z * z - 0.3e1 * mu1 * delta1 * delta1 + 0.15e2 * z * pow(mu1, 0.3e1) - 0.15e2 * z * z * pow(mu1, 0.3e1) + 0.5e1 * pow(mu1, 0.3e1) * pow(z, 0.3e1) + 0.5e1 * pow(c, 0.3e1) - 0.5e1 * pow(mu1, 0.3e1) - 0.3e1 * delta1 * delta1 * mu2 * z - 0.6e1 * delta1 * delta1 * z * c - 0.15e2 * c * c * mu2 * z + 0.15e2 * c * c * mu1 * z - 0.15e2 * mu1 * mu1 * mu2 * z - 0.30e2 * mu1 * mu1 * z * c + 0.6e1 * delta1 * delta1 * mu2 * z * z + 0.3e1 * delta1 * delta1 * z * z * c + 0.30e2 * mu1 * mu1 * mu2 * z * z + 0.15e2 * mu1 * mu1 * z * z * c - 0.15e2 * c * delta2 * delta2 * z * z + 0.15e2 * c * mu2 * mu2 * z * z + 0.15e2 * mu1 * delta2 * delta2 * z * z - 0.15e2 * mu1 * mu2 * mu2 * z * z - 0.15e2 * pow(z, 0.3e1) * mu1 * delta2 * delta2 + 0.15e2 * pow(z, 0.3e1) * mu1 * mu2 * mu2 + 0.15e2 * pow(z, 0.3e1) * mu2 * delta2 * delta2 - 0.3e1 * delta1 * delta1 * mu2 * pow(z, 0.3e1) - 0.15e2 * mu1 * mu1 * mu2 * pow(z, 0.3e1) - 0.15e2 * mu1 * c * c - 0.5e1 * pow(z, 0.3e1) * pow(mu2, 0.3e1) + 0.10e2 * pow(z, 0.3e1) * pow(delta2, 0.3e1) + 0.3e1 * delta1 * delta1 * c + 0.15e2 * mu1 * mu1 * c + 0.9e1 * mu1 * z * delta1 * delta1 - 0.9e1 * mu1 * z * z * delta1 * delta1 + 0.3e1 * mu1 * pow(z, 0.3e1) * delta1 * delta1) * pow(delta2, -0.3e1) * pow(z, -0.3e1) / 0.20e2;

		case 6:
		
				return -(0.30e2 * c * mu1 * mu2 * z - 0.30e2 * c * mu1 * mu2 * z * z + 0.15e2 * mu1 * delta1 * delta1 + 0.15e2 * z * pow(mu1, 0.3e1) - 0.15e2 * z * z * pow(mu1, 0.3e1) + 0.5e1 * pow(mu1, 0.3e1) * pow(z, 0.3e1) - 0.30e2 * z * pow(delta1, 0.3e1) + 0.30e2 * z * z * pow(delta1, 0.3e1) - 0.10e2 * pow(delta1, 0.3e1) * pow(z, 0.3e1) + 0.5e1 * pow(c, 0.3e1) - 0.5e1 * pow(mu1, 0.3e1) + 0.15e2 * delta1 * delta1 * mu2 * z + 0.30e2 * delta1 * delta1 * z * c - 0.15e2 * c * c * mu2 * z + 0.15e2 * c * c * mu1 * z - 0.15e2 * mu1 * mu1 * mu2 * z - 0.30e2 * mu1 * mu1 * z * c - 0.30e2 * delta1 * delta1 * mu2 * z * z - 0.15e2 * delta1 * delta1 * z * z * c + 0.30e2 * mu1 * mu1 * mu2 * z * z + 0.15e2 * mu1 * mu1 * z * z * c + 0.3e1 * c * delta2 * delta2 * z * z + 0.15e2 * c * mu2 * mu2 * z * z - 0.3e1 * mu1 * delta2 * delta2 * z * z - 0.15e2 * mu1 * mu2 * mu2 * z * z + 0.3e1 * pow(z, 0.3e1) * mu1 * delta2 * delta2 + 0.15e2 * pow(z, 0.3e1) * mu1 * mu2 * mu2 - 0.3e1 * pow(z, 0.3e1) * mu2 * delta2 * delta2 + 0.15e2 * delta1 * delta1 * mu2 * pow(z, 0.3e1) - 0.15e2 * mu1 * mu1 * mu2 * pow(z, 0.3e1) + 0.10e2 * pow(delta1, 0.3e1) - 0.15e2 * mu1 * c * c - 0.5e1 * pow(z, 0.3e1) * pow(mu2, 0.3e1) - 0.15e2 * delta1 * delta1 * c + 0.15e2 * mu1 * mu1 * c - 0.45e2 * mu1 * z * delta1 * delta1 + 0.45e2 * mu1 * z * z * delta1 * delta1 - 0.15e2 * mu1 * pow(z, 0.3e1) * delta1 * delta1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.20e2;

		case 7:
			
				return -(0.75e2 * mu2 * c * c * delta2 * delta2 + 0.19e2 * mu2 * z * z * pow(delta2, 0.4e1) + 0.15e2 * c * c * mu2 * mu2 * delta2 + 0.6e1 * z * c * c * pow(mu2, 0.3e1) - z * z * c * pow(mu2, 0.4e1) + 0.6e1 * z * z * mu1 * pow(mu2, 0.4e1) + z * z * delta2 * pow(mu2, 0.4e1) + 0.14e2 * z * z * delta2 * delta2 * pow(mu2, 0.3e1) + 0.26e2 * z * z * mu2 * mu2 * pow(delta2, 0.3e1) - 0.15e2 * delta1 * delta1 * mu2 * mu2 * delta2 - 0.30e2 * delta1 * delta1 * pow(mu2, 0.3e1) * z + 0.15e2 * mu1 * mu1 * mu2 * mu2 * delta2 + 0.30e2 * mu1 * mu1 * pow(mu2, 0.3e1) * z + 0.75e2 * mu2 * mu1 * mu1 * delta2 * delta2 - 0.75e2 * mu2 * delta1 * delta1 * delta2 * delta2 - 0.24e2 * z * c * pow(delta2, 0.4e1) - 0.90e2 * mu1 * c * pow(delta2, 0.3e1) + 0.24e2 * mu1 * z * pow(delta2, 0.4e1) + 0.90e2 * mu2 * pow(c, 0.3e1) * mu1 - 0.45e2 * mu2 * c * c * mu1 * mu1 + 0.45e2 * mu2 * c * c * delta1 * delta1 - 0.90e2 * mu2 * mu2 * mu1 * c * c + 0.45e2 * c * mu2 * mu2 * mu1 * mu1 - 0.45e2 * c * mu2 * mu2 * delta1 * delta1 + 0.30e2 * c * mu1 * pow(mu2, 0.3e1) - 0.75e2 * pow(c, 0.3e1) * delta2 * delta2 - pow(mu2, 0.3e1) * z * z * c * c + 0.15e2 * pow(mu2, 0.3e1) * z * z * delta1 * delta1 - 0.15e2 * pow(mu2, 0.3e1) * z * z * mu1 * mu1 - 0.24e2 * pow(delta2, 0.3e1) * z * c * c + 0.5e1 * pow(delta2, 0.4e1) * z * z * c - 0.24e2 * pow(delta2, 0.4e1) * z * z * mu1 - 0.90e2 * pow(delta2, 0.3e1) * z * mu1 * mu1 + 0.90e2 * pow(delta2, 0.3e1) * z * delta1 * delta1 - 0.30e2 * pow(c, 0.3e1) * mu2 * delta2 - 0.54e2 * z * pow(c, 0.3e1) * mu2 * mu2 + 0.150e3 * mu1 * c * c * delta2 * delta2 - 0.75e2 * c * mu1 * mu1 * delta2 * delta2 + 0.75e2 * c * delta1 * delta1 * delta2 * delta2 - 0.42e2 * mu2 * z * c * c * delta2 * delta2 - 0.12e2 * mu2 * mu2 * z * c * c * delta2 + 0.14e2 * mu2 * z * z * c * pow(delta2, 0.3e1) - 0.66e2 * mu2 * z * z * mu1 * pow(delta2, 0.3e1) + 0.30e2 * mu2 * mu2 * z * delta1 * delta1 * delta2 - 0.30e2 * mu2 * mu2 * z * mu1 * mu1 * delta2 + 0.2e1 * pow(mu2, 0.3e1) * z * z * c * delta2 + 0.12e2 * mu2 * mu2 * z * z * c * delta2 * delta2 - 0.6e1 * pow(mu2, 0.3e1) * z * z * mu1 * delta2 + 0.6e1 * pow(mu2, 0.3e1) * z * z * mu1 * c - 0.150e3 * mu2 * z * mu1 * mu1 * delta2 * delta2 + 0.150e3 * mu2 * z * delta1 * delta1 * delta2 * delta2 - 0.54e2 * mu2 * mu2 * z * z * mu1 * delta2 * delta2 + 0.114e3 * pow(delta2, 0.3e1) * z * mu1 * c + 0.30e2 * c * delta1 * delta1 * mu2 * delta2 + 0.90e2 * c * delta1 * delta1 * mu2 * mu2 * z - 0.30e2 * c * mu1 * mu1 * mu2 * delta2 - 0.90e2 * c * mu1 * mu1 * mu2 * mu2 * z + 0.60e2 * mu1 * c * c * mu2 * delta2 + 0.144e3 * mu1 * z * c * c * mu2 * mu2 + 0.45e2 * c * c * pow(delta2, 0.3e1) + 0.5e1 * z * z * pow(delta2, 0.5e1) + 0.45e2 * mu1 * mu1 * pow(delta2, 0.3e1) - 0.45e2 * delta1 * delta1 * pow(delta2, 0.3e1) + 0.15e2 * delta1 * delta1 * pow(mu2, 0.3e1) - 0.45e2 * mu2 * pow(c, 0.4e1) + 0.45e2 * pow(c, 0.3e1) * mu2 * mu2 - 0.15e2 * c * c * pow(mu2, 0.3e1) - 0.15e2 * mu1 * mu1 * pow(mu2, 0.3e1) + 0.192e3 * mu2 * z * mu1 * c * delta2 * delta2 + 0.42e2 * mu2 * mu2 * z * mu1 * c * delta2 - 0.66e2 * mu2 * z * c * pow(delta2, 0.3e1) - 0.150e3 * mu2 * mu1 * c * delta2 * delta2 + 0.66e2 * mu2 * mu1 * z * pow(delta2, 0.3e1) - 0.6e1 * z * c * delta2 * pow(mu2, 0.3e1) - 0.54e2 * z * c * mu2 * mu2 * delta2 * delta2 - 0.30e2 * mu1 * c * mu2 * mu2 * delta2 + 0.6e1 * mu1 * z * delta2 * pow(mu2, 0.3e1) - 0.36e2 * mu1 * z * c * pow(mu2, 0.3e1) + 0.54e2 * mu1 * z * mu2 * mu2 * delta2 * delta2 - 0.30e2 * c * mu2 * z * z * delta2 * mu1 * mu1 + 0.30e2 * c * mu2 * z * z * delta2 * delta1 * delta1 + 0.42e2 * mu2 * z * z * delta2 * c * c * mu1 - 0.30e2 * pow(c, 0.4e1) * mu1 + 0.15e2 * pow(c, 0.3e1) * mu1 * mu1 - 0.15e2 * pow(c, 0.3e1) * delta1 * delta1 - 0.45e2 * mu1 * mu1 * z * z * mu2 * c * c + 0.66e2 * mu1 * z * z * mu2 * pow(c, 0.3e1) - 0.24e2 * mu1 * z * z * pow(c, 0.3e1) * delta2 + 0.15e2 * mu1 * mu1 * z * z * c * c * delta2 + 0.45e2 * delta1 * delta1 * z * z * mu2 * c * c - 0.30e2 * mu1 * mu1 * z * pow(c, 0.3e1) + 0.54e2 * mu1 * z * pow(c, 0.4e1) + 0.15e2 * mu1 * mu1 * z * z * pow(c, 0.3e1) + 0.30e2 * delta1 * delta1 * z * pow(c, 0.3e1) - 0.15e2 * delta1 * delta1 * z * z * pow(c, 0.3e1) + 0.66e2 * mu2 * z * pow(c, 0.4e1) + 0.19e2 * z * z * pow(c, 0.3e1) * mu2 * mu2 - 0.35e2 * pow(c, 0.3e1) * delta2 * delta2 * z * z - 0.24e2 * pow(c, 0.4e1) * delta2 * z + 0.15e2 * pow(c, 0.5e1) - 0.15e2 * delta1 * delta1 * z * z * c * c * delta2 - 0.156e3 * mu2 * z * pow(c, 0.3e1) * mu1 + 0.90e2 * mu2 * z * c * c * mu1 * mu1 - 0.90e2 * mu2 * z * c * c * delta1 * delta1 - 0.54e2 * z * z * mu2 * mu2 * mu1 * c * c + 0.96e2 * c * c * delta2 * delta2 * z * z * mu1 + 0.75e2 * c * delta1 * delta1 * z * z * delta2 * delta2 + 0.45e2 * c * z * z * mu2 * mu2 * mu1 * mu1 - 0.75e2 * c * mu1 * mu1 * delta2 * delta2 * z * z - 0.45e2 * c * mu2 * mu2 * z * z * delta1 * delta1 + 0.54e2 * pow(c, 0.3e1) * delta2 * z * mu1 - 0.30e2 * c * c * delta2 * z * mu1 * mu1 + 0.30e2 * c * c * delta2 * z * delta1 * delta1 - 0.16e2 * mu2 * z * z * delta2 * pow(c, 0.3e1) - 0.102e3 * mu2 * z * c * c * mu1 * delta2 + 0.60e2 * mu2 * z * c * mu1 * mu1 * delta2 - 0.60e2 * mu2 * z * c * delta1 * delta1 * delta2 - 0.12e2 * z * z * mu2 * mu2 * mu1 * c * delta2 - 0.42e2 * mu2 * z * z * delta2 * delta2 * c * mu1 - 0.30e2 * pow(c, 0.3e1) * mu1 * delta2 + 0.15e2 * c * c * mu1 * mu1 * delta2 - 0.15e2 * c * c * delta1 * delta1 * delta2 - 0.45e2 * delta1 * delta1 * z * z * pow(delta2, 0.3e1) + 0.5e1 * c * c * pow(delta2, 0.3e1) * z * z + 0.45e2 * mu1 * mu1 * pow(delta2, 0.3e1) * z * z + 0.96e2 * pow(c, 0.3e1) * delta2 * delta2 * z - 0.24e2 * c * pow(delta2, 0.3e1) * z * z * mu1 + 0.42e2 * mu2 * z * pow(c, 0.3e1) * delta2 + 0.15e2 * z * z * mu2 * mu2 * mu1 * mu1 * delta2 + 0.3e1 * z * z * c * c * mu2 * mu2 * delta2 + 0.15e2 * pow(c, 0.4e1) * delta2 - 0.24e2 * pow(c, 0.5e1) * z + 0.10e2 * pow(c, 0.5e1) * z * z - 0.15e2 * mu2 * mu2 * z * z * delta1 * delta1 * delta2 - 0.246e3 * c * c * delta2 * delta2 * z * mu1 + 0.150e3 * c * delta2 * delta2 * z * mu1 * mu1 - 0.150e3 * c * delta2 * delta2 * z * delta1 * delta1 + 0.9e1 * mu2 * z * z * delta2 * delta2 * c * c + 0.75e2 * mu2 * z * z * delta2 * delta2 * mu1 * mu1 - 0.75e2 * mu2 * z * z * delta2 * delta2 * delta1 * delta1 - 0.24e2 * pow(c, 0.4e1) * mu1 * z * z - 0.26e2 * mu2 * z * z * pow(c, 0.4e1) + 0.10e2 * pow(c, 0.4e1) * delta2 * z * z - pow(mu2, 0.5e1) * z * z + 0.6e1 * c * pow(mu2, 0.4e1) * z - 0.6e1 * mu1 * pow(mu2, 0.4e1) * z) * (-mu2 - delta2 + c) * z * pow(delta1, -0.3e1) * pow(delta2, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.320e3;


		case 8:
			
				return -(0.75e2 * mu2 * c * c * delta2 * delta2 + 0.19e2 * mu2 * z * z * pow(delta2, 0.4e1) - 0.15e2 * c * c * mu2 * mu2 * delta2 + 0.6e1 * z * c * c * pow(mu2, 0.3e1) - z * z * c * pow(mu2, 0.4e1) + 0.6e1 * z * z * mu1 * pow(mu2, 0.4e1) - z * z * delta2 * pow(mu2, 0.4e1) + 0.14e2 * z * z * delta2 * delta2 * pow(mu2, 0.3e1) - 0.26e2 * z * z * mu2 * mu2 * pow(delta2, 0.3e1) + 0.15e2 * delta1 * delta1 * mu2 * mu2 * delta2 - 0.30e2 * delta1 * delta1 * pow(mu2, 0.3e1) * z - 0.15e2 * mu1 * mu1 * mu2 * mu2 * delta2 + 0.30e2 * mu1 * mu1 * pow(mu2, 0.3e1) * z + 0.75e2 * mu2 * mu1 * mu1 * delta2 * delta2 - 0.75e2 * mu2 * delta1 * delta1 * delta2 * delta2 - 0.24e2 * z * c * pow(delta2, 0.4e1) + 0.90e2 * mu1 * c * pow(delta2, 0.3e1) + 0.24e2 * mu1 * z * pow(delta2, 0.4e1) + 0.90e2 * mu2 * pow(c, 0.3e1) * mu1 - 0.45e2 * mu2 * c * c * mu1 * mu1 + 0.45e2 * mu2 * c * c * delta1 * delta1 - 0.90e2 * mu2 * mu2 * mu1 * c * c + 0.45e2 * c * mu2 * mu2 * mu1 * mu1 - 0.45e2 * c * mu2 * mu2 * delta1 * delta1 + 0.30e2 * c * mu1 * pow(mu2, 0.3e1) - 0.75e2 * pow(c, 0.3e1) * delta2 * delta2 - pow(mu2, 0.3e1) * z * z * c * c + 0.15e2 * pow(mu2, 0.3e1) * z * z * delta1 * delta1 - 0.15e2 * pow(mu2, 0.3e1) * z * z * mu1 * mu1 + 0.24e2 * pow(delta2, 0.3e1) * z * c * c + 0.5e1 * pow(delta2, 0.4e1) * z * z * c - 0.24e2 * pow(delta2, 0.4e1) * z * z * mu1 + 0.90e2 * pow(delta2, 0.3e1) * z * mu1 * mu1 - 0.90e2 * pow(delta2, 0.3e1) * z * delta1 * delta1 + 0.30e2 * pow(c, 0.3e1) * mu2 * delta2 - 0.54e2 * z * pow(c, 0.3e1) * mu2 * mu2 + 0.150e3 * mu1 * c * c * delta2 * delta2 - 0.75e2 * c * mu1 * mu1 * delta2 * delta2 + 0.75e2 * c * delta1 * delta1 * delta2 * delta2 - 0.42e2 * mu2 * z * c * c * delta2 * delta2 + 0.12e2 * mu2 * mu2 * z * c * c * delta2 - 0.14e2 * mu2 * z * z * c * pow(delta2, 0.3e1) + 0.66e2 * mu2 * z * z * mu1 * pow(delta2, 0.3e1) - 0.30e2 * mu2 * mu2 * z * delta1 * delta1 * delta2 + 0.30e2 * mu2 * mu2 * z * mu1 * mu1 * delta2 - 0.2e1 * pow(mu2, 0.3e1) * z * z * c * delta2 + 0.12e2 * mu2 * mu2 * z * z * c * delta2 * delta2 + 0.6e1 * pow(mu2, 0.3e1) * z * z * mu1 * delta2 + 0.6e1 * pow(mu2, 0.3e1) * z * z * mu1 * c - 0.150e3 * mu2 * z * mu1 * mu1 * delta2 * delta2 + 0.150e3 * mu2 * z * delta1 * delta1 * delta2 * delta2 - 0.54e2 * mu2 * mu2 * z * z * mu1 * delta2 * delta2 - 0.114e3 * pow(delta2, 0.3e1) * z * mu1 * c - 0.30e2 * c * delta1 * delta1 * mu2 * delta2 + 0.90e2 * c * delta1 * delta1 * mu2 * mu2 * z + 0.30e2 * c * mu1 * mu1 * mu2 * delta2 - 0.90e2 * c * mu1 * mu1 * mu2 * mu2 * z - 0.60e2 * mu1 * c * c * mu2 * delta2 + 0.144e3 * mu1 * z * c * c * mu2 * mu2 - 0.45e2 * c * c * pow(delta2, 0.3e1) - 0.5e1 * z * z * pow(delta2, 0.5e1) - 0.45e2 * mu1 * mu1 * pow(delta2, 0.3e1) + 0.45e2 * delta1 * delta1 * pow(delta2, 0.3e1) + 0.15e2 * delta1 * delta1 * pow(mu2, 0.3e1) - 0.45e2 * mu2 * pow(c, 0.4e1) + 0.45e2 * pow(c, 0.3e1) * mu2 * mu2 - 0.15e2 * c * c * pow(mu2, 0.3e1) - 0.15e2 * mu1 * mu1 * pow(mu2, 0.3e1) + 0.192e3 * mu2 * z * mu1 * c * delta2 * delta2 - 0.42e2 * mu2 * mu2 * z * mu1 * c * delta2 + 0.66e2 * mu2 * z * c * pow(delta2, 0.3e1) - 0.150e3 * mu2 * mu1 * c * delta2 * delta2 - 0.66e2 * mu2 * mu1 * z * pow(delta2, 0.3e1) + 0.6e1 * z * c * delta2 * pow(mu2, 0.3e1) - 0.54e2 * z * c * mu2 * mu2 * delta2 * delta2 + 0.30e2 * mu1 * c * mu2 * mu2 * delta2 - 0.6e1 * mu1 * z * delta2 * pow(mu2, 0.3e1) - 0.36e2 * mu1 * z * c * pow(mu2, 0.3e1) + 0.54e2 * mu1 * z * mu2 * mu2 * delta2 * delta2 + 0.30e2 * c * mu2 * z * z * delta2 * mu1 * mu1 - 0.30e2 * c * mu2 * z * z * delta2 * delta1 * delta1 - 0.42e2 * mu2 * z * z * delta2 * c * c * mu1 - 0.30e2 * pow(c, 0.4e1) * mu1 + 0.15e2 * pow(c, 0.3e1) * mu1 * mu1 - 0.15e2 * pow(c, 0.3e1) * delta1 * delta1 - 0.45e2 * mu1 * mu1 * z * z * mu2 * c * c + 0.66e2 * mu1 * z * z * mu2 * pow(c, 0.3e1) + 0.24e2 * mu1 * z * z * pow(c, 0.3e1) * delta2 - 0.15e2 * mu1 * mu1 * z * z * c * c * delta2 + 0.45e2 * delta1 * delta1 * z * z * mu2 * c * c - 0.30e2 * mu1 * mu1 * z * pow(c, 0.3e1) + 0.54e2 * mu1 * z * pow(c, 0.4e1) + 0.15e2 * mu1 * mu1 * z * z * pow(c, 0.3e1) + 0.30e2 * delta1 * delta1 * z * pow(c, 0.3e1) - 0.15e2 * delta1 * delta1 * z * z * pow(c, 0.3e1) + 0.66e2 * mu2 * z * pow(c, 0.4e1) + 0.19e2 * z * z * pow(c, 0.3e1) * mu2 * mu2 - 0.35e2 * pow(c, 0.3e1) * delta2 * delta2 * z * z + 0.24e2 * pow(c, 0.4e1) * delta2 * z + 0.15e2 * pow(c, 0.5e1) + 0.15e2 * delta1 * delta1 * z * z * c * c * delta2 - 0.156e3 * mu2 * z * pow(c, 0.3e1) * mu1 + 0.90e2 * mu2 * z * c * c * mu1 * mu1 - 0.90e2 * mu2 * z * c * c * delta1 * delta1 - 0.54e2 * z * z * mu2 * mu2 * mu1 * c * c + 0.96e2 * c * c * delta2 * delta2 * z * z * mu1 + 0.75e2 * c * delta1 * delta1 * z * z * delta2 * delta2 + 0.45e2 * c * z * z * mu2 * mu2 * mu1 * mu1 - 0.75e2 * c * mu1 * mu1 * delta2 * delta2 * z * z - 0.45e2 * c * mu2 * mu2 * z * z * delta1 * delta1 - 0.54e2 * pow(c, 0.3e1) * delta2 * z * mu1 + 0.30e2 * c * c * delta2 * z * mu1 * mu1 - 0.30e2 * c * c * delta2 * z * delta1 * delta1 + 0.16e2 * mu2 * z * z * delta2 * pow(c, 0.3e1) + 0.102e3 * mu2 * z * c * c * mu1 * delta2 - 0.60e2 * mu2 * z * c * mu1 * mu1 * delta2 + 0.60e2 * mu2 * z * c * delta1 * delta1 * delta2 + 0.12e2 * z * z * mu2 * mu2 * mu1 * c * delta2 - 0.42e2 * mu2 * z * z * delta2 * delta2 * c * mu1 + 0.30e2 * pow(c, 0.3e1) * mu1 * delta2 - 0.15e2 * c * c * mu1 * mu1 * delta2 + 0.15e2 * c * c * delta1 * delta1 * delta2 + 0.45e2 * delta1 * delta1 * z * z * pow(delta2, 0.3e1) - 0.5e1 * c * c * pow(delta2, 0.3e1) * z * z - 0.45e2 * mu1 * mu1 * pow(delta2, 0.3e1) * z * z + 0.96e2 * pow(c, 0.3e1) * delta2 * delta2 * z + 0.24e2 * c * pow(delta2, 0.3e1) * z * z * mu1 - 0.42e2 * mu2 * z * pow(c, 0.3e1) * delta2 - 0.15e2 * z * z * mu2 * mu2 * mu1 * mu1 * delta2 - 0.3e1 * z * z * c * c * mu2 * mu2 * delta2 - 0.15e2 * pow(c, 0.4e1) * delta2 - 0.24e2 * pow(c, 0.5e1) * z + 0.10e2 * pow(c, 0.5e1) * z * z + 0.15e2 * mu2 * mu2 * z * z * delta1 * delta1 * delta2 - 0.246e3 * c * c * delta2 * delta2 * z * mu1 + 0.150e3 * c * delta2 * delta2 * z * mu1 * mu1 - 0.150e3 * c * delta2 * delta2 * z * delta1 * delta1 + 0.9e1 * mu2 * z * z * delta2 * delta2 * c * c + 0.75e2 * mu2 * z * z * delta2 * delta2 * mu1 * mu1 - 0.75e2 * mu2 * z * z * delta2 * delta2 * delta1 * delta1 - 0.24e2 * pow(c, 0.4e1) * mu1 * z * z - 0.26e2 * mu2 * z * z * pow(c, 0.4e1) - 0.10e2 * pow(c, 0.4e1) * delta2 * z * z - pow(mu2, 0.5e1) * z * z + 0.6e1 * c * pow(mu2, 0.4e1) * z - 0.6e1 * mu1 * pow(mu2, 0.4e1) * z) * z * (-mu2 + delta2 + c) * pow(delta1, -0.3e1) * pow(delta2, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.320e3;
			
		case 9:
		
				return -(c - mu1 + delta1) * (-0.6e1 * c * c * mu1 * mu1 * delta1 + 0.42e2 * c * c * mu1 * delta1 * delta1 + 0.4e1 * pow(c, 0.3e1) * mu1 * delta1 + 0.4e1 * c * pow(mu1, 0.3e1) * delta1 - 0.42e2 * c * mu1 * mu1 * delta1 * delta1 + 0.52e2 * c * mu1 * pow(delta1, 0.3e1) + pow(z, 0.3e1) * c * c * pow(mu1, 0.3e1) - 0.10e2 * pow(z, 0.3e1) * pow(c, 0.4e1) * delta1 + 0.5e1 * pow(z, 0.3e1) * c * c * pow(delta1, 0.3e1) + pow(z, 0.3e1) * c * pow(mu1, 0.4e1) - 0.5e1 * pow(z, 0.3e1) * c * pow(delta1, 0.4e1) + pow(z, 0.3e1) * pow(mu1, 0.4e1) * delta1 - 0.14e2 * pow(z, 0.3e1) * pow(mu1, 0.3e1) * delta1 * delta1 + 0.26e2 * pow(z, 0.3e1) * mu1 * mu1 * pow(delta1, 0.3e1) - 0.19e2 * pow(z, 0.3e1) * mu1 * pow(delta1, 0.4e1) - 0.15e2 * pow(z, 0.3e1) * delta2 * delta2 * pow(mu1, 0.3e1) - 0.45e2 * pow(z, 0.3e1) * delta2 * delta2 * pow(delta1, 0.3e1) - 0.6e1 * mu2 * z * pow(mu1, 0.4e1) + 0.24e2 * mu2 * z * pow(delta1, 0.4e1) - 0.15e2 * mu2 * mu2 * z * z * pow(mu1, 0.3e1) + 0.15e2 * mu2 * mu2 * pow(z, 0.3e1) * pow(mu1, 0.3e1) - 0.45e2 * mu2 * mu2 * z * z * pow(delta1, 0.3e1) + 0.45e2 * mu2 * mu2 * pow(z, 0.3e1) * pow(delta1, 0.3e1) + 0.12e2 * mu2 * z * z * pow(mu1, 0.4e1) - 0.6e1 * mu2 * pow(z, 0.3e1) * pow(mu1, 0.4e1) - 0.48e2 * mu2 * z * z * pow(delta1, 0.4e1) + 0.24e2 * mu2 * pow(z, 0.3e1) * pow(delta1, 0.4e1) + 0.15e2 * delta2 * delta2 * z * z * pow(mu1, 0.3e1) + 0.45e2 * delta2 * delta2 * z * z * pow(delta1, 0.3e1) + 0.6e1 * pow(mu1, 0.3e1) * z * c * c + 0.3e1 * pow(mu1, 0.3e1) * z * z * c * c + 0.12e2 * pow(delta1, 0.3e1) * z * c * c + 0.9e1 * pow(delta1, 0.3e1) * z * z * c * c - 0.3e1 * pow(c, 0.4e1) * delta1 * z - 0.6e1 * pow(c, 0.4e1) * delta1 * z * z - 0.9e1 * c * pow(mu1, 0.4e1) * z + 0.3e1 * c * pow(mu1, 0.4e1) * z * z + 0.33e2 * c * pow(delta1, 0.4e1) * z - 0.9e1 * c * pow(delta1, 0.4e1) * z * z + 0.3e1 * pow(mu1, 0.4e1) * z * delta1 - 0.42e2 * pow(mu1, 0.3e1) * z * delta1 * delta1 - 0.3e1 * pow(mu1, 0.4e1) * z * z * delta1 + 0.42e2 * pow(mu1, 0.3e1) * z * z * delta1 * delta1 + 0.78e2 * pow(delta1, 0.3e1) * z * mu1 * mu1 - 0.78e2 * pow(delta1, 0.3e1) * z * z * mu1 * mu1 - 0.57e2 * mu1 * pow(delta1, 0.4e1) * z + 0.57e2 * mu1 * pow(delta1, 0.4e1) * z * z - 0.10e2 * c * c * pow(mu1, 0.3e1) - pow(c, 0.4e1) * delta1 - 0.26e2 * c * c * pow(delta1, 0.3e1) + 0.5e1 * c * pow(mu1, 0.4e1) - 0.19e2 * c * pow(delta1, 0.4e1) - pow(mu1, 0.4e1) * delta1 + 0.14e2 * pow(mu1, 0.3e1) * delta1 * delta1 - 0.26e2 * mu1 * mu1 * pow(delta1, 0.3e1) + 0.19e2 * mu1 * pow(delta1, 0.4e1) + pow(z, 0.3e1) * pow(mu1, 0.5e1) + 0.5e1 * pow(z, 0.3e1) * pow(delta1, 0.5e1) + 0.3e1 * pow(mu1, 0.5e1) * z - 0.3e1 * pow(mu1, 0.5e1) * z * z + 0.15e2 * pow(delta1, 0.5e1) * z - 0.15e2 * pow(delta1, 0.5e1) * z * z - 0.30e2 * pow(z, 0.3e1) * delta2 * delta2 * c * mu1 * delta1 - 0.60e2 * pow(z, 0.3e1) * delta2 * delta2 * c * delta1 * mu2 + 0.60e2 * pow(z, 0.3e1) * delta2 * delta2 * mu1 * delta1 * mu2 + 0.30e2 * mu2 * mu2 * pow(z, 0.3e1) * mu1 * c * delta1 - 0.6e1 * mu2 * z * z * mu1 * mu1 * c * delta1 - 0.12e2 * mu2 * pow(z, 0.3e1) * mu1 * mu1 * c * delta1 + 0.66e2 * mu2 * z * z * delta1 * delta1 * c * mu1 + 0.42e2 * mu2 * pow(z, 0.3e1) * delta1 * delta1 * c * mu1 - 0.24e2 * mu2 * z * z * c * c * delta1 * mu1 - 0.18e2 * mu2 * pow(z, 0.3e1) * mu1 * delta1 * c * c - 0.18e2 * mu2 * z * c * c * mu1 * delta1 + 0.18e2 * mu2 * z * c * mu1 * mu1 * delta1 - 0.108e3 * mu2 * z * c * mu1 * delta1 * delta1 - 0.30e2 * c * delta2 * delta2 * z * z * mu1 * delta1 + 0.30e2 * c * mu2 * mu2 * z * z * mu1 * delta1 - 0.120e3 * c * mu1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.5e1 * pow(c, 0.4e1) * mu1 + 0.10e2 * pow(c, 0.3e1) * mu1 * mu1 - 0.14e2 * pow(c, 0.3e1) * delta1 * delta1 - 0.18e2 * mu1 * mu1 * z * z * mu2 * c * c - 0.6e1 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * c * c + 0.15e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * c - 0.15e2 * mu1 * mu1 * pow(z, 0.3e1) * c * delta2 * delta2 + 0.42e2 * mu1 * z * z * mu2 * pow(c, 0.3e1) - 0.75e2 * mu1 * pow(z, 0.3e1) * c * c * mu2 * mu2 + 0.75e2 * mu1 * pow(z, 0.3e1) * c * c * delta2 * delta2 + 0.42e2 * delta1 * delta1 * z * z * mu2 * c * c + 0.24e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * c * c + 0.40e2 * delta1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.80e2 * delta1 * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + 0.6e1 * mu1 * mu1 * z * pow(c, 0.3e1) - 0.9e1 * mu1 * z * pow(c, 0.4e1) + 0.3e1 * mu1 * mu1 * z * z * pow(c, 0.3e1) - 0.12e2 * delta1 * delta1 * z * pow(c, 0.3e1) - 0.9e1 * delta1 * delta1 * z * z * pow(c, 0.3e1) - 0.6e1 * mu2 * z * pow(c, 0.4e1) + 0.15e2 * z * z * pow(c, 0.3e1) * mu2 * mu2 - 0.15e2 * pow(c, 0.3e1) * delta2 * delta2 * z * z - 0.20e2 * c * c * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.40e2 * c * c * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.20e2 * mu1 * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.40e2 * mu1 * mu1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + pow(c, 0.5e1) - 0.45e2 * delta1 * delta1 * pow(z, 0.3e1) * c * mu2 * mu2 + 0.45e2 * delta1 * delta1 * pow(z, 0.3e1) * c * delta2 * delta2 + 0.24e2 * mu2 * z * pow(c, 0.3e1) * mu1 - 0.36e2 * mu2 * z * c * c * mu1 * mu1 + 0.54e2 * mu2 * z * c * c * delta1 * delta1 - 0.45e2 * z * z * mu2 * mu2 * mu1 * c * c + 0.45e2 * c * c * delta2 * delta2 * z * z * mu1 + 0.75e2 * c * delta1 * delta1 * z * z * delta2 * delta2 + 0.45e2 * c * z * z * mu2 * mu2 * mu1 * mu1 - 0.45e2 * c * mu1 * mu1 * delta2 * delta2 * z * z - 0.75e2 * c * mu2 * mu2 * z * z * delta1 * delta1 + 0.60e2 * c * c * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.40e2 * c * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.80e2 * c * mu1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + 0.60e2 * mu1 * mu1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.120e3 * delta1 * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.3e1 * pow(c, 0.5e1) * z + 0.6e1 * pow(c, 0.5e1) * z * z + 0.10e2 * pow(c, 0.5e1) * pow(z, 0.3e1) - 0.12e2 * pow(c, 0.4e1) * mu1 * z * z - 0.14e2 * pow(c, 0.4e1) * mu1 * pow(z, 0.3e1) + pow(c, 0.3e1) * mu1 * mu1 * pow(z, 0.3e1) - 0.5e1 * pow(c, 0.3e1) * delta1 * delta1 * pow(z, 0.3e1) - 0.18e2 * mu2 * z * z * pow(c, 0.4e1) - 0.36e2 * mu2 * pow(z, 0.3e1) * pow(c, 0.4e1) + 0.45e2 * pow(z, 0.3e1) * pow(c, 0.3e1) * mu2 * mu2 - 0.45e2 * pow(c, 0.3e1) * delta2 * delta2 * pow(z, 0.3e1) + 0.54e2 * mu1 * pow(z, 0.3e1) * mu2 * pow(c, 0.3e1) + 0.3e1 * pow(z, 0.3e1) * c * c * mu1 * mu1 * delta1 - 0.9e1 * pow(z, 0.3e1) * c * c * mu1 * delta1 * delta1 + 0.4e1 * pow(z, 0.3e1) * pow(c, 0.3e1) * mu1 * delta1 + 0.2e1 * pow(z, 0.3e1) * c * pow(mu1, 0.3e1) * delta1 - 0.12e2 * pow(z, 0.3e1) * c * mu1 * mu1 * delta1 * delta1 + 0.14e2 * pow(z, 0.3e1) * c * mu1 * pow(delta1, 0.3e1) + 0.40e2 * pow(z, 0.3e1) * pow(delta2, 0.3e1) * mu1 * delta1 + 0.45e2 * pow(z, 0.3e1) * delta2 * delta2 * c * c * delta1 - 0.15e2 * pow(z, 0.3e1) * delta2 * delta2 * mu1 * mu1 * delta1 + 0.75e2 * pow(z, 0.3e1) * delta2 * delta2 * mu1 * delta1 * delta1 - 0.40e2 * pow(z, 0.3e1) * pow(delta2, 0.3e1) * c * delta1 - 0.18e2 * mu2 * z * z * pow(mu1, 0.3e1) * c + 0.12e2 * mu2 * z * z * pow(mu1, 0.3e1) * delta1 - 0.108e3 * mu2 * z * z * mu1 * mu1 * delta1 * delta1 - 0.6e1 * mu2 * pow(z, 0.3e1) * pow(mu1, 0.3e1) * c - 0.6e1 * mu2 * pow(z, 0.3e1) * pow(mu1, 0.3e1) * delta1 + 0.54e2 * mu2 * pow(z, 0.3e1) * mu1 * mu1 * delta1 * delta1 - 0.42e2 * mu2 * z * z * pow(delta1, 0.3e1) * c + 0.132e3 * mu2 * z * z * pow(delta1, 0.3e1) * mu1 - 0.24e2 * mu2 * pow(z, 0.3e1) * pow(delta1, 0.3e1) * c - 0.66e2 * mu2 * pow(z, 0.3e1) * pow(delta1, 0.3e1) * mu1 + 0.18e2 * mu2 * z * z * pow(c, 0.3e1) * delta1 + 0.36e2 * mu2 * pow(z, 0.3e1) * pow(c, 0.3e1) * delta1 + 0.6e1 * mu2 * z * pow(c, 0.3e1) * delta1 + 0.24e2 * mu2 * z * c * pow(mu1, 0.3e1) + 0.66e2 * mu2 * z * c * pow(delta1, 0.3e1) - 0.6e1 * mu2 * z * pow(mu1, 0.3e1) * delta1 + 0.54e2 * mu2 * z * mu1 * mu1 * delta1 * delta1 - 0.66e2 * mu2 * z * mu1 * pow(delta1, 0.3e1) + 0.20e2 * pow(mu2, 0.3e1) * pow(z, 0.3e1) * c * delta1 - 0.20e2 * pow(mu2, 0.3e1) * pow(z, 0.3e1) * mu1 * delta1 + 0.75e2 * mu2 * mu2 * z * z * mu1 * delta1 * delta1 + 0.15e2 * mu2 * mu2 * pow(z, 0.3e1) * mu1 * mu1 * delta1 - 0.75e2 * mu2 * mu2 * pow(z, 0.3e1) * mu1 * delta1 * delta1 - 0.45e2 * mu2 * mu2 * pow(z, 0.3e1) * delta1 * c * c - 0.75e2 * delta2 * delta2 * z * z * mu1 * delta1 * delta1 + 0.15e2 * delta2 * delta2 * z * z * c * c * delta1 - 0.6e1 * c * pow(mu1, 0.3e1) * z * delta1 + 0.72e2 * c * mu1 * mu1 * z * delta1 * delta1 - 0.18e2 * c * mu1 * mu1 * z * z * delta1 * delta1 - 0.90e2 * c * pow(delta1, 0.3e1) * z * mu1 + 0.24e2 * c * pow(delta1, 0.3e1) * z * z * mu1 - 0.15e2 * mu2 * mu2 * z * z * c * c * delta1 + 0.3e1 * mu1 * mu1 * z * z * c * c * delta1 - 0.18e2 * delta1 * delta1 * z * c * c * mu1 - 0.15e2 * delta1 * delta1 * z * z * c * c * mu1 + 0.6e1 * pow(c, 0.3e1) * delta1 * z * mu1 + 0.6e1 * mu1 * z * z * delta1 * pow(c, 0.3e1) + 0.15e2 * delta2 * delta2 * z * z * mu1 * mu1 * delta1 - 0.15e2 * mu2 * mu2 * z * z * mu1 * mu1 * delta1 - pow(mu1, 0.5e1) - 0.5e1 * pow(delta1, 0.5e1)) * pow(delta1, -0.3e1) * pow(delta2, -0.3e1) * pow(z, -0.3e1) / 0.320e3;


		case 10:
		
				return -(c - mu1 - delta1) * (0.6e1 * c * c * mu1 * mu1 * delta1 + 0.42e2 * c * c * mu1 * delta1 * delta1 - 0.4e1 * pow(c, 0.3e1) * mu1 * delta1 - 0.4e1 * c * pow(mu1, 0.3e1) * delta1 - 0.42e2 * c * mu1 * mu1 * delta1 * delta1 - 0.52e2 * c * mu1 * pow(delta1, 0.3e1) + pow(z, 0.3e1) * c * c * pow(mu1, 0.3e1) + 0.10e2 * pow(z, 0.3e1) * pow(c, 0.4e1) * delta1 - 0.5e1 * pow(z, 0.3e1) * c * c * pow(delta1, 0.3e1) + pow(z, 0.3e1) * c * pow(mu1, 0.4e1) - 0.5e1 * pow(z, 0.3e1) * c * pow(delta1, 0.4e1) - pow(z, 0.3e1) * pow(mu1, 0.4e1) * delta1 - 0.14e2 * pow(z, 0.3e1) * pow(mu1, 0.3e1) * delta1 * delta1 - 0.26e2 * pow(z, 0.3e1) * mu1 * mu1 * pow(delta1, 0.3e1) - 0.19e2 * pow(z, 0.3e1) * mu1 * pow(delta1, 0.4e1) - 0.15e2 * pow(z, 0.3e1) * delta2 * delta2 * pow(mu1, 0.3e1) + 0.45e2 * pow(z, 0.3e1) * delta2 * delta2 * pow(delta1, 0.3e1) - 0.6e1 * mu2 * z * pow(mu1, 0.4e1) + 0.24e2 * mu2 * z * pow(delta1, 0.4e1) - 0.15e2 * mu2 * mu2 * z * z * pow(mu1, 0.3e1) + 0.15e2 * mu2 * mu2 * pow(z, 0.3e1) * pow(mu1, 0.3e1) + 0.45e2 * mu2 * mu2 * z * z * pow(delta1, 0.3e1) - 0.45e2 * mu2 * mu2 * pow(z, 0.3e1) * pow(delta1, 0.3e1) + 0.12e2 * mu2 * z * z * pow(mu1, 0.4e1) - 0.6e1 * mu2 * pow(z, 0.3e1) * pow(mu1, 0.4e1) - 0.48e2 * mu2 * z * z * pow(delta1, 0.4e1) + 0.24e2 * mu2 * pow(z, 0.3e1) * pow(delta1, 0.4e1) + 0.15e2 * delta2 * delta2 * z * z * pow(mu1, 0.3e1) - 0.45e2 * delta2 * delta2 * z * z * pow(delta1, 0.3e1) + 0.6e1 * pow(mu1, 0.3e1) * z * c * c + 0.3e1 * pow(mu1, 0.3e1) * z * z * c * c - 0.12e2 * pow(delta1, 0.3e1) * z * c * c - 0.9e1 * pow(delta1, 0.3e1) * z * z * c * c + 0.3e1 * pow(c, 0.4e1) * delta1 * z + 0.6e1 * pow(c, 0.4e1) * delta1 * z * z - 0.9e1 * c * pow(mu1, 0.4e1) * z + 0.3e1 * c * pow(mu1, 0.4e1) * z * z + 0.33e2 * c * pow(delta1, 0.4e1) * z - 0.9e1 * c * pow(delta1, 0.4e1) * z * z - 0.3e1 * pow(mu1, 0.4e1) * z * delta1 - 0.42e2 * pow(mu1, 0.3e1) * z * delta1 * delta1 + 0.3e1 * pow(mu1, 0.4e1) * z * z * delta1 + 0.42e2 * pow(mu1, 0.3e1) * z * z * delta1 * delta1 - 0.78e2 * pow(delta1, 0.3e1) * z * mu1 * mu1 + 0.78e2 * pow(delta1, 0.3e1) * z * z * mu1 * mu1 - 0.57e2 * mu1 * pow(delta1, 0.4e1) * z + 0.57e2 * mu1 * pow(delta1, 0.4e1) * z * z - 0.10e2 * c * c * pow(mu1, 0.3e1) + pow(c, 0.4e1) * delta1 + 0.26e2 * c * c * pow(delta1, 0.3e1) + 0.5e1 * c * pow(mu1, 0.4e1) - 0.19e2 * c * pow(delta1, 0.4e1) + pow(mu1, 0.4e1) * delta1 + 0.14e2 * pow(mu1, 0.3e1) * delta1 * delta1 + 0.26e2 * mu1 * mu1 * pow(delta1, 0.3e1) + 0.19e2 * mu1 * pow(delta1, 0.4e1) + pow(z, 0.3e1) * pow(mu1, 0.5e1) - 0.5e1 * pow(z, 0.3e1) * pow(delta1, 0.5e1) + 0.3e1 * pow(mu1, 0.5e1) * z - 0.3e1 * pow(mu1, 0.5e1) * z * z - 0.15e2 * pow(delta1, 0.5e1) * z + 0.15e2 * pow(delta1, 0.5e1) * z * z + 0.30e2 * pow(z, 0.3e1) * delta2 * delta2 * c * mu1 * delta1 + 0.60e2 * pow(z, 0.3e1) * delta2 * delta2 * c * delta1 * mu2 - 0.60e2 * pow(z, 0.3e1) * delta2 * delta2 * mu1 * delta1 * mu2 - 0.30e2 * mu2 * mu2 * pow(z, 0.3e1) * mu1 * c * delta1 + 0.6e1 * mu2 * z * z * mu1 * mu1 * c * delta1 + 0.12e2 * mu2 * pow(z, 0.3e1) * mu1 * mu1 * c * delta1 + 0.66e2 * mu2 * z * z * delta1 * delta1 * c * mu1 + 0.42e2 * mu2 * pow(z, 0.3e1) * delta1 * delta1 * c * mu1 + 0.24e2 * mu2 * z * z * c * c * delta1 * mu1 + 0.18e2 * mu2 * pow(z, 0.3e1) * mu1 * delta1 * c * c + 0.18e2 * mu2 * z * c * c * mu1 * delta1 - 0.18e2 * mu2 * z * c * mu1 * mu1 * delta1 - 0.108e3 * mu2 * z * c * mu1 * delta1 * delta1 + 0.30e2 * c * delta2 * delta2 * z * z * mu1 * delta1 - 0.30e2 * c * mu2 * mu2 * z * z * mu1 * delta1 - 0.120e3 * c * mu1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.5e1 * pow(c, 0.4e1) * mu1 + 0.10e2 * pow(c, 0.3e1) * mu1 * mu1 - 0.14e2 * pow(c, 0.3e1) * delta1 * delta1 - 0.18e2 * mu1 * mu1 * z * z * mu2 * c * c - 0.6e1 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * c * c + 0.15e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * c - 0.15e2 * mu1 * mu1 * pow(z, 0.3e1) * c * delta2 * delta2 + 0.42e2 * mu1 * z * z * mu2 * pow(c, 0.3e1) - 0.75e2 * mu1 * pow(z, 0.3e1) * c * c * mu2 * mu2 + 0.75e2 * mu1 * pow(z, 0.3e1) * c * c * delta2 * delta2 + 0.42e2 * delta1 * delta1 * z * z * mu2 * c * c + 0.24e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * c * c + 0.40e2 * delta1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.80e2 * delta1 * delta1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + 0.6e1 * mu1 * mu1 * z * pow(c, 0.3e1) - 0.9e1 * mu1 * z * pow(c, 0.4e1) + 0.3e1 * mu1 * mu1 * z * z * pow(c, 0.3e1) - 0.12e2 * delta1 * delta1 * z * pow(c, 0.3e1) - 0.9e1 * delta1 * delta1 * z * z * pow(c, 0.3e1) - 0.6e1 * mu2 * z * pow(c, 0.4e1) + 0.15e2 * z * z * pow(c, 0.3e1) * mu2 * mu2 - 0.15e2 * pow(c, 0.3e1) * delta2 * delta2 * z * z - 0.20e2 * c * c * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.40e2 * c * c * pow(delta2, 0.3e1) * pow(z, 0.3e1) - 0.20e2 * mu1 * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.40e2 * mu1 * mu1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + pow(c, 0.5e1) - 0.45e2 * delta1 * delta1 * pow(z, 0.3e1) * c * mu2 * mu2 + 0.45e2 * delta1 * delta1 * pow(z, 0.3e1) * c * delta2 * delta2 + 0.24e2 * mu2 * z * pow(c, 0.3e1) * mu1 - 0.36e2 * mu2 * z * c * c * mu1 * mu1 + 0.54e2 * mu2 * z * c * c * delta1 * delta1 - 0.45e2 * z * z * mu2 * mu2 * mu1 * c * c + 0.45e2 * c * c * delta2 * delta2 * z * z * mu1 + 0.75e2 * c * delta1 * delta1 * z * z * delta2 * delta2 + 0.45e2 * c * z * z * mu2 * mu2 * mu1 * mu1 - 0.45e2 * c * mu1 * mu1 * delta2 * delta2 * z * z - 0.75e2 * c * mu2 * mu2 * z * z * delta1 * delta1 + 0.60e2 * c * c * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.40e2 * c * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.80e2 * c * mu1 * pow(delta2, 0.3e1) * pow(z, 0.3e1) + 0.60e2 * mu1 * mu1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.120e3 * delta1 * delta1 * mu2 * pow(z, 0.3e1) * delta2 * delta2 + 0.3e1 * pow(c, 0.5e1) * z + 0.6e1 * pow(c, 0.5e1) * z * z + 0.10e2 * pow(c, 0.5e1) * pow(z, 0.3e1) - 0.12e2 * pow(c, 0.4e1) * mu1 * z * z - 0.14e2 * pow(c, 0.4e1) * mu1 * pow(z, 0.3e1) + pow(c, 0.3e1) * mu1 * mu1 * pow(z, 0.3e1) - 0.5e1 * pow(c, 0.3e1) * delta1 * delta1 * pow(z, 0.3e1) - 0.18e2 * mu2 * z * z * pow(c, 0.4e1) - 0.36e2 * mu2 * pow(z, 0.3e1) * pow(c, 0.4e1) + 0.45e2 * pow(z, 0.3e1) * pow(c, 0.3e1) * mu2 * mu2 - 0.45e2 * pow(c, 0.3e1) * delta2 * delta2 * pow(z, 0.3e1) + 0.54e2 * mu1 * pow(z, 0.3e1) * mu2 * pow(c, 0.3e1) - 0.3e1 * pow(z, 0.3e1) * c * c * mu1 * mu1 * delta1 - 0.9e1 * pow(z, 0.3e1) * c * c * mu1 * delta1 * delta1 - 0.4e1 * pow(z, 0.3e1) * pow(c, 0.3e1) * mu1 * delta1 - 0.2e1 * pow(z, 0.3e1) * c * pow(mu1, 0.3e1) * delta1 - 0.12e2 * pow(z, 0.3e1) * c * mu1 * mu1 * delta1 * delta1 - 0.14e2 * pow(z, 0.3e1) * c * mu1 * pow(delta1, 0.3e1) + 0.40e2 * pow(z, 0.3e1) * pow(delta2, 0.3e1) * mu1 * delta1 - 0.45e2 * pow(z, 0.3e1) * delta2 * delta2 * c * c * delta1 + 0.15e2 * pow(z, 0.3e1) * delta2 * delta2 * mu1 * mu1 * delta1 + 0.75e2 * pow(z, 0.3e1) * delta2 * delta2 * mu1 * delta1 * delta1 - 0.40e2 * pow(z, 0.3e1) * pow(delta2, 0.3e1) * c * delta1 - 0.18e2 * mu2 * z * z * pow(mu1, 0.3e1) * c - 0.12e2 * mu2 * z * z * pow(mu1, 0.3e1) * delta1 - 0.108e3 * mu2 * z * z * mu1 * mu1 * delta1 * delta1 - 0.6e1 * mu2 * pow(z, 0.3e1) * pow(mu1, 0.3e1) * c + 0.6e1 * mu2 * pow(z, 0.3e1) * pow(mu1, 0.3e1) * delta1 + 0.54e2 * mu2 * pow(z, 0.3e1) * mu1 * mu1 * delta1 * delta1 + 0.42e2 * mu2 * z * z * pow(delta1, 0.3e1) * c - 0.132e3 * mu2 * z * z * pow(delta1, 0.3e1) * mu1 + 0.24e2 * mu2 * pow(z, 0.3e1) * pow(delta1, 0.3e1) * c + 0.66e2 * mu2 * pow(z, 0.3e1) * pow(delta1, 0.3e1) * mu1 - 0.18e2 * mu2 * z * z * pow(c, 0.3e1) * delta1 - 0.36e2 * mu2 * pow(z, 0.3e1) * pow(c, 0.3e1) * delta1 - 0.6e1 * mu2 * z * pow(c, 0.3e1) * delta1 + 0.24e2 * mu2 * z * c * pow(mu1, 0.3e1) - 0.66e2 * mu2 * z * c * pow(delta1, 0.3e1) + 0.6e1 * mu2 * z * pow(mu1, 0.3e1) * delta1 + 0.54e2 * mu2 * z * mu1 * mu1 * delta1 * delta1 + 0.66e2 * mu2 * z * mu1 * pow(delta1, 0.3e1) - 0.20e2 * pow(mu2, 0.3e1) * pow(z, 0.3e1) * c * delta1 + 0.20e2 * pow(mu2, 0.3e1) * pow(z, 0.3e1) * mu1 * delta1 + 0.75e2 * mu2 * mu2 * z * z * mu1 * delta1 * delta1 - 0.15e2 * mu2 * mu2 * pow(z, 0.3e1) * mu1 * mu1 * delta1 - 0.75e2 * mu2 * mu2 * pow(z, 0.3e1) * mu1 * delta1 * delta1 + 0.45e2 * mu2 * mu2 * pow(z, 0.3e1) * delta1 * c * c - 0.75e2 * delta2 * delta2 * z * z * mu1 * delta1 * delta1 - 0.15e2 * delta2 * delta2 * z * z * c * c * delta1 + 0.6e1 * c * pow(mu1, 0.3e1) * z * delta1 + 0.72e2 * c * mu1 * mu1 * z * delta1 * delta1 - 0.18e2 * c * mu1 * mu1 * z * z * delta1 * delta1 + 0.90e2 * c * pow(delta1, 0.3e1) * z * mu1 - 0.24e2 * c * pow(delta1, 0.3e1) * z * z * mu1 + 0.15e2 * mu2 * mu2 * z * z * c * c * delta1 - 0.3e1 * mu1 * mu1 * z * z * c * c * delta1 - 0.18e2 * delta1 * delta1 * z * c * c * mu1 - 0.15e2 * delta1 * delta1 * z * z * c * c * mu1 - 0.6e1 * pow(c, 0.3e1) * delta1 * z * mu1 - 0.6e1 * mu1 * z * z * delta1 * pow(c, 0.3e1) - 0.15e2 * delta2 * delta2 * z * z * mu1 * mu1 * delta1 + 0.15e2 * mu2 * mu2 * z * z * mu1 * mu1 * delta1 - pow(mu1, 0.5e1) + 0.5e1 * pow(delta1, 0.5e1)) * pow(delta1, -0.3e1) * pow(delta2, -0.3e1) * pow(z, -0.3e1) / 0.320e3;

				 
		case 11:
			
				return -(-0.480e3 * pow(delta1, 0.3e1) * pow(delta2, 0.3e1) * z - 0.30e2 * pow(c, 0.5e1) * mu1 * z + 0.54e2 * pow(c, 0.5e1) * mu1 * z * z - 0.24e2 * pow(c, 0.5e1) * mu1 * pow(z, 0.3e1) - 0.15e2 * pow(c, 0.4e1) * delta1 * delta1 * z + 0.30e2 * pow(c, 0.4e1) * delta1 * delta1 * z * z - 0.15e2 * pow(c, 0.4e1) * delta1 * delta1 * pow(z, 0.3e1) + 0.15e2 * pow(c, 0.4e1) * mu1 * mu1 * z - 0.30e2 * pow(c, 0.4e1) * mu1 * mu1 * z * z + 0.15e2 * pow(c, 0.4e1) * mu1 * mu1 * pow(z, 0.3e1) - 0.45e2 * delta2 * delta2 * pow(z, 0.3e1) * pow(c, 0.4e1) + 0.240e3 * pow(delta2, 0.3e1) * mu1 * c * c + 0.40e2 * pow(delta2, 0.3e1) * pow(z, 0.3e1) * pow(c, 0.3e1) + 0.240e3 * pow(delta2, 0.3e1) * delta1 * delta1 * c - 0.240e3 * pow(delta2, 0.3e1) * mu1 * mu1 * c - 0.80e2 * pow(delta2, 0.3e1) * pow(mu1, 0.3e1) * pow(z, 0.3e1) + 0.120e3 * delta2 * delta2 * z * z * pow(c, 0.4e1) - 0.90e2 * delta2 * delta2 * pow(c, 0.4e1) * z + 0.120e3 * pow(delta2, 0.3e1) * pow(c, 0.3e1) * z - 0.120e3 * pow(delta2, 0.3e1) * z * z * pow(c, 0.3e1) - 0.240e3 * pow(delta2, 0.3e1) * pow(mu1, 0.3e1) * z + 0.240e3 * pow(delta2, 0.3e1) * z * z * pow(mu1, 0.3e1) - 0.240e3 * pow(delta2, 0.3e1) * mu1 * delta1 * delta1 - 0.60e2 * mu2 * z * pow(c, 0.5e1) - 0.120e3 * z * z * pow(c, 0.4e1) * mu2 * mu2 - 0.20e2 * pow(c, 0.3e1) * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.90e2 * mu2 * z * z * pow(c, 0.5e1) - 0.36e2 * mu2 * pow(z, 0.3e1) * pow(c, 0.5e1) + 0.45e2 * pow(z, 0.3e1) * pow(c, 0.4e1) * mu2 * mu2 + 0.120e3 * delta2 * delta2 * pow(z, 0.3e1) * pow(c, 0.3e1) * mu1 + 0.60e2 * delta2 * delta2 * pow(z, 0.3e1) * mu2 * pow(c, 0.3e1) - 0.90e2 * delta2 * delta2 * c * c * pow(z, 0.3e1) * mu1 * mu1 + 0.90e2 * delta2 * delta2 * c * c * pow(z, 0.3e1) * delta1 * delta1 + 0.180e3 * delta2 * delta2 * z * z * c * c * mu1 * mu1 - 0.180e3 * delta2 * delta2 * z * z * c * c * delta1 * delta1 - 0.300e3 * delta2 * delta2 * z * z * pow(c, 0.3e1) * mu1 + 0.180e3 * delta2 * delta2 * pow(c, 0.3e1) * z * mu1 - 0.90e2 * delta2 * delta2 * c * c * z * mu1 * mu1 + 0.90e2 * delta2 * delta2 * c * c * z * delta1 * delta1 + 0.180e3 * delta2 * delta2 * mu2 * z * pow(c, 0.3e1) - 0.180e3 * delta2 * delta2 * mu2 * z * z * pow(c, 0.3e1) + 0.360e3 * pow(delta2, 0.3e1) * mu1 * z * z * c * c - 0.480e3 * pow(delta2, 0.3e1) * mu1 * mu1 * z * z * c + 0.480e3 * pow(delta2, 0.3e1) * delta1 * delta1 * z * z * c - 0.480e3 * pow(delta2, 0.3e1) * c * c * z * mu1 + 0.600e3 * pow(delta2, 0.3e1) * c * z * mu1 * mu1 - 0.600e3 * pow(delta2, 0.3e1) * c * z * delta1 * delta1 - 0.120e3 * pow(delta2, 0.3e1) * pow(z, 0.3e1) * c * c * mu1 + 0.120e3 * pow(delta2, 0.3e1) * c * pow(z, 0.3e1) * mu1 * mu1 - 0.120e3 * pow(delta2, 0.3e1) * c * pow(z, 0.3e1) * delta1 * delta1 + 0.720e3 * pow(delta2, 0.3e1) * mu1 * z * delta1 * delta1 - 0.720e3 * pow(delta2, 0.3e1) * z * z * mu1 * delta1 * delta1 + 0.240e3 * pow(delta2, 0.3e1) * mu1 * delta1 * delta1 * pow(z, 0.3e1) + 0.120e3 * mu1 * mu1 * z * z * mu2 * pow(c, 0.3e1) - 0.60e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * pow(c, 0.3e1) + 0.90e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * c * c - 0.210e3 * mu1 * z * z * mu2 * pow(c, 0.4e1) - 0.120e3 * mu1 * pow(z, 0.3e1) * pow(c, 0.3e1) * mu2 * mu2 - 0.120e3 * delta1 * delta1 * z * z * mu2 * pow(c, 0.3e1) + 0.60e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * pow(c, 0.3e1) + 0.60e2 * c * delta1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.60e2 * c * mu1 * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.90e2 * delta1 * delta1 * pow(z, 0.3e1) * c * c * mu2 * mu2 + 0.120e3 * mu2 * z * pow(c, 0.4e1) * mu1 - 0.60e2 * mu2 * z * pow(c, 0.3e1) * mu1 * mu1 + 0.60e2 * mu2 * z * pow(c, 0.3e1) * delta1 * delta1 + 0.300e3 * z * z * mu2 * mu2 * mu1 * pow(c, 0.3e1) - 0.180e3 * c * c * z * z * mu2 * mu2 * mu1 * mu1 + 0.180e3 * c * c * mu2 * mu2 * z * z * delta1 * delta1 + 0.60e2 * c * c * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.120e3 * pow(delta2, 0.3e1) * mu2 * mu2 * z * z * c - 0.30e2 * pow(mu2, 0.4e1) * mu1 * z * c + 0.120e3 * pow(mu2, 0.3e1) * z * c * c * mu1 - 0.60e2 * pow(mu2, 0.3e1) * z * c * mu1 * mu1 + 0.60e2 * pow(mu2, 0.3e1) * z * c * delta1 * delta1 - 0.180e3 * pow(mu2, 0.3e1) * z * z * c * c * mu1 + 0.120e3 * pow(mu2, 0.3e1) * z * z * c * mu1 * mu1 - 0.120e3 * pow(mu2, 0.3e1) * z * z * c * delta1 * delta1 + 0.30e2 * pow(mu2, 0.4e1) * z * z * mu1 * c - 0.180e3 * mu2 * mu2 * pow(c, 0.3e1) * z * mu1 + 0.90e2 * mu2 * mu2 * c * c * z * mu1 * mu1 - 0.90e2 * mu2 * mu2 * c * c * z * delta1 * delta1 - 0.5e1 * pow(delta2, 0.6e1) * pow(z, 0.3e1) + pow(mu2, 0.6e1) * pow(z, 0.3e1) + 0.15e2 * pow(c, 0.6e1) * z - 0.24e2 * pow(c, 0.6e1) * z * z + 0.10e2 * pow(c, 0.6e1) * pow(z, 0.3e1) - 0.15e2 * delta2 * delta2 * pow(z, 0.3e1) * pow(mu2, 0.4e1) - 0.45e2 * pow(delta2, 0.4e1) * z * c * c - 0.24e2 * pow(delta2, 0.5e1) * z * z * c + 0.24e2 * pow(delta2, 0.5e1) * z * z * mu1 - 0.24e2 * pow(delta2, 0.5e1) * pow(z, 0.3e1) * mu1 + 0.40e2 * pow(delta2, 0.3e1) * pow(z, 0.3e1) * pow(mu2, 0.3e1) - 0.45e2 * pow(delta2, 0.4e1) * pow(z, 0.3e1) * mu2 * mu2 + 0.24e2 * pow(delta2, 0.5e1) * pow(z, 0.3e1) * mu2 + 0.45e2 * pow(delta2, 0.4e1) * delta1 * delta1 * z - 0.45e2 * pow(delta2, 0.4e1) * mu1 * mu1 * z - 0.90e2 * pow(delta2, 0.4e1) * delta1 * delta1 * z * z + 0.90e2 * pow(delta2, 0.4e1) * mu1 * mu1 * z * z + 0.15e2 * pow(mu2, 0.4e1) * z * c * c - 0.6e1 * pow(mu2, 0.5e1) * z * z * c + 0.6e1 * pow(mu2, 0.5e1) * z * z * mu1 - 0.6e1 * pow(mu2, 0.5e1) * pow(z, 0.3e1) * mu1 - 0.15e2 * pow(mu2, 0.4e1) * delta1 * delta1 * z + 0.15e2 * pow(mu2, 0.4e1) * mu1 * mu1 * z - 0.15e2 * pow(mu2, 0.4e1) * delta1 * delta1 * pow(z, 0.3e1) + 0.15e2 * pow(mu2, 0.4e1) * mu1 * mu1 * pow(z, 0.3e1) + 0.90e2 * mu2 * mu2 * pow(c, 0.4e1) * z - 0.60e2 * pow(mu2, 0.3e1) * z * pow(c, 0.3e1) + 0.60e2 * pow(mu2, 0.3e1) * z * z * pow(c, 0.3e1) - 0.30e2 * pow(mu2, 0.4e1) * z * z * mu1 * mu1 + 0.30e2 * pow(mu2, 0.4e1) * z * z * delta1 * delta1 - 0.90e2 * delta2 * delta2 * z * c * c * mu2 * mu2 + 0.60e2 * delta2 * delta2 * z * z * c * pow(mu2, 0.3e1) - 0.60e2 * delta2 * delta2 * z * z * mu1 * pow(mu2, 0.3e1) + 0.60e2 * delta2 * delta2 * pow(z, 0.3e1) * mu1 * pow(mu2, 0.3e1) + 0.90e2 * delta2 * delta2 * delta1 * delta1 * mu2 * mu2 * z - 0.90e2 * delta2 * delta2 * mu1 * mu1 * mu2 * mu2 * z + 0.120e3 * pow(delta2, 0.3e1) * z * c * c * mu2 - 0.90e2 * pow(delta2, 0.4e1) * c * z * z * mu1 + 0.180e3 * delta2 * delta2 * z * z * mu2 * mu2 * mu1 * mu1 - 0.180e3 * delta2 * delta2 * mu2 * mu2 * z * z * delta1 * delta1 - 0.240e3 * pow(delta2, 0.3e1) * mu2 * z * z * mu1 * mu1 + 0.240e3 * pow(delta2, 0.3e1) * mu2 * z * z * delta1 * delta1 + 0.90e2 * pow(delta2, 0.4e1) * mu1 * z * c + 0.90e2 * pow(delta2, 0.4e1) * z * z * c * mu2 + 0.120e3 * pow(delta2, 0.3e1) * z * z * mu1 * mu2 * mu2 - 0.90e2 * pow(delta2, 0.4e1) * z * z * mu1 * mu2 - 0.120e3 * pow(delta2, 0.3e1) * pow(z, 0.3e1) * mu1 * mu2 * mu2 + 0.90e2 * pow(delta2, 0.4e1) * pow(z, 0.3e1) * mu1 * mu2 - 0.120e3 * pow(delta2, 0.3e1) * delta1 * delta1 * mu2 * z + 0.120e3 * pow(delta2, 0.3e1) * mu1 * mu1 * mu2 * z - 0.80e2 * pow(delta2, 0.3e1) * pow(c, 0.3e1) + 0.80e2 * pow(delta2, 0.3e1) * pow(mu1, 0.3e1) + 0.90e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * mu2 * delta2 * delta2 - 0.120e3 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * pow(delta2, 0.3e1) + 0.90e2 * mu1 * pow(z, 0.3e1) * mu2 * pow(c, 0.4e1) + 0.120e3 * mu1 * mu1 * mu2 * pow(z, 0.3e1) * pow(delta2, 0.3e1) - 0.90e2 * mu1 * mu1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.45e2 * mu1 * mu1 * pow(delta2, 0.4e1) * pow(z, 0.3e1) + 0.45e2 * delta1 * delta1 * pow(z, 0.3e1) * pow(delta2, 0.4e1) + 0.160e3 * pow(delta2, 0.3e1) * pow(delta1, 0.3e1) + 0.180e3 * delta2 * delta2 * mu1 * z * c * mu2 * mu2 - 0.180e3 * delta2 * delta2 * z * z * mu2 * mu2 * mu1 * c - 0.240e3 * pow(delta2, 0.3e1) * mu1 * z * c * mu2 + 0.240e3 * pow(delta2, 0.3e1) * mu2 * z * z * c * mu1 - 0.360e3 * delta2 * delta2 * mu2 * z * c * c * mu1 + 0.180e3 * delta2 * delta2 * mu2 * z * c * mu1 * mu1 - 0.180e3 * delta2 * delta2 * mu2 * z * c * delta1 * delta1 + 0.540e3 * delta2 * delta2 * mu2 * z * z * c * c * mu1 - 0.360e3 * delta2 * delta2 * mu2 * z * z * c * mu1 * mu1 + 0.360e3 * delta2 * delta2 * mu2 * z * z * c * delta1 * delta1 - 0.180e3 * delta2 * delta2 * pow(z, 0.3e1) * mu2 * c * c * mu1 + 0.180e3 * delta2 * delta2 * mu2 * pow(z, 0.3e1) * c * mu1 * mu1 - 0.180e3 * delta2 * delta2 * mu2 * pow(z, 0.3e1) * c * delta1 * delta1 - 0.160e3 * pow(delta1, 0.3e1) * pow(delta2, 0.3e1) * pow(z, 0.3e1) + 0.480e3 * pow(delta1, 0.3e1) * pow(delta2, 0.3e1) * z * z) * pow(delta1, -0.3e1) * pow(delta2, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.320e3;


		case 12:
		
				return -(-0.480e3 * pow(delta1, 0.3e1) * pow(delta2, 0.3e1) * z - 0.30e2 * pow(c, 0.5e1) * mu1 * z + 0.54e2 * pow(c, 0.5e1) * mu1 * z * z - 0.24e2 * pow(c, 0.5e1) * mu1 * pow(z, 0.3e1) - 0.15e2 * pow(c, 0.4e1) * delta1 * delta1 * z + 0.30e2 * pow(c, 0.4e1) * delta1 * delta1 * z * z - 0.15e2 * pow(c, 0.4e1) * delta1 * delta1 * pow(z, 0.3e1) + 0.15e2 * pow(c, 0.4e1) * mu1 * mu1 * z - 0.30e2 * pow(c, 0.4e1) * mu1 * mu1 * z * z + 0.15e2 * pow(c, 0.4e1) * mu1 * mu1 * pow(z, 0.3e1) - 0.45e2 * delta2 * delta2 * pow(z, 0.3e1) * pow(c, 0.4e1) - 0.240e3 * pow(delta2, 0.3e1) * mu1 * c * c - 0.40e2 * pow(delta2, 0.3e1) * pow(z, 0.3e1) * pow(c, 0.3e1) - 0.240e3 * pow(delta2, 0.3e1) * delta1 * delta1 * c + 0.240e3 * pow(delta2, 0.3e1) * mu1 * mu1 * c + 0.80e2 * pow(delta2, 0.3e1) * pow(mu1, 0.3e1) * pow(z, 0.3e1) + 0.120e3 * delta2 * delta2 * z * z * pow(c, 0.4e1) - 0.90e2 * delta2 * delta2 * pow(c, 0.4e1) * z - 0.120e3 * pow(delta2, 0.3e1) * pow(c, 0.3e1) * z + 0.120e3 * pow(delta2, 0.3e1) * z * z * pow(c, 0.3e1) + 0.240e3 * pow(delta2, 0.3e1) * pow(mu1, 0.3e1) * z - 0.240e3 * pow(delta2, 0.3e1) * z * z * pow(mu1, 0.3e1) + 0.240e3 * pow(delta2, 0.3e1) * mu1 * delta1 * delta1 - 0.60e2 * mu2 * z * pow(c, 0.5e1) - 0.120e3 * z * z * pow(c, 0.4e1) * mu2 * mu2 - 0.20e2 * pow(c, 0.3e1) * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.90e2 * mu2 * z * z * pow(c, 0.5e1) - 0.36e2 * mu2 * pow(z, 0.3e1) * pow(c, 0.5e1) + 0.45e2 * pow(z, 0.3e1) * pow(c, 0.4e1) * mu2 * mu2 + 0.120e3 * delta2 * delta2 * pow(z, 0.3e1) * pow(c, 0.3e1) * mu1 + 0.60e2 * delta2 * delta2 * pow(z, 0.3e1) * mu2 * pow(c, 0.3e1) - 0.90e2 * delta2 * delta2 * c * c * pow(z, 0.3e1) * mu1 * mu1 + 0.90e2 * delta2 * delta2 * c * c * pow(z, 0.3e1) * delta1 * delta1 + 0.180e3 * delta2 * delta2 * z * z * c * c * mu1 * mu1 - 0.180e3 * delta2 * delta2 * z * z * c * c * delta1 * delta1 - 0.300e3 * delta2 * delta2 * z * z * pow(c, 0.3e1) * mu1 + 0.180e3 * delta2 * delta2 * pow(c, 0.3e1) * z * mu1 - 0.90e2 * delta2 * delta2 * c * c * z * mu1 * mu1 + 0.90e2 * delta2 * delta2 * c * c * z * delta1 * delta1 + 0.180e3 * delta2 * delta2 * mu2 * z * pow(c, 0.3e1) - 0.180e3 * delta2 * delta2 * mu2 * z * z * pow(c, 0.3e1) - 0.360e3 * pow(delta2, 0.3e1) * mu1 * z * z * c * c + 0.480e3 * pow(delta2, 0.3e1) * mu1 * mu1 * z * z * c - 0.480e3 * pow(delta2, 0.3e1) * delta1 * delta1 * z * z * c + 0.480e3 * pow(delta2, 0.3e1) * c * c * z * mu1 - 0.600e3 * pow(delta2, 0.3e1) * c * z * mu1 * mu1 + 0.600e3 * pow(delta2, 0.3e1) * c * z * delta1 * delta1 + 0.120e3 * pow(delta2, 0.3e1) * pow(z, 0.3e1) * c * c * mu1 - 0.120e3 * pow(delta2, 0.3e1) * c * pow(z, 0.3e1) * mu1 * mu1 + 0.120e3 * pow(delta2, 0.3e1) * c * pow(z, 0.3e1) * delta1 * delta1 - 0.720e3 * pow(delta2, 0.3e1) * mu1 * z * delta1 * delta1 + 0.720e3 * pow(delta2, 0.3e1) * z * z * mu1 * delta1 * delta1 - 0.240e3 * pow(delta2, 0.3e1) * mu1 * delta1 * delta1 * pow(z, 0.3e1) + 0.120e3 * mu1 * mu1 * z * z * mu2 * pow(c, 0.3e1) - 0.60e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * pow(c, 0.3e1) + 0.90e2 * mu1 * mu1 * pow(z, 0.3e1) * mu2 * mu2 * c * c - 0.210e3 * mu1 * z * z * mu2 * pow(c, 0.4e1) - 0.120e3 * mu1 * pow(z, 0.3e1) * pow(c, 0.3e1) * mu2 * mu2 - 0.120e3 * delta1 * delta1 * z * z * mu2 * pow(c, 0.3e1) + 0.60e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * pow(c, 0.3e1) + 0.60e2 * c * delta1 * delta1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.60e2 * c * mu1 * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) - 0.90e2 * delta1 * delta1 * pow(z, 0.3e1) * c * c * mu2 * mu2 + 0.120e3 * mu2 * z * pow(c, 0.4e1) * mu1 - 0.60e2 * mu2 * z * pow(c, 0.3e1) * mu1 * mu1 + 0.60e2 * mu2 * z * pow(c, 0.3e1) * delta1 * delta1 + 0.300e3 * z * z * mu2 * mu2 * mu1 * pow(c, 0.3e1) - 0.180e3 * c * c * z * z * mu2 * mu2 * mu1 * mu1 + 0.180e3 * c * c * mu2 * mu2 * z * z * delta1 * delta1 + 0.60e2 * c * c * mu1 * pow(mu2, 0.3e1) * pow(z, 0.3e1) + 0.120e3 * pow(delta2, 0.3e1) * mu2 * mu2 * z * z * c - 0.30e2 * pow(mu2, 0.4e1) * mu1 * z * c + 0.120e3 * pow(mu2, 0.3e1) * z * c * c * mu1 - 0.60e2 * pow(mu2, 0.3e1) * z * c * mu1 * mu1 + 0.60e2 * pow(mu2, 0.3e1) * z * c * delta1 * delta1 - 0.180e3 * pow(mu2, 0.3e1) * z * z * c * c * mu1 + 0.120e3 * pow(mu2, 0.3e1) * z * z * c * mu1 * mu1 - 0.120e3 * pow(mu2, 0.3e1) * z * z * c * delta1 * delta1 + 0.30e2 * pow(mu2, 0.4e1) * z * z * mu1 * c - 0.180e3 * mu2 * mu2 * pow(c, 0.3e1) * z * mu1 + 0.90e2 * mu2 * mu2 * c * c * z * mu1 * mu1 - 0.90e2 * mu2 * mu2 * c * c * z * delta1 * delta1 - 0.5e1 * pow(delta2, 0.6e1) * pow(z, 0.3e1) + pow(mu2, 0.6e1) * pow(z, 0.3e1) + 0.15e2 * pow(c, 0.6e1) * z - 0.24e2 * pow(c, 0.6e1) * z * z + 0.10e2 * pow(c, 0.6e1) * pow(z, 0.3e1) - 0.15e2 * delta2 * delta2 * pow(z, 0.3e1) * pow(mu2, 0.4e1) - 0.45e2 * pow(delta2, 0.4e1) * z * c * c + 0.24e2 * pow(delta2, 0.5e1) * z * z * c - 0.24e2 * pow(delta2, 0.5e1) * z * z * mu1 + 0.24e2 * pow(delta2, 0.5e1) * pow(z, 0.3e1) * mu1 - 0.40e2 * pow(delta2, 0.3e1) * pow(z, 0.3e1) * pow(mu2, 0.3e1) - 0.45e2 * pow(delta2, 0.4e1) * pow(z, 0.3e1) * mu2 * mu2 - 0.24e2 * pow(delta2, 0.5e1) * pow(z, 0.3e1) * mu2 + 0.45e2 * pow(delta2, 0.4e1) * delta1 * delta1 * z - 0.45e2 * pow(delta2, 0.4e1) * mu1 * mu1 * z - 0.90e2 * pow(delta2, 0.4e1) * delta1 * delta1 * z * z + 0.90e2 * pow(delta2, 0.4e1) * mu1 * mu1 * z * z + 0.15e2 * pow(mu2, 0.4e1) * z * c * c - 0.6e1 * pow(mu2, 0.5e1) * z * z * c + 0.6e1 * pow(mu2, 0.5e1) * z * z * mu1 - 0.6e1 * pow(mu2, 0.5e1) * pow(z, 0.3e1) * mu1 - 0.15e2 * pow(mu2, 0.4e1) * delta1 * delta1 * z + 0.15e2 * pow(mu2, 0.4e1) * mu1 * mu1 * z - 0.15e2 * pow(mu2, 0.4e1) * delta1 * delta1 * pow(z, 0.3e1) + 0.15e2 * pow(mu2, 0.4e1) * mu1 * mu1 * pow(z, 0.3e1) + 0.90e2 * mu2 * mu2 * pow(c, 0.4e1) * z - 0.60e2 * pow(mu2, 0.3e1) * z * pow(c, 0.3e1) + 0.60e2 * pow(mu2, 0.3e1) * z * z * pow(c, 0.3e1) - 0.30e2 * pow(mu2, 0.4e1) * z * z * mu1 * mu1 + 0.30e2 * pow(mu2, 0.4e1) * z * z * delta1 * delta1 - 0.90e2 * delta2 * delta2 * z * c * c * mu2 * mu2 + 0.60e2 * delta2 * delta2 * z * z * c * pow(mu2, 0.3e1) - 0.60e2 * delta2 * delta2 * z * z * mu1 * pow(mu2, 0.3e1) + 0.60e2 * delta2 * delta2 * pow(z, 0.3e1) * mu1 * pow(mu2, 0.3e1) + 0.90e2 * delta2 * delta2 * delta1 * delta1 * mu2 * mu2 * z - 0.90e2 * delta2 * delta2 * mu1 * mu1 * mu2 * mu2 * z - 0.120e3 * pow(delta2, 0.3e1) * z * c * c * mu2 - 0.90e2 * pow(delta2, 0.4e1) * c * z * z * mu1 + 0.180e3 * delta2 * delta2 * z * z * mu2 * mu2 * mu1 * mu1 - 0.180e3 * delta2 * delta2 * mu2 * mu2 * z * z * delta1 * delta1 + 0.240e3 * pow(delta2, 0.3e1) * mu2 * z * z * mu1 * mu1 - 0.240e3 * pow(delta2, 0.3e1) * mu2 * z * z * delta1 * delta1 + 0.90e2 * pow(delta2, 0.4e1) * mu1 * z * c + 0.90e2 * pow(delta2, 0.4e1) * z * z * c * mu2 - 0.120e3 * pow(delta2, 0.3e1) * z * z * mu1 * mu2 * mu2 - 0.90e2 * pow(delta2, 0.4e1) * z * z * mu1 * mu2 + 0.120e3 * pow(delta2, 0.3e1) * pow(z, 0.3e1) * mu1 * mu2 * mu2 + 0.90e2 * pow(delta2, 0.4e1) * pow(z, 0.3e1) * mu1 * mu2 + 0.120e3 * pow(delta2, 0.3e1) * delta1 * delta1 * mu2 * z - 0.120e3 * pow(delta2, 0.3e1) * mu1 * mu1 * mu2 * z + 0.80e2 * pow(delta2, 0.3e1) * pow(c, 0.3e1) - 0.80e2 * pow(delta2, 0.3e1) * pow(mu1, 0.3e1) + 0.90e2 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * mu2 * delta2 * delta2 + 0.120e3 * delta1 * delta1 * pow(z, 0.3e1) * mu2 * pow(delta2, 0.3e1) + 0.90e2 * mu1 * pow(z, 0.3e1) * mu2 * pow(c, 0.4e1) - 0.120e3 * mu1 * mu1 * mu2 * pow(z, 0.3e1) * pow(delta2, 0.3e1) - 0.90e2 * mu1 * mu1 * mu2 * mu2 * pow(z, 0.3e1) * delta2 * delta2 - 0.45e2 * mu1 * mu1 * pow(delta2, 0.4e1) * pow(z, 0.3e1) + 0.45e2 * delta1 * delta1 * pow(z, 0.3e1) * pow(delta2, 0.4e1) + 0.160e3 * pow(delta2, 0.3e1) * pow(delta1, 0.3e1) + 0.180e3 * delta2 * delta2 * mu1 * z * c * mu2 * mu2 - 0.180e3 * delta2 * delta2 * z * z * mu2 * mu2 * mu1 * c + 0.240e3 * pow(delta2, 0.3e1) * mu1 * z * c * mu2 - 0.240e3 * pow(delta2, 0.3e1) * mu2 * z * z * c * mu1 - 0.360e3 * delta2 * delta2 * mu2 * z * c * c * mu1 + 0.180e3 * delta2 * delta2 * mu2 * z * c * mu1 * mu1 - 0.180e3 * delta2 * delta2 * mu2 * z * c * delta1 * delta1 + 0.540e3 * delta2 * delta2 * mu2 * z * z * c * c * mu1 - 0.360e3 * delta2 * delta2 * mu2 * z * z * c * mu1 * mu1 + 0.360e3 * delta2 * delta2 * mu2 * z * z * c * delta1 * delta1 - 0.180e3 * delta2 * delta2 * pow(z, 0.3e1) * mu2 * c * c * mu1 + 0.180e3 * delta2 * delta2 * mu2 * pow(z, 0.3e1) * c * mu1 * mu1 - 0.180e3 * delta2 * delta2 * mu2 * pow(z, 0.3e1) * c * delta1 * delta1 - 0.160e3 * pow(delta1, 0.3e1) * pow(delta2, 0.3e1) * pow(z, 0.3e1) + 0.480e3 * pow(delta1, 0.3e1) * pow(delta2, 0.3e1) * z * z) * pow(delta1, -0.3e1) * pow(delta2, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.320e3;
		
		default:
			cout<<"This basic piece doesn't exist"; 
	}

}

// there are total 12 basic pieces  so piece number will vary from  1 to 12
double epanechnikov_kernel_polynomial :: PQRS_expected_piece_value(double z, int piecenum)
{

  if(fabs(z) < e_epsilon)	
	{
		z = e_tweak;
	}
	if(fabs(1-z) < e_epsilon)	
	{
		z = 1 - e_tweak;
	}

	switch (piecenum)
	{
		// Expressions for z.pdf(z) and not pdf(z)
		case 1:
			return -0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu1 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c + 0.15e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c - 0.21e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 - 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * mu2 * mu2 * c * mu1 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 + 0.27e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * c * mu1 * mu1 * mu2 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * mu1 * mu2 * c * c + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.3e1) * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.4e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.4e1) * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * mu2 * mu2 * pow(mu1, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c + 0.27e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.81e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 + 0.27e2 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 - 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 - 0.3e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * mu1 - 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(c, 0.4e1) - 0.27e2 / 0.128e3 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * c * c + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * c - 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(mu1, 0.4e1) - 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) + 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.6e1) + 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 - 0.9e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) + 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.6e1) - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.6e1) + 0.3e1 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) + 0.45e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c + 0.27e2 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) + 0.81e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 + 0.27e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 - 0.21e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 - 0.27e2 / 0.128e3 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * mu1 * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.4e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * c * c - 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.4e1) + 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * mu1 * mu1 + 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 - 0.9e1 / 0.32e2 / delta2 / delta1 * log(z) * mu1 * mu1 - 0.9e1 / 0.32e2 / delta2 / delta1 * log(z) * c * c - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.6e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.6e1) + 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu2 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.4e1) + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.4e1) - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.4e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu1 * mu1 - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 - 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 + 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 - 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 - 0.3e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * c * pow(mu1, 0.3e1) - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * c * c * mu1 * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * c * mu1 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 / z * mu2 * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 / z * mu2 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.3e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.3e1) * mu2 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * c * c * mu1 * mu1 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / delta1 / z * c * pow(mu1, 0.3e1) - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * delta1 / z * c * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) + 0.45e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 - 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 - 0.21e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.15e2 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c + 0.21e2 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 + 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu1 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.5e1) * mu2 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.4e1) + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.5e1) - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c - 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.3e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.3e1) * mu2 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * mu2 * mu2 * mu1 * mu1 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(z) * c * c * mu1 * mu1 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * pow(mu1, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * c * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 + 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 / delta1 * log(z) * c * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(mu1, 0.4e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(c, 0.4e1) + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.5e1) * mu2 + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * mu1 * mu2 * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 - 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) * pow(mu1, 0.3e1) + 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * c * c * pow(mu1, 0.4e1) + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * c * pow(mu1, 0.5e1) + 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 - 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 + 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * mu2 * mu2 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c - 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * c * mu1 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * mu1 * mu1 * mu2 + 0.9e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.3e1) + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 + 0.9e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) + 0.9e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) - 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * pow(z, -0.2e1) + 0.9e1 / 0.128e3 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) + pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) / z + 0.3e1 / 0.8e1 / delta2 * log(z) * c - 0.3e1 / 0.8e1 / delta2 * log(z) * mu1 - 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * c + 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * log(z) - 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) - 0.9e1 / 0.64e2 / delta2 * delta1 * log(z) + 0.9e1 / 0.64e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;

		case 2:
			return 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu1 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c - 0.15e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c + 0.21e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 + 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * mu2 * mu2 * c * mu1 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 - 0.27e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * c * mu1 * mu1 * mu2 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * mu1 * mu2 * c * c - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.3e1) * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.4e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.4e1) * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * mu2 * mu2 * pow(mu1, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c - 0.27e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) - 0.81e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 - 0.27e2 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 + 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 + 0.3e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * mu1 + 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(c, 0.4e1) + 0.27e2 / 0.128e3 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * c * c + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * c + 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(mu1, 0.4e1) + 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) - 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.6e1) - 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.6e1) + 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 + 0.9e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) - 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.6e1) + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.6e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.6e1) - 0.3e1 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) - 0.45e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c - 0.27e2 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) - 0.81e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 - 0.27e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 + 0.21e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.27e2 / 0.128e3 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * mu1 * mu1 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.4e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * c * c - 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.4e1) - 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * mu1 * mu1 + 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 + 0.9e1 / 0.32e2 / delta2 / delta1 * log(z) * mu1 * mu1 + 0.9e1 / 0.32e2 / delta2 / delta1 * log(z) * c * c + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu2 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.4e1) - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.4e1) - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.4e1) - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu1 * mu1 + 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 + 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 - 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 + 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 + 0.3e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * c * pow(mu1, 0.3e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(c, 0.3e1) * mu1 - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * c * mu1 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 / z * mu2 * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 / z * mu2 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.3e1) * mu2 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * c * c * mu1 * mu1 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / delta1 / z * c * pow(mu1, 0.3e1) + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * delta1 / z * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) - 0.45e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 + 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 + 0.21e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) + 0.15e2 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c - 0.21e2 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 - 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu1 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.5e1) * mu2 + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.4e1) - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.5e1) + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.3e1) * mu2 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * mu2 * mu2 * mu1 * mu1 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(z) * c * c * mu1 * mu1 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * c * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * pow(mu1, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * c * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 - 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 - 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 - 0.9e1 / 0.16e2 / delta2 / delta1 * log(z) * c * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(mu1, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(c, 0.4e1) - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.5e1) * mu2 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * mu1 * mu2 * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 + 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) * pow(mu1, 0.3e1) - 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * c * c * pow(mu1, 0.4e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * mu1 * mu1 * mu2 + 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * c * pow(mu1, 0.5e1) - 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) + 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 - 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * mu2 * mu2 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c + 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * c * mu1 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * mu1 * mu1 * mu2 - 0.9e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.3e1) - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 - 0.9e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) - 0.9e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) + 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * pow(z, -0.2e1) - 0.9e1 / 0.128e3 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) - pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) / z + 0.3e1 / 0.8e1 / delta2 * log(z) * c - 0.3e1 / 0.8e1 / delta2 * log(z) * mu1 + 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * c - 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1) + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * log(z) + 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.64e2 / delta2 * delta1 * log(z) - 0.9e1 / 0.64e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;

			
		case 3:
			return 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu1 + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c - 0.15e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c + 0.21e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 - 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * mu2 * mu2 * c * mu1 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 + 0.27e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * c * mu1 * mu1 * mu2 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * mu1 * mu2 * c * c + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.3e1) * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.4e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.4e1) * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * mu2 * mu2 * pow(mu1, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c + 0.27e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.81e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 - 0.27e2 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 + 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 + 0.3e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * mu1 - 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(c, 0.4e1) - 0.27e2 / 0.128e3 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * c * c - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * c - 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(mu1, 0.4e1) - 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) + 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.6e1) + 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 - 0.9e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) + 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.6e1) - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.6e1) + 0.3e1 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) + 0.45e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c + 0.27e2 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) + 0.81e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 - 0.27e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 + 0.21e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 - 0.27e2 / 0.128e3 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * mu1 * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c + 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.4e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * c * c + 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.4e1) + 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * mu1 * mu1 - 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 - 0.9e1 / 0.32e2 / delta2 / delta1 * log(z) * mu1 * mu1 - 0.9e1 / 0.32e2 / delta2 / delta1 * log(z) * c * c - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.6e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.6e1) + 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu2 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.4e1) + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) + 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.4e1) + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.4e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu1 * mu1 - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 - 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 + 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 - 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 - 0.3e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * c * pow(mu1, 0.3e1) - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * c * c * mu1 * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * c * mu1 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 / z * mu2 * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 / z * mu2 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.3e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.3e1) * mu2 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * c * c * mu1 * mu1 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / delta1 / z * c * pow(mu1, 0.3e1) - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * delta1 / z * c * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) + 0.45e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 - 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 - 0.21e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.15e2 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c + 0.21e2 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 + 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu1 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.5e1) * mu2 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.4e1) + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.5e1) + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c - 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.3e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.3e1) * mu2 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * mu2 * mu2 * mu1 * mu1 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(z) * c * c * mu1 * mu1 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * pow(mu1, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * c * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 + 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 / delta1 * log(z) * c * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(mu1, 0.4e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(c, 0.4e1) + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.5e1) * mu2 + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * mu1 * mu2 * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 - 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) * pow(mu1, 0.3e1) + 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * c * c * pow(mu1, 0.4e1) + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * c * pow(mu1, 0.5e1) + 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 - 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * mu2 * mu2 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c + 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * c * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * mu1 * mu1 * mu2 - 0.9e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.3e1) - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 - 0.9e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) + 0.9e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) - 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * pow(z, -0.2e1) + 0.9e1 / 0.128e3 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) + pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) / z - 0.3e1 / 0.8e1 / delta2 * log(z) * c + 0.3e1 / 0.8e1 / delta2 * log(z) * mu1 + 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * c - 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1) + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * log(z) - 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) - 0.9e1 / 0.64e2 / delta2 * delta1 * log(z) + 0.9e1 / 0.64e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;

			
		case 4:
			return -0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu1 + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c + 0.15e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c - 0.21e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 + 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * mu2 * mu2 * c * mu1 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 - 0.27e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * c * mu1 * mu1 * mu2 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * mu1 * mu2 * c * c - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.3e1) * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.4e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.4e1) * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * mu2 * mu2 * pow(mu1, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c - 0.27e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) - 0.81e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 + 0.27e2 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 - 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 - 0.3e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * mu1 + 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(c, 0.4e1) + 0.27e2 / 0.128e3 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * c * c - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * c + 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(mu1, 0.4e1) + 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) - 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.6e1) - 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.6e1) + 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 + 0.9e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) - 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.6e1) + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.6e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.6e1) - 0.3e1 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) - 0.45e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c - 0.27e2 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) - 0.81e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 + 0.27e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 - 0.21e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.27e2 / 0.128e3 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * mu1 * mu1 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c + 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.4e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * c * c + 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.4e1) - 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * mu1 * mu1 - 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 + 0.9e1 / 0.32e2 / delta2 / delta1 * log(z) * mu1 * mu1 + 0.9e1 / 0.32e2 / delta2 / delta1 * log(z) * c * c + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu2 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.4e1) - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) + 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.4e1) + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.4e1) - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu1 * mu1 + 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 + 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 - 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 + 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 + 0.3e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * c * pow(mu1, 0.3e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(c, 0.3e1) * mu1 - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * c * mu1 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 / z * mu2 * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 / z * mu2 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.3e1) * mu2 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * c * c * mu1 * mu1 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / delta1 / z * c * pow(mu1, 0.3e1) + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * delta1 / z * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) - 0.45e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 + 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 + 0.21e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) + 0.15e2 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c - 0.21e2 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 - 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu1 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.5e1) * mu2 + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.4e1) - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.5e1) - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.3e1) * mu2 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * mu2 * mu2 * mu1 * mu1 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(z) * c * c * mu1 * mu1 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * c * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * pow(mu1, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * c * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 - 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 - 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 - 0.9e1 / 0.16e2 / delta2 / delta1 * log(z) * c * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(mu1, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(c, 0.4e1) - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.5e1) * mu2 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * mu1 * mu2 * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 + 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) * pow(mu1, 0.3e1) - 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * c * c * pow(mu1, 0.4e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * mu1 * mu1 * mu2 + 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * c * pow(mu1, 0.5e1) - 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) + 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 - 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 + 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * mu2 * mu2 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c - 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * c * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * mu1 * mu1 * mu2 + 0.9e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.3e1) + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 + 0.9e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) - 0.9e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) + 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * pow(z, -0.2e1) - 0.9e1 / 0.128e3 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) - pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) / z - 0.3e1 / 0.8e1 / delta2 * log(z) * c + 0.3e1 / 0.8e1 / delta2 * log(z) * mu1 - 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * c + 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * log(z) + 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.64e2 / delta2 * delta1 * log(z) - 0.9e1 / 0.64e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;
			
		case 5:
			return 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * c * c * mu1 - 0.3e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * mu1 + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * c - 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu2 - 0.3e1 / 0.5e1 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c + 0.9e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 - 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c + 0.3e1 * pow(delta2, -0.3e1) / z * mu1 * mu2 * c + 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu2 * mu2 * mu1 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * c * mu1 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * mu1 * mu1 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * c * c * mu2 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * mu1 * mu1 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.3e1) + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) + 0.3e1 / 0.4e1 / delta2 * log(z) * c - 0.3e1 / 0.4e1 / delta2 * log(z) * mu1 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1);
			
		case 6:
			return -0.3e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c + 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c - 0.21e2 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 + 0.27e2 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 - 0.3e1 / 0.4e1 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c - 0.3e1 / 0.5e1 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.27e2 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 - 0.21e2 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c - 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 - 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c + 0.3e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c - 0.15e2 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) + 0.3e1 / 0.4e1 / delta1 / (-0.1e1 + z) * c - 0.3e1 / 0.4e1 / delta1 / (-0.1e1 + z) * mu2 + 0.9e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.4e1 - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.4e1 - 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * c + 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) + 0.9e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;
			
		case 7:
			return -0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c + 0.15e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c - 0.21e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 - 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 + 0.27e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c + 0.27e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.81e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 + 0.27e2 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 - 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 - 0.3e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 - 0.9e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) + 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.6e1) - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 + 0.3e1 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) + 0.45e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c + 0.27e2 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) + 0.81e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 + 0.27e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 - 0.21e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c + 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 - 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 + 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 - 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 - 0.3e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) + 0.45e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 - 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 - 0.21e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.15e2 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c + 0.21e2 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 + 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 + 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 - 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 + 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c - 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 + 0.9e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 + 0.9e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 + 0.9e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) + 0.9e1 / 0.128e3 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) + pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 - 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * c + 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) - 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.64e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;

			
		case 8:
			return 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c - 0.15e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c + 0.21e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 - 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 + 0.27e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c + 0.27e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.81e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 - 0.27e2 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 + 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 + 0.3e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 - 0.9e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) + 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.6e1) - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 + 0.3e1 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) + 0.45e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c + 0.27e2 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) + 0.81e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 - 0.27e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 + 0.21e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c + 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 - 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 + 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 - 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 - 0.3e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) + 0.45e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 - 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 - 0.21e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.15e2 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c + 0.21e2 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 + 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 + 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 - 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c + 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 - 0.9e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 - 0.9e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 + 0.9e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) + 0.9e1 / 0.128e3 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) + pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 + 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * c - 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) - 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.64e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;

		case 9:
			return 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu1 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * mu2 * mu2 * c * mu1 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * c * mu1 * mu1 * mu2 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * mu1 * mu2 * c * c - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.3e1) * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.4e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.4e1) * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * mu2 * mu2 * pow(mu1, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * mu1 + 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(c, 0.4e1) + 0.27e2 / 0.128e3 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * c * c + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * c + 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(mu1, 0.4e1) - 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.6e1) - 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.6e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.6e1) + 0.27e2 / 0.128e3 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * mu1 * mu1 - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.4e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * c * c - 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.4e1) - 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * mu1 * mu1 + 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 + 0.9e1 / 0.32e2 / delta2 / delta1 * log(z) * mu1 * mu1 + 0.9e1 / 0.32e2 / delta2 / delta1 * log(z) * c * c + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.6e1) - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu2 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.4e1) - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.4e1) - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.4e1) - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu1 * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * c * pow(mu1, 0.3e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(c, 0.3e1) * mu1 - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * c * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 / z * mu2 * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 / z * mu2 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.3e1) * mu2 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * c * c * mu1 * mu1 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / delta1 / z * c * pow(mu1, 0.3e1) + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * delta1 / z * c * mu1 - 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.5e1) * mu2 + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.4e1) - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.5e1) + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.3e1) * mu2 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * mu2 * mu2 * mu1 * mu1 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(z) * c * c * mu1 * mu1 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * c * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * pow(mu1, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * c * mu1 - 0.9e1 / 0.16e2 / delta2 / delta1 * log(z) * c * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(mu1, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(c, 0.4e1) - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.5e1) * mu2 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.5e1) + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * mu1 * mu2 * c + 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) * pow(mu1, 0.3e1) - 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * c * c * pow(mu1, 0.4e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * mu1 * mu1 * mu2 + 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * c * pow(mu1, 0.5e1) + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * mu2 * mu2 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * c * mu1 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * mu1 * mu1 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.3e1) + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) + 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * pow(z, -0.2e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) / z + 0.3e1 / 0.8e1 / delta2 * log(z) * c - 0.3e1 / 0.8e1 / delta2 * log(z) * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * log(z) + 0.9e1 / 0.64e2 / delta2 * delta1 * log(z);
			
		case 10:
			return -0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu1 + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * mu2 * mu2 * c * mu1 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * c * mu1 * mu1 * mu2 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * mu1 * mu2 * c * c - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.3e1) * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.4e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.4e1) * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * mu2 * mu2 * pow(mu1, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * mu1 + 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(c, 0.4e1) + 0.27e2 / 0.128e3 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * c * c - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * delta1 * delta1 * pow(z, -0.2e1) * c + 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(mu1, 0.4e1) - 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.6e1) - 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.6e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.6e1) + 0.27e2 / 0.128e3 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * mu1 * mu1 + 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.4e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * c * c + 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.4e1) - 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * mu1 * mu1 - 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 + 0.9e1 / 0.32e2 / delta2 / delta1 * log(z) * mu1 * mu1 + 0.9e1 / 0.32e2 / delta2 / delta1 * log(z) * c * c + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.6e1) - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu2 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.4e1) - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) + 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.4e1) + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.4e1) - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu1 * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * c * pow(mu1, 0.3e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * pow(z, -0.2e1) * pow(c, 0.3e1) * mu1 - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * pow(z, -0.2e1) * c * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 / z * mu2 * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 / z * mu2 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.3e1) * mu2 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * c * c * mu1 * mu1 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / delta1 / z * c * pow(mu1, 0.3e1) + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * delta1 / z * c * mu1 - 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.5e1) * mu2 + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.4e1) - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.5e1) - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.3e1) * mu2 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * mu2 * mu2 * mu1 * mu1 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(z) * c * c * mu1 * mu1 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * c * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * pow(mu1, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * c * mu1 - 0.9e1 / 0.16e2 / delta2 / delta1 * log(z) * c * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(mu1, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * mu2 * mu2 * pow(c, 0.4e1) - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.5e1) * mu2 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.5e1) - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) / z * mu1 * mu2 * c + 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) * pow(mu1, 0.3e1) - 0.9e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * c * c * pow(mu1, 0.4e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * mu1 * mu1 * mu2 + 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(z, -0.2e1) * c * pow(mu1, 0.5e1) - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * mu2 * mu2 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * c * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * c * mu1 * mu1 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * mu1 * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(z, -0.2e1) * pow(mu1, 0.3e1) - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) + 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * pow(z, -0.2e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) / z - 0.3e1 / 0.8e1 / delta2 * log(z) * c + 0.3e1 / 0.8e1 / delta2 * log(z) * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * log(z) + 0.9e1 / 0.64e2 / delta2 * delta1 * log(z);

			
		case 11:
			return 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c - 0.15e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c + 0.21e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 - 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 + 0.27e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c + 0.27e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.81e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 - 0.27e2 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 + 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 + 0.3e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 - 0.9e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) + 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.6e1) - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 + 0.3e1 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) + 0.45e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c + 0.27e2 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) + 0.81e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 - 0.27e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 + 0.21e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c + 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 - 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 + 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 - 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 - 0.3e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) + 0.45e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 - 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 - 0.21e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.15e2 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c + 0.21e2 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 + 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 + 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 - 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c + 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 - 0.9e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 - 0.9e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 + 0.9e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) + 0.9e1 / 0.128e3 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) + pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 + 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * c - 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) - 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.64e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;

		case 12:
			return -0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c + 0.15e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c - 0.21e2 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 - 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 + 0.27e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c + 0.27e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.81e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 + 0.27e2 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 - 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 - 0.3e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 - 0.9e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) + 0.3e1 / 0.640e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.6e1) - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 + 0.3e1 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) + 0.45e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c + 0.27e2 / 0.128e3 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) + 0.81e2 / 0.128e3 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 + 0.27e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 - 0.21e2 / 0.80e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c + 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 - 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 + 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 - 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 - 0.3e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) + 0.45e2 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 - 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 - 0.21e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.15e2 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c + 0.21e2 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.128e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 + 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 + 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 - 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 + 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c - 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 + 0.9e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 + 0.9e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 + 0.9e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) + 0.9e1 / 0.128e3 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) + pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 - 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * c + 0.3e1 / 0.8e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) - 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.64e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;

	
		default:
			cout<<"This basic piece doesn't exist"; 
	}
}

// there are total 12 basic pieces  so piece number will vary from  1 to 12
double epanechnikov_kernel_polynomial :: PQRS_second_moment_piece_value(double z, int piecenum)
{

	if(fabs(z) < e_epsilon)	
	{
		z = e_tweak;
	}
	if(fabs(1-z) < e_epsilon)	
	{
		z = 1 - e_tweak;
	}

	
	switch (piecenum)
	{
		// Expressions for z^2.pdf(z) and not pdf(z)
		case 1:
			return -0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / z * c * c * mu1 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c - 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.3e1) * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * z * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z * c * mu1 * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * c * pow(mu1, 0.4e1) * mu2 * z - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu2 * z * c * mu1 * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * mu1 * mu2 * mu2 * z + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * z * c * pow(mu1, 0.3e1) - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * c * pow(mu1, 0.3e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) * mu1 * c * c + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * mu1 * mu2 * c * c + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * mu1 * mu1 * mu2 * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu1, 0.4e1) * mu2 * mu2 * z - 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * c * mu1 * mu1 * z + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * c * z * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu2 * mu2 * c * z + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu2 * mu2 * mu1 * z - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * z - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * mu1 * mu1 * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * mu1 * mu2 * mu2 * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * mu2 * mu2 * z * c - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu1, 0.6e1) * z + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu1 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * c * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * c * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * c * c - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 * mu1 * mu1 * z - 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * z - 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu2 * z - 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu2 * z + 0.9e1 / 0.32e2 / delta2 / delta1 * mu2 * mu2 * z - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * c * z + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu1, 0.4e1) * z + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu1, 0.4e1) * z + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * mu1 * mu1 * z + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu1 * z - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu2 * z + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * mu2 * mu2 * z + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.6e1) * z + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.6e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.4e1) * z + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * c * z + 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu1 * z - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 + 0.45e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.15e2 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.4e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c + 0.27e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.81e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 + 0.27e2 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 - 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.6e1) + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.6e1) + 0.3e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) + 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 - 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.4e1) - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 / z * c * c + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.4e1) - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 / z * mu1 * mu1 - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.6e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.6e1) + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) + 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.4e1) + 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.4e1) - 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu1 * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.3e1) * pow(mu1, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * pow(mu1, 0.3e1) * z - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * c * pow(mu1, 0.3e1) * z - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * c * mu1 * z + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * c * z + 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * mu1 * z + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu2 * c * z + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu1 * z + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.3e1) * z * c - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * mu2 * z - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu1 * z * c + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * c * mu2 * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * pow(mu1, 0.3e1) * mu2 * z - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * mu1 * mu2 * z + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * c * pow(mu1, 0.5e1) * z + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(mu1, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * mu1 * z - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * c * z - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * mu1 * z - 0.9e1 / 0.16e2 / delta2 / delta1 * mu2 * z * c + 0.9e1 / 0.16e2 / delta2 / delta1 * mu1 * z * c + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * mu1 * mu1 * mu2 * mu2 * z + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * c * pow(mu1, 0.4e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * c * mu1 * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * c * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * c * mu1 * mu2 * z - 0.27e2 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 + 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) - 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * c * c * mu1 * mu1 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * c * pow(mu1, 0.3e1) + 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * c * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 - 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu1 + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.4e1) - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.5e1) - 0.3e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c - 0.9e1 / 0.8e1 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.3e1) * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / delta1 * log(z) * c * pow(mu1, 0.3e1) + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * delta1 * log(z) * c * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 - 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.5e1) * mu2 + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.5e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 - 0.21e2 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * c * mu1 * mu1 * mu2 - 0.3e1 / 0.8e1 / delta2 * mu1 * z - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / z * pow(c, 0.3e1) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) + 0.3e1 / 0.8e1 / delta2 * c * z - 0.3e1 / 0.8e1 / delta1 * c * z + 0.3e1 / 0.8e1 / delta1 * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(mu1, 0.3e1) * z - 0.9e1 / 0.64e2 / delta2 * delta1 * z - 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * z + 0.9e1 / 0.64e2 * delta2 / delta1 * z + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * z + 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 + 0.63e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 - 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c + 0.21e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c - 0.9e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) + 0.3e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) + pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) / z - 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * c + 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1) - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * log(z) - 0.3e1 / 0.16e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.32e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) + 0.15e2 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;
			
		case 2:
			return 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / z * c * c * mu1 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c + 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * z * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z * c * mu1 * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * c * pow(mu1, 0.4e1) * mu2 * z + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu2 * z * c * mu1 * mu1 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * mu1 * mu2 * mu2 * z - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * z * c * pow(mu1, 0.3e1) + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * c * pow(mu1, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) * mu1 * c * c - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * mu1 * mu2 * c * c - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * mu1 * mu1 * mu2 * z + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu1, 0.4e1) * mu2 * mu2 * z + 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * c * mu1 * mu1 * z - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * c * z * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu2 * mu2 * c * z - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu2 * mu2 * mu1 * z + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * z - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * mu1 * mu1 * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * mu1 * mu2 * mu2 * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * mu2 * mu2 * z * c + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu1, 0.6e1) * z + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu1 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * c * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * c * c + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * c * c + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 * mu1 * mu1 * z + 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * z + 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu2 * z + 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu2 * z - 0.9e1 / 0.32e2 / delta2 / delta1 * mu2 * mu2 * z - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * c * z - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu1, 0.4e1) * z - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu1, 0.4e1) * z - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * mu1 * mu1 * z + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu1 * z - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu2 * z - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * mu2 * mu2 * z - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.6e1) * z - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.6e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * z + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.4e1) * z - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * c * z - 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu1 * z + 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 - 0.45e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 + 0.15e2 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 + 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.4e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c - 0.27e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) - 0.81e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 - 0.27e2 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 + 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) + 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.6e1) - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.6e1) - 0.3e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) - 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) - 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 + 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.4e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 / z * c * c + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.4e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 / z * mu1 * mu1 - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.6e1) - 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c - 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) + 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.4e1) + 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.4e1) + 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu1 * mu1 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.3e1) * pow(mu1, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * pow(mu1, 0.3e1) * z + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * c * pow(mu1, 0.3e1) * z + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * c * mu1 * z - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * c * z - 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * mu1 * z - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu2 * c * z - 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu1 * z - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.3e1) * z * c + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * mu2 * z + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu1 * z * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * c * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * pow(mu1, 0.3e1) * mu2 * z + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * mu1 * mu2 * z - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * c * pow(mu1, 0.5e1) * z - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(mu1, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * mu1 * z + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * c * z + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * mu1 * z + 0.9e1 / 0.16e2 / delta2 / delta1 * mu2 * z * c - 0.9e1 / 0.16e2 / delta2 / delta1 * mu1 * z * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * mu1 * mu1 * mu2 * mu2 * z - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * c * pow(mu1, 0.4e1) + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * c * mu1 * mu1 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * c * mu1 * mu2 * z + 0.27e2 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 + 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) + 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * c * c * mu1 * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * c * pow(mu1, 0.3e1) - 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * c * mu1 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 + 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 + 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu1 + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu1 - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.4e1) + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.5e1) + 0.3e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c + 0.9e1 / 0.8e1 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.3e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.3e1) * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / delta1 * log(z) * c * pow(mu1, 0.3e1) - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * delta1 * log(z) * c * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 + 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.5e1) * mu2 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.5e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 + 0.21e2 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * c * mu1 * mu1 * mu2 - 0.3e1 / 0.8e1 / delta2 * mu1 * z + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / z * pow(c, 0.3e1) + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) + 0.3e1 / 0.8e1 / delta2 * c * z + 0.3e1 / 0.8e1 / delta1 * c * z - 0.3e1 / 0.8e1 / delta1 * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(mu1, 0.3e1) * z + 0.9e1 / 0.64e2 / delta2 * delta1 * z + 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * z - 0.9e1 / 0.64e2 * delta2 / delta1 * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * z - 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 - 0.63e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c - 0.21e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c + 0.9e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) - 0.3e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) - pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) / z + 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * c - 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1) + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * log(z) + 0.3e1 / 0.16e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) - 0.9e1 / 0.32e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) - 0.15e2 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;

			
		case 3:
			return 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / z * c * c * mu1 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c + 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * z * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z * c * mu1 * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * c * pow(mu1, 0.4e1) * mu2 * z - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu2 * z * c * mu1 * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * mu1 * mu2 * mu2 * z + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * z * c * pow(mu1, 0.3e1) - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * c * pow(mu1, 0.3e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) * mu1 * c * c + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * mu1 * mu2 * c * c + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * mu1 * mu1 * mu2 * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu1, 0.4e1) * mu2 * mu2 * z - 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * c * mu1 * mu1 * z - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * c * z * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu2 * mu2 * c * z - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu2 * mu2 * mu1 * z + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * z + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * mu1 * mu1 * mu2 * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * mu1 * mu2 * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * mu2 * mu2 * z * c - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu1, 0.6e1) * z - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu1 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * c * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * c * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * c * c - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 * mu1 * mu1 * z - 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * z - 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu2 * z + 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu2 * z + 0.9e1 / 0.32e2 / delta2 / delta1 * mu2 * mu2 * z + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * c * z + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu1, 0.4e1) * z + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu1, 0.4e1) * z + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * mu1 * mu1 * z - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu1 * z + 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu2 * z + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * mu2 * mu2 * z + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.6e1) * z + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.6e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.4e1) * z - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * c * z - 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu1 * z - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 + 0.45e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.15e2 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.4e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c + 0.27e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.81e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 - 0.27e2 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 + 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.6e1) + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.6e1) + 0.3e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) + 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 + 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.4e1) - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 / z * c * c - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.4e1) - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 / z * mu1 * mu1 + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.6e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.6e1) + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.4e1) - 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.4e1) - 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu1 * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.3e1) * pow(mu1, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * pow(mu1, 0.3e1) * z - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * c * pow(mu1, 0.3e1) * z - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * c * mu1 * z + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * c * z + 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * mu1 * z + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu2 * c * z + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu1 * z + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.3e1) * z * c - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * mu2 * z - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu1 * z * c + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * c * mu2 * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * pow(mu1, 0.3e1) * mu2 * z - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * mu1 * mu2 * z + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * c * pow(mu1, 0.5e1) * z + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(mu1, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * mu1 * z - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * c * z - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * mu1 * z - 0.9e1 / 0.16e2 / delta2 / delta1 * mu2 * z * c + 0.9e1 / 0.16e2 / delta2 / delta1 * mu1 * z * c + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * mu1 * mu1 * mu2 * mu2 * z + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * c * pow(mu1, 0.4e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * c * mu1 * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * c * mu1 * mu2 * z - 0.27e2 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 + 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) - 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * c * c * mu1 * mu1 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * c * pow(mu1, 0.3e1) + 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * c * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 - 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu1 + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.4e1) - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.5e1) + 0.3e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c - 0.9e1 / 0.8e1 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.3e1) * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / delta1 * log(z) * c * pow(mu1, 0.3e1) + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * delta1 * log(z) * c * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 - 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.5e1) * mu2 + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.5e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 - 0.21e2 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * c * mu1 * mu1 * mu2 + 0.3e1 / 0.8e1 / delta2 * mu1 * z + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / z * pow(c, 0.3e1) + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) - 0.3e1 / 0.8e1 / delta2 * c * z + 0.3e1 / 0.8e1 / delta1 * c * z - 0.3e1 / 0.8e1 / delta1 * mu2 * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(mu1, 0.3e1) * z - 0.9e1 / 0.64e2 / delta2 * delta1 * z - 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * z + 0.9e1 / 0.64e2 * delta2 / delta1 * z + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * z + 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 + 0.63e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c - 0.21e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c + 0.9e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) + 0.3e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) + pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) / z + 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * c - 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1) + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * log(z) - 0.3e1 / 0.16e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.32e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) - 0.15e2 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;


		case 4:
			return -0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / z * c * c * mu1 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c - 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.3e1) * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * z * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z * c * mu1 * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * c * pow(mu1, 0.4e1) * mu2 * z + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu2 * z * c * mu1 * mu1 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * mu1 * mu2 * mu2 * z - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * z * c * pow(mu1, 0.3e1) + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * c * pow(mu1, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) * mu1 * c * c - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * mu1 * mu2 * c * c - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * mu1 * mu1 * mu2 * z + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu1, 0.4e1) * mu2 * mu2 * z + 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * c * mu1 * mu1 * z + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * c * z * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu2 * mu2 * c * z + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu2 * mu2 * mu1 * z - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * z + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * mu1 * mu1 * mu2 * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * mu1 * mu2 * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * mu2 * mu2 * z * c + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu1, 0.6e1) * z - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu1 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * c * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * c * c + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * c * c + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 * mu1 * mu1 * z + 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * z + 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu2 * z - 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu2 * z - 0.9e1 / 0.32e2 / delta2 / delta1 * mu2 * mu2 * z + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * c * z - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu1, 0.4e1) * z - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu1, 0.4e1) * z - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * mu1 * mu1 * z - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu1 * z + 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu2 * z - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * mu2 * mu2 * z - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.6e1) * z - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.6e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * z + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.4e1) * z + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * c * z + 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu1 * z + 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 - 0.45e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 + 0.15e2 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 + 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.4e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 - 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c - 0.27e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) - 0.81e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 + 0.27e2 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 - 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) + 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.6e1) - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.6e1) - 0.3e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) - 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) - 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 - 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.4e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 / z * c * c - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.4e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 / z * mu1 * mu1 + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.6e1) - 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c - 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.4e1) - 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.4e1) + 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu1 * mu1 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.3e1) * pow(mu1, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * pow(mu1, 0.3e1) * z + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * c * pow(mu1, 0.3e1) * z + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * c * mu1 * z - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * c * z - 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * mu1 * z - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu2 * c * z - 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu1 * z - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.3e1) * z * c + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * mu2 * z + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu1 * z * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * c * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * pow(mu1, 0.3e1) * mu2 * z + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * mu1 * mu2 * z - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * c * pow(mu1, 0.5e1) * z - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(mu1, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * mu1 * z + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * c * z + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * mu1 * z + 0.9e1 / 0.16e2 / delta2 / delta1 * mu2 * z * c - 0.9e1 / 0.16e2 / delta2 / delta1 * mu1 * z * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * mu1 * mu1 * mu2 * mu2 * z - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * c * pow(mu1, 0.4e1) + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * c * mu1 * mu1 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * c * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * c * mu1 * mu2 * z + 0.27e2 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 + 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) + 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * c * c * mu1 * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * c * pow(mu1, 0.3e1) - 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * c * mu1 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 + 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 + 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu1 + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu1 - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.4e1) + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.5e1) - 0.3e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c + 0.9e1 / 0.8e1 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.3e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.3e1) * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / delta1 * log(z) * c * pow(mu1, 0.3e1) - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * delta1 * log(z) * c * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 + 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.5e1) * mu2 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.5e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 + 0.21e2 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * c * mu1 * mu1 * mu2 + 0.3e1 / 0.8e1 / delta2 * mu1 * z - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / z * pow(c, 0.3e1) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) - 0.3e1 / 0.8e1 / delta2 * c * z - 0.3e1 / 0.8e1 / delta1 * c * z + 0.3e1 / 0.8e1 / delta1 * mu2 * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(mu1, 0.3e1) * z + 0.9e1 / 0.64e2 / delta2 * delta1 * z + 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * z - 0.9e1 / 0.64e2 * delta2 / delta1 * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * z - 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 - 0.63e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 - 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c + 0.21e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c - 0.9e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) - 0.3e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) - pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) / z - 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * c + 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1) - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * log(z) + 0.3e1 / 0.16e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) - 0.9e1 / 0.32e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) + 0.15e2 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;

			
		case 5:
			return -0.9e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * c * mu1 + 0.9e1 / 0.4e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * c * mu1 * mu1 * z - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * mu1 * mu1 * mu2 * z + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * mu1 * mu2 * mu2 * z - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * mu2 * mu2 * z * c + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu2 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu1 - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * c * z + 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu1 * z - 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu2 * z + 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c - 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 + 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 + 0.3e1 / 0.5e1 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * c * mu1 * mu2 * z - 0.3e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c - 0.3e1 / 0.4e1 / delta2 * mu1 * z + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * pow(c, 0.3e1) + 0.3e1 / 0.4e1 / delta2 * c * z + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * pow(mu1, 0.3e1) * z - 0.9e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 + 0.3e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1);
			
		case 6:
			return -0.9e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c + 0.3e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c - 0.15e2 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * c * z * mu1 * mu1 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu2 * mu2 * c * z + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * mu2 * mu2 * mu1 * z - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * z + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * c * c - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * c * c - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu2 * z + 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * c * z + 0.3e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu1 * z + 0.27e2 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 - 0.9e1 / 0.5e1 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c - 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 - 0.3e1 / 0.4e1 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c - 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 - 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 - 0.6e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) - 0.3e1 / 0.4e1 / delta1 * c * z + 0.3e1 / 0.4e1 / delta1 * mu2 * z - 0.9e1 / 0.5e1 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 + 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c + 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c + 0.9e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 + 0.9e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 - 0.3e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c + 0.21e2 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c - 0.9e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 + 0.9e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) + 0.3e1 / 0.4e1 / delta1 / (-0.1e1 + z) * c - 0.3e1 / 0.4e1 / delta1 / (-0.1e1 + z) * mu2 + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.4e1 - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.4e1 - 0.3e1 / 0.2e1 / delta1 * log(fabs(-0.1e1 + z)) * c + 0.3e1 / 0.2e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) + 0.15e2 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;

			
		case 7:
			return -0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c - 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * z * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z * c * mu1 * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu2 * z * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) * mu1 * c * c + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.4e1) * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.3e1) * mu1 * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * pow(c, 0.3e1) * z * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * c * c * z * mu1 * mu1 - 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * c * z * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu2 * mu2 * c * z + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu2 * mu2 * mu1 * z - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * z + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * c * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * c * c - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c - 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * z - 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu2 * z - 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu2 * z + 0.9e1 / 0.32e2 / delta2 / delta1 * mu2 * mu2 * z + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.6e1) * z + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.6e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.4e1) * z + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * c * z + 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu1 * z - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 + 0.45e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.15e2 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(c, 0.3e1) * z * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * c * c * z * mu1 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * mu2 * z * pow(c, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * mu2 * mu2 * c * c * z - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.5e1) * mu1 * z + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.4e1) * mu1 * mu1 * z - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) * z + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.6e1) * z + 0.9e1 / 0.32e2 / delta2 / delta1 * c * c * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(c, 0.4e1) * z - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(c, 0.4e1) * z + 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c + 0.27e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.81e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 + 0.27e2 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 - 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 + 0.3e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) + 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 - 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * pow(c, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * c * z + 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * mu1 * z + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu2 * c * z + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu1 * z + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.3e1) * z * c - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * mu2 * z - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu1 * z * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * mu1 * z - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * c * z - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * mu1 * z - 0.9e1 / 0.16e2 / delta2 / delta1 * mu2 * z * c - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * c * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 - 0.27e2 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 + 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 - 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 - 0.3e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 - 0.9e1 / 0.8e1 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 - 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 - 0.21e2 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) - 0.3e1 / 0.8e1 / delta1 * c * z + 0.3e1 / 0.8e1 / delta1 * mu2 * z - 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * z + 0.9e1 / 0.64e2 * delta2 / delta1 * z + 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 + 0.63e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 - 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c + 0.21e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c - 0.9e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 + 0.9e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) + 0.3e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) + pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 - 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * c + 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.32e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) + 0.15e2 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;

			
		case 8:
			return 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c + 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * z * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z * c * mu1 * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu2 * z * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) * mu1 * c * c + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.4e1) * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.3e1) * mu1 * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * pow(c, 0.3e1) * z * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * c * c * z * mu1 * mu1 - 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * c * z * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu2 * mu2 * c * z - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu2 * mu2 * mu1 * z + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * z - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * c * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * c * c - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c - 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * z - 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu2 * z + 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu2 * z + 0.9e1 / 0.32e2 / delta2 / delta1 * mu2 * mu2 * z + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.6e1) * z + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.6e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.4e1) * z - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * c * z - 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu1 * z - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 + 0.45e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.15e2 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(c, 0.3e1) * z * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * c * c * z * mu1 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * mu2 * z * pow(c, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * mu2 * mu2 * c * c * z - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.5e1) * mu1 * z + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.4e1) * mu1 * mu1 * z - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) * z + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.6e1) * z + 0.9e1 / 0.32e2 / delta2 / delta1 * c * c * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(c, 0.4e1) * z - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(c, 0.4e1) * z + 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c + 0.27e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.81e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 - 0.27e2 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 + 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 + 0.3e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) + 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 + 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * pow(c, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * c * z + 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * mu1 * z + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu2 * c * z + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu1 * z + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.3e1) * z * c - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * mu2 * z - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu1 * z * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * mu1 * z - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * c * z - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * mu1 * z - 0.9e1 / 0.16e2 / delta2 / delta1 * mu2 * z * c - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 - 0.27e2 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 + 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 - 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 + 0.3e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 - 0.9e1 / 0.8e1 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 - 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 - 0.21e2 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) + 0.3e1 / 0.8e1 / delta1 * c * z - 0.3e1 / 0.8e1 / delta1 * mu2 * z - 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * z + 0.9e1 / 0.64e2 * delta2 / delta1 * z + 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 + 0.63e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c - 0.21e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c + 0.9e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 + 0.9e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) + 0.3e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) + pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 + 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * c - 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.32e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) - 0.15e2 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;


		case 9:
			return -0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / z * c * c * mu1 + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.3e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * c * pow(mu1, 0.4e1) * mu2 * z + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * mu1 * mu2 * mu2 * z - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * z * c * pow(mu1, 0.3e1) + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * c * pow(mu1, 0.3e1) * mu2 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * mu1 * mu2 * c * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * mu1 * mu1 * mu2 * z + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.4e1) * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.3e1) * mu1 * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * pow(c, 0.3e1) * z * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * c * c * z * mu1 * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu1, 0.4e1) * mu2 * mu2 * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * c * mu1 * mu1 * z - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * mu1 * mu1 * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * mu1 * mu2 * mu2 * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * mu2 * mu2 * z * c + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu1, 0.6e1) * z + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 * mu1 * mu1 * z - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * c * z - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu1, 0.4e1) * z - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu1, 0.4e1) * z - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * mu1 * mu1 * z + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu1 * z - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu2 * z - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * mu2 * mu2 * z + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.4e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(c, 0.3e1) * z * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * c * c * z * mu1 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * mu2 * z * pow(c, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * mu2 * mu2 * c * c * z - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.5e1) * mu1 * z + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.4e1) * mu1 * mu1 * z - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) * z + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.6e1) * z + 0.9e1 / 0.32e2 / delta2 / delta1 * c * c * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(c, 0.4e1) * z - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(c, 0.4e1) * z - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.6e1) - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.6e1) + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.4e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 / z * c * c + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.4e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 / z * mu1 * mu1 - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.6e1) + 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.4e1) + 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.4e1) + 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu1 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.3e1) * pow(mu1, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * pow(mu1, 0.3e1) * z + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * c * pow(mu1, 0.3e1) * z + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * c * mu1 * z - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * c * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * pow(mu1, 0.3e1) * mu2 * z + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * mu1 * mu2 * z - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * c * pow(mu1, 0.5e1) * z - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(mu1, 0.5e1) - 0.9e1 / 0.16e2 / delta2 / delta1 * mu1 * z * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * mu1 * mu1 * mu2 * mu2 * z - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * c * pow(mu1, 0.4e1) + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * c * mu1 * mu1 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * c * mu1 * mu2 * z + 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * c * c * mu1 * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * c * pow(mu1, 0.3e1) - 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * c * mu1 - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu1 + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu1 - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.4e1) + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.5e1) - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.3e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.3e1) * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / delta1 * log(z) * c * pow(mu1, 0.3e1) - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * delta1 * log(z) * c * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.5e1) * mu2 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.5e1) + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * c * mu1 * mu1 * mu2 - 0.3e1 / 0.8e1 / delta2 * mu1 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / z * pow(c, 0.3e1) + 0.3e1 / 0.8e1 / delta2 * c * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(mu1, 0.3e1) * z + 0.9e1 / 0.64e2 / delta2 * delta1 * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * z - 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) / z - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * log(z);


		case 10:
			return 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / z * c * c * mu1 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / z * c * mu1 * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.3e1) * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * c * pow(mu1, 0.4e1) * mu2 * z + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * mu1 * mu2 * mu2 * z - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * z * c * pow(mu1, 0.3e1) + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * c * pow(mu1, 0.3e1) * mu2 - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * mu1 * mu2 * c * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * mu1 * mu1 * mu2 * z + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.4e1) * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.3e1) * mu1 * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * pow(c, 0.3e1) * z * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * c * c * z * mu1 * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu1, 0.4e1) * mu2 * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * c * mu1 * mu1 * z + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * mu1 * mu1 * mu2 * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * mu1 * mu2 * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * mu2 * mu2 * z * c + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu1, 0.6e1) * z - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * c * c * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * c * c + 0.9e1 / 0.32e2 / delta2 / delta1 * mu1 * mu1 * z + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * c * z - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu1, 0.4e1) * z - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu1, 0.4e1) * z - 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * mu1 * mu1 * z - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu1 * z + 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * mu2 * z - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * delta1 * mu2 * mu2 * z + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.4e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(c, 0.3e1) * z * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * c * c * z * mu1 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * mu2 * z * pow(c, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * mu2 * mu2 * c * c * z - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.5e1) * mu1 * z + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.4e1) * mu1 * mu1 * z - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) * z + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.6e1) * z + 0.9e1 / 0.32e2 / delta2 / delta1 * c * c * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(c, 0.4e1) * z - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(c, 0.4e1) * z - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(mu1, 0.6e1) - 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.6e1) + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / z * pow(c, 0.4e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 / z * c * c - 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * c + 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / z * pow(mu1, 0.4e1) + 0.27e2 / 0.64e2 * pow(delta2, -0.3e1) * delta1 / z * mu1 * mu1 + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * delta1 * delta1 / z * mu1 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.6e1) - 0.3e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu2 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.4e1) - 0.3e1 / 0.10e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * c + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.4e1) + 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu1 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.3e1) * pow(mu1, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * c * pow(mu1, 0.3e1) * z + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * c * pow(mu1, 0.3e1) * z + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * c * mu1 * z - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * delta1 * c * mu2 * z + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * pow(mu1, 0.3e1) * mu2 * z + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * mu1 * mu2 * z - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * c * pow(mu1, 0.5e1) * z - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(mu1, 0.5e1) - 0.9e1 / 0.16e2 / delta2 / delta1 * mu1 * z * c - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * mu1 * mu1 * mu2 * mu2 * z - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * c * pow(mu1, 0.4e1) + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(z) * c * c * mu1 * mu1 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * c * mu1 * mu2 * z + 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / z * c * c * mu1 * mu1 - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / z * c * pow(mu1, 0.3e1) - 0.27e2 / 0.32e2 * pow(delta2, -0.3e1) * delta1 / z * c * mu1 - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.4e1) * mu1 * mu1 + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * pow(c, 0.5e1) * mu1 - 0.9e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * c * pow(mu1, 0.4e1) + 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / z * c * pow(mu1, 0.5e1) + 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu2 * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * delta1 * log(z) * mu2 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(c, 0.3e1) * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * pow(mu1, 0.3e1) * mu2 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) / delta1 * log(z) * c * pow(mu1, 0.3e1) - 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) * delta1 * log(z) * c * mu1 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(mu1, 0.5e1) * mu2 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(z) * c * pow(mu1, 0.5e1) + 0.9e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(z) * c * mu1 * mu1 * mu2 + 0.3e1 / 0.8e1 / delta2 * mu1 * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / z * pow(c, 0.3e1) - 0.3e1 / 0.8e1 / delta2 * c * z - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(mu1, 0.3e1) * z + 0.9e1 / 0.64e2 / delta2 * delta1 * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * z + 0.9e1 / 0.20e2 * pow(delta2, -0.3e1) * delta1 * delta1 * log(z) * mu1 - 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * mu1 * mu1 * mu2 - 0.3e1 / 0.2e1 * pow(delta2, -0.3e1) * log(z) * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / z * pow(mu1, 0.3e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) / z + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * log(z) * pow(mu1, 0.3e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, 0.3e1) * log(z);

	
		case 11:
			return 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c + 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * z * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z * c * mu1 * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu2 * z * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) * mu1 * c * c + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.4e1) * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.3e1) * mu1 * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * pow(c, 0.3e1) * z * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * c * c * z * mu1 * mu1 - 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * c * z * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu2 * mu2 * c * z - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu2 * mu2 * mu1 * z + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * z - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * c * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * c * c - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c - 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * z - 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu2 * z + 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu2 * z + 0.9e1 / 0.32e2 / delta2 / delta1 * mu2 * mu2 * z + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.6e1) * z + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.6e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.4e1) * z - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * c * z - 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu1 * z - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 + 0.45e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.15e2 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(c, 0.3e1) * z * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * c * c * z * mu1 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * mu2 * z * pow(c, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * mu2 * mu2 * c * c * z - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.5e1) * mu1 * z + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.4e1) * mu1 * mu1 * z - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) * z + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.6e1) * z + 0.9e1 / 0.32e2 / delta2 / delta1 * c * c * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(c, 0.4e1) * z - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(c, 0.4e1) * z + 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c + 0.27e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.81e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 - 0.27e2 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 + 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 + 0.3e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) + 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 + 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * pow(c, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * c * z + 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * mu1 * z + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu2 * c * z + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu1 * z + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.3e1) * z * c - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * mu2 * z - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu1 * z * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * mu1 * z - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * c * z - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * mu1 * z - 0.9e1 / 0.16e2 / delta2 / delta1 * mu2 * z * c - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 - 0.27e2 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 + 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 - 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 + 0.3e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 - 0.9e1 / 0.8e1 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 - 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 - 0.21e2 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) + 0.3e1 / 0.8e1 / delta1 * c * z - 0.3e1 / 0.8e1 / delta1 * mu2 * z - 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * z + 0.9e1 / 0.64e2 * delta2 / delta1 * z + 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 + 0.63e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c - 0.21e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c + 0.9e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 - 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 + 0.9e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) + 0.3e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) + pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 + 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * c - 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.32e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) - 0.15e2 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;

			
		case 12:
			return -0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * c * c + 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * c * c - 0.15e2 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 * mu2 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * z * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z * c * mu1 * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * mu2 * z * c * mu1 * mu1 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) * mu1 * c * c + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.4e1) * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.3e1) * mu1 * mu1 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * pow(c, 0.3e1) * z * mu1 + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * c * c * z * mu1 * mu1 - 0.9e1 / 0.64e2 * delta2 / delta1 / (-0.1e1 + z) + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * c * z * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu2 * mu2 * c * z + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu2 * mu2 * mu1 * z - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * z + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * c * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * c * c - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c - 0.9e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * z - 0.27e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu2 * z - 0.9e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu2 * z + 0.9e1 / 0.32e2 / delta2 / delta1 * mu2 * mu2 * z + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.6e1) * z + 0.3e1 / 0.320e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.6e1) - 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.4e1) * z + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * c * z + 0.3e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * mu1 * z - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu2 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu1 * mu2 + 0.45e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.4e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * mu1 * c * c + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * pow(mu2, 0.3e1) * c - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 * c * c * mu1 * mu1 - 0.15e2 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * pow(mu2, 0.4e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) * mu1 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * mu1 * c * c - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.3e1) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * pow(mu2, 0.4e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu1 * mu2 + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu1 * mu2 - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 * mu2 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu2 - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * pow(mu2, 0.3e1) * c + 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 * c * c * mu1 * mu1 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * pow(mu2, 0.4e1) - 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu1 * mu1 * mu2 + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(c, 0.3e1) * z * mu1 - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * c * c * z * mu1 * mu1 + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * mu2 * z * pow(c, 0.3e1) - 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * mu2 * mu2 * c * c * z - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.5e1) * mu1 * z + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.4e1) * mu1 * mu1 * z - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * z * pow(c, 0.5e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) * z + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(c, 0.6e1) * z + 0.9e1 / 0.32e2 / delta2 / delta1 * c * c * z - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 * pow(c, 0.4e1) * z - 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(c, 0.4e1) * z + 0.63e2 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c + 0.27e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.81e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * mu2 + 0.27e2 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 - 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 - 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(mu2, 0.4e1) + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.4e1) - 0.9e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.6e1) - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * c * c - 0.9e1 / 0.32e2 / delta2 / delta1 / (-0.1e1 + z) * mu2 * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.6e1) - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.6e1) / 0.320e3 - pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.6e1) / 0.320e3 + 0.3e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.4e1) + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) + 0.27e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 - 0.3e1 / 0.8e1 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c + 0.3e1 / 0.64e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) + 0.9e1 / 0.64e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 + 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 - 0.3e1 / 0.40e2 * delta2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * c + 0.9e1 / 0.16e2 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * mu2 * mu2 + 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.6e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.6e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * pow(c, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) * pow(c, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * c * z + 0.3e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * mu1 * z + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu2 * c * z + 0.9e1 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * mu2 * mu1 * z + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * pow(mu2, 0.3e1) * z * c - 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * mu1 * mu1 * mu2 * mu2 * z - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * mu1 * z * c + 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.4e1) * mu1 * mu1 * z - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * c * z - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(mu2, 0.5e1) * mu1 * z - 0.9e1 / 0.16e2 / delta2 / delta1 * mu2 * z * c - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * c * c - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * mu1 * z * c * mu2 - 0.27e2 / 0.8e1 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 - 0.9e1 / 0.4e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * pow(mu2, 0.3e1) + 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu1 * mu1 + 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * mu2 * mu2 - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu2 - 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.3e1) + 0.9e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.32e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * c * mu2 * mu2 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * pow(c, 0.3e1) + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * c * mu2 * mu2 - 0.45e2 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu2 - 0.15e2 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) * mu1 + 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * mu2 - 0.3e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.3e1) + 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.5e1) * mu1 + pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) * pow(c, 0.3e1) / 0.16e2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.4e1) * c * c + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.5e1) * c - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * mu2 * pow(c, 0.4e1) + 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.5e1) * mu2 - 0.3e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 * mu2 - 0.9e1 / 0.8e1 / delta2 / delta1 * log(fabs(-0.1e1 + z)) * c * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.3e1) * mu2 + 0.3e1 / 0.8e1 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * c * mu1 * mu1 - 0.9e1 / 0.8e1 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu1 - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 * mu2 + 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 + 0.9e1 / 0.8e1 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * c * c * mu2 * mu2 + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) * mu1 * mu1 - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.5e1) * c - 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * pow(mu2, 0.5e1) + 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(c, 0.5e1) * mu1 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * c * mu1 * mu2 - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.4e1) * mu1 * mu1 - 0.21e2 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * c * c + 0.9e1 / 0.40e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.5e1) * c + 0.9e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * pow(mu2, 0.5e1) - 0.3e1 / 0.64e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.4e1) * mu1 * mu1 - 0.3e1 / 0.80e2 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu2 - 0.3e1 / 0.160e3 * pow(delta2, -0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.5e1) * mu1 - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(mu2, 0.3e1) * z - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(c, 0.3e1) - 0.3e1 / 0.8e1 / delta1 * c * z + 0.3e1 / 0.8e1 / delta1 * mu2 * z - 0.3e1 / 0.64e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * z + 0.9e1 / 0.64e2 * delta2 / delta1 * z + 0.9e1 / 0.16e2 / delta2 / delta1 / (-0.1e1 + z) * c * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * pow(c, 0.3e1) * mu2 + 0.63e2 / 0.32e2 / delta2 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * c * mu2 * mu2 - 0.3e1 / 0.16e2 * pow(delta2, -0.3e1) / delta1 / (-0.1e1 + z) * c * pow(mu2, 0.3e1) - 0.9e1 / 0.16e2 / delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.27e2 / 0.16e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 * mu2 - 0.9e1 / 0.10e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu2 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c - 0.9e1 / 0.32e2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 + 0.9e1 / 0.20e2 * delta2 * delta2 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(mu2, 0.4e1) - 0.3e1 / 0.32e2 * pow(delta2, -0.3e1) / delta1 * log(fabs(-0.1e1 + z)) * pow(c, 0.4e1) + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * c + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * c * mu2 * mu2 - 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu1 * mu2 + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * mu1 * mu2 * mu2 - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu1 * mu1 * c + 0.21e2 / 0.8e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * mu2 * c * c - 0.9e1 / 0.2e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu2 * mu2 + 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * mu2 * c * c - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * c * mu2 * mu2 + 0.9e1 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * pow(mu2, 0.3e1) + 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * c - 0.3e1 / 0.8e1 / delta1 / (-0.1e1 + z) * mu2 + 0.3e1 / 0.4e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(mu2, 0.3e1) - 0.3e1 / 0.8e1 * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) * pow(c, 0.3e1) + pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(mu2, 0.3e1) / 0.8e1 - pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) * pow(c, 0.3e1) / 0.8e1 + 0.9e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) / (-0.1e1 + z) + 0.3e1 / 0.32e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.2e1) + pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * pow(-0.1e1 + z, -0.3e1) / 0.64e2 - 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * c + 0.3e1 / 0.4e1 / delta1 * log(fabs(-0.1e1 + z)) * mu2 - 0.3e1 / 0.2e1 * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) * pow(mu2, 0.3e1) - 0.3e1 / 0.16e2 * pow(delta2, 0.3e1) * pow(delta1, -0.3e1) * log(fabs(-0.1e1 + z)) + 0.9e1 / 0.32e2 * delta2 / delta1 * log(fabs(-0.1e1 + z)) + 0.15e2 / 0.4e1 * pow(delta1, -0.3e1) / (-0.1e1 + z) * c * mu1 * mu2;


		default:
			cout<<"This basic piece doesn't exist"; 
	}
}

